Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    EXPORT
    FALSE
    LATE
    NOT
    NULL_TYPE
    STATIC
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> LBRACE statements RBRACE
Rule 5     statement -> expression SEMICOLON
Rule 6     statement -> declaration SEMICOLON
Rule 7     statement -> assignation SEMICOLON
Rule 8     statement -> increment SEMICOLON
Rule 9     statement -> decrement SEMICOLON
Rule 10    statement -> import SEMICOLON
Rule 11    statement -> function
Rule 12    statement -> if
Rule 13    statement -> while
Rule 14    statement -> for
Rule 15    statement -> print
Rule 16    statement -> input
Rule 17    statement -> class_def
Rule 18    statement -> enum
Rule 19    statement -> try
Rule 20    statement -> switch
Rule 21    statement -> empty
Rule 22    statement -> return SEMICOLON
Rule 23    statement -> CONTINUE SEMICOLON
Rule 24    statement -> BREAK SEMICOLON
Rule 25    declaration -> declaration_modifier varType ID
Rule 26    declaration -> declaration_modifier ID
Rule 27    declaration -> varType ID
Rule 28    declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
Rule 29    list_literal -> LBRACKET list_elements RBRACKET
Rule 30    list_elements -> list_elements COMMA variable
Rule 31    list_elements -> variable
Rule 32    list_elements -> empty
Rule 33    declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
Rule 34    map_literal -> LBRACE map_elements RBRACE
Rule 35    map_elements -> map_elements COMMA map_pair
Rule 36    map_elements -> map_pair
Rule 37    map_elements -> empty
Rule 38    map_pair -> variable COLON variable
Rule 39    import -> IMPORT STRING SEMICOLON
Rule 40    return -> RETURN variable
Rule 41    return -> RETURN
Rule 42    assignation -> ID PLUS_EQUALS expression
Rule 43    assignation -> ID MINUS_EQUALS expression
Rule 44    assignation -> ID TIMES_EQUALS expression
Rule 45    assignation -> ID DIVIDE_EQUALS expression
Rule 46    assignation -> declaration ASSIGN_OPERATOR variable
Rule 47    assignation -> ID ASSIGN_OPERATOR variable
Rule 48    varType -> INT_TYPE
Rule 49    varType -> STRING_TYPE
Rule 50    varType -> NUM_TYPE
Rule 51    varType -> DOUBLE_TYPE
Rule 52    varType -> BOOL_TYPE
Rule 53    varType -> LIST_TYPE
Rule 54    varType -> MAP_TYPE
Rule 55    varType -> SET_TYPE
Rule 56    varType -> VAR
Rule 57    varType -> VOID
Rule 58    declaration_modifier -> CONST
Rule 59    declaration_modifier -> FINAL
Rule 60    variable -> INT
Rule 61    variable -> DOUBLE
Rule 62    variable -> STRING
Rule 63    variable -> BOOL
Rule 64    variable -> NULL
Rule 65    variable -> ID
Rule 66    variable -> function
Rule 67    variable -> expression
Rule 68    expression -> expression PLUS term
Rule 69    expression -> expression MINUS term
Rule 70    expression -> term
Rule 71    term -> term TIMES factor
Rule 72    term -> term DIVIDE factor
Rule 73    term -> term MODULE factor
Rule 74    term -> factor
Rule 75    factor -> ID LBRACKET expression RBRACKET
Rule 76    factor -> ID DOT ID
Rule 77    factor -> ID
Rule 78    factor -> LPARENTHESIS expression RPARENTHESIS
Rule 79    factor -> MINUS factor
Rule 80    factor -> INT
Rule 81    factor -> DOUBLE
Rule 82    booleanExpression -> variable EQUALS variable
Rule 83    booleanExpression -> variable NOT_EQUALS variable
Rule 84    booleanExpression -> variable GREATER_THAN variable
Rule 85    booleanExpression -> variable LESS_THAN variable
Rule 86    booleanExpression -> variable GREATER_THAN_OR_EQUALS variable
Rule 87    booleanExpression -> variable LESS_THAN_OR_EQUALS variable
Rule 88    booleanExpression -> booleanExpression AND booleanExpression
Rule 89    booleanExpression -> booleanExpression OR booleanExpression
Rule 90    booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS
Rule 91    booleanExpression -> variable
Rule 92    if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement
Rule 93    if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
Rule 94    while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
Rule 95    for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
Rule 96    for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
Rule 97    for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
Rule 98    increment -> ID INCREMENT
Rule 99    decrement -> ID DECREMENT
Rule 100   function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
Rule 101   function -> ID LPARENTHESIS parameters RPARENTHESIS
Rule 102   function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
Rule 103   typedef -> TYPEDEF ID ASSIGN_OPERATOR varType function LPARENTHESIS parameters RPARENTHESIS SEMICOLON
Rule 104   enum -> ENUM ID LBRACE enum_values RBRACE
Rule 105   enum_values -> enum_values COMMA ID
Rule 106   enum_values -> ID
Rule 107   try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
Rule 108   switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
Rule 109   cases -> cases case
Rule 110   cases -> case
Rule 111   case -> CASE variable COLON statements BREAK
Rule 112   case -> CASE variable COLON statements SEMICOLON
Rule 113   case -> CASE variable COLON statements
Rule 114   default_case -> DEFAULT COLON statements
Rule 115   parameters -> parameters COMMA parameter
Rule 116   parameters -> parameter
Rule 117   parameters -> empty
Rule 118   parameter -> varType ID
Rule 119   parameter -> variable
Rule 120   print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
Rule 121   input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
Rule 122   class_def -> CLASS ID LBRACE class_members RBRACE
Rule 123   class_members -> class_members class_member
Rule 124   class_members -> class_member
Rule 125   class_member -> varType ID SEMICOLON
Rule 126   class_member -> function
Rule 127   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 88
ARROW                : 102
ASSIGN_OPERATOR      : 28 33 46 47 103 121
BOOL                 : 63
BOOL_TYPE            : 52
BREAK                : 24 111
CASE                 : 111 112 113
CLASS                : 122
COLON                : 38 111 112 113 114
COMMA                : 30 33 35 105 115
CONST                : 58
CONTINUE             : 23
DECREMENT            : 99
DEFAULT              : 114
DIVIDE               : 72
DIVIDE_EQUALS        : 45
DOT                  : 76 121
DOUBLE               : 61 81
DOUBLE_TYPE          : 51
ELSE                 : 93
ENUM                 : 104
EQUALS               : 82
EXPORT               : 
FALSE                : 
FINAL                : 59
FINALLY              : 107
FOR                  : 95 96 97
GREATER_THAN         : 28 33 84
GREATER_THAN_OR_EQUALS : 86
ID                   : 25 26 27 28 33 42 43 44 45 47 65 75 76 76 77 97 97 98 99 101 103 104 105 106 118 121 122 125
IF                   : 92 93
IMPORT               : 39
IN                   : 97
INCREMENT            : 98
INT                  : 60 80
INT_TYPE             : 48
LATE                 : 
LBRACE               : 4 34 94 95 96 97 100 104 107 107 108 122
LBRACKET             : 29 75
LESS_THAN            : 28 33 85
LESS_THAN_OR_EQUALS  : 87
LIST_TYPE            : 28 53
LPARENTHESIS         : 78 90 92 93 94 95 96 97 100 101 102 103 108 120 121
MAP_TYPE             : 33 54
MINUS                : 69 79
MINUS_EQUALS         : 43
MODULE               : 73
NOT                  : 
NOT_EQUALS           : 83
NULL                 : 64
NULL_TYPE            : 
NUM_TYPE             : 50
OR                   : 89
PLUS                 : 68
PLUS_EQUALS          : 42
PRINT                : 120
RBRACE               : 4 34 94 95 96 97 100 104 107 107 108 122
RBRACKET             : 29 75
READ                 : 121
RETURN               : 40 41
RPARENTHESIS         : 78 90 92 93 94 95 96 97 100 101 102 103 108 120 121
SEMICOLON            : 5 6 7 8 9 10 22 23 24 39 95 95 96 96 102 103 112 120 121 125
SET_TYPE             : 55
STATIC               : 
STDIN                : 121
STRING               : 39 62
STRING_TYPE          : 49
SWITCH               : 108
TIMES                : 71
TIMES_EQUALS         : 44
TRUE                 : 
TRY                  : 107
TYPEDEF              : 103
VAR                  : 56
VOID                 : 57
WHILE                : 94
error                : 

Nonterminals, with rules where they appear

assignation          : 7 95 96
booleanExpression    : 88 88 89 89 90 92 93 94 95 96
case                 : 109 110
cases                : 108 109
class_def            : 17
class_member         : 123 124
class_members        : 122 123
declaration          : 6 46 100 102
declaration_modifier : 25 26
decrement            : 9 96
default_case         : 108
empty                : 21 32 37 117
enum                 : 18
enum_values          : 104 105
expression           : 5 42 43 44 45 67 68 69 75 78 102
factor               : 71 72 73 74 79
for                  : 14
function             : 11 66 103 126
if                   : 12
import               : 10
increment            : 8 95
input                : 16
list_elements        : 29 30
list_literal         : 28
map_elements         : 34 35
map_literal          : 33
map_pair             : 35 36
parameter            : 115 116
parameters           : 100 101 102 103 115
print                : 15
program              : 0
return               : 22
statement            : 2 3 92 93 93
statements           : 1 2 4 94 95 96 97 100 107 107 111 112 113 114
switch               : 20
term                 : 68 69 70 71 72 73
try                  : 19
typedef              : 
varType              : 25 27 28 33 33 97 103 118 125
variable             : 30 31 38 38 40 46 47 82 82 83 83 84 84 85 85 86 86 87 87 91 108 111 112 113 119 120
while                : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    $end            reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> statements .)
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    $end            reduce using rule 1 (program -> statements .)
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]
  ! $end            [ reduce using rule 127 (empty -> .) ]

    statement                      shift and go to state 56
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 3

    (3) statements -> statement .

    LBRACE          reduce using rule 3 (statements -> statement .)
    CONTINUE        reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    LIST_TYPE       reduce using rule 3 (statements -> statement .)
    MAP_TYPE        reduce using rule 3 (statements -> statement .)
    ID              reduce using rule 3 (statements -> statement .)
    IMPORT          reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    CLASS           reduce using rule 3 (statements -> statement .)
    ENUM            reduce using rule 3 (statements -> statement .)
    TRY             reduce using rule 3 (statements -> statement .)
    SWITCH          reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    CONST           reduce using rule 3 (statements -> statement .)
    FINAL           reduce using rule 3 (statements -> statement .)
    INT_TYPE        reduce using rule 3 (statements -> statement .)
    STRING_TYPE     reduce using rule 3 (statements -> statement .)
    NUM_TYPE        reduce using rule 3 (statements -> statement .)
    DOUBLE_TYPE     reduce using rule 3 (statements -> statement .)
    BOOL_TYPE       reduce using rule 3 (statements -> statement .)
    SET_TYPE        reduce using rule 3 (statements -> statement .)
    VAR             reduce using rule 3 (statements -> statement .)
    VOID            reduce using rule 3 (statements -> statement .)
    LPARENTHESIS    reduce using rule 3 (statements -> statement .)
    MINUS           reduce using rule 3 (statements -> statement .)
    INT             reduce using rule 3 (statements -> statement .)
    DOUBLE          reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RBRACE          reduce using rule 3 (statements -> statement .)
    SEMICOLON       reduce using rule 3 (statements -> statement .)
    DEFAULT         reduce using rule 3 (statements -> statement .)
    CASE            reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RBRACE          reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statements                     shift and go to state 57
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 5

    (5) statement -> expression . SEMICOLON
    (68) expression -> expression . PLUS term
    (69) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 6

    (6) statement -> declaration . SEMICOLON
    (46) assignation -> declaration . ASSIGN_OPERATOR variable
    (100) function -> declaration . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (102) function -> declaration . LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON

    SEMICOLON       shift and go to state 61
    ASSIGN_OPERATOR shift and go to state 62
    LPARENTHESIS    shift and go to state 63


state 7

    (7) statement -> assignation . SEMICOLON

    SEMICOLON       shift and go to state 64


state 8

    (8) statement -> increment . SEMICOLON

    SEMICOLON       shift and go to state 65


state 9

    (9) statement -> decrement . SEMICOLON

    SEMICOLON       shift and go to state 66


state 10

    (10) statement -> import . SEMICOLON

    SEMICOLON       shift and go to state 67


state 11

    (11) statement -> function .

    LBRACE          reduce using rule 11 (statement -> function .)
    CONTINUE        reduce using rule 11 (statement -> function .)
    BREAK           reduce using rule 11 (statement -> function .)
    LIST_TYPE       reduce using rule 11 (statement -> function .)
    MAP_TYPE        reduce using rule 11 (statement -> function .)
    ID              reduce using rule 11 (statement -> function .)
    IMPORT          reduce using rule 11 (statement -> function .)
    IF              reduce using rule 11 (statement -> function .)
    WHILE           reduce using rule 11 (statement -> function .)
    FOR             reduce using rule 11 (statement -> function .)
    PRINT           reduce using rule 11 (statement -> function .)
    CLASS           reduce using rule 11 (statement -> function .)
    ENUM            reduce using rule 11 (statement -> function .)
    TRY             reduce using rule 11 (statement -> function .)
    SWITCH          reduce using rule 11 (statement -> function .)
    RETURN          reduce using rule 11 (statement -> function .)
    CONST           reduce using rule 11 (statement -> function .)
    FINAL           reduce using rule 11 (statement -> function .)
    INT_TYPE        reduce using rule 11 (statement -> function .)
    STRING_TYPE     reduce using rule 11 (statement -> function .)
    NUM_TYPE        reduce using rule 11 (statement -> function .)
    DOUBLE_TYPE     reduce using rule 11 (statement -> function .)
    BOOL_TYPE       reduce using rule 11 (statement -> function .)
    SET_TYPE        reduce using rule 11 (statement -> function .)
    VAR             reduce using rule 11 (statement -> function .)
    VOID            reduce using rule 11 (statement -> function .)
    LPARENTHESIS    reduce using rule 11 (statement -> function .)
    MINUS           reduce using rule 11 (statement -> function .)
    INT             reduce using rule 11 (statement -> function .)
    DOUBLE          reduce using rule 11 (statement -> function .)
    $end            reduce using rule 11 (statement -> function .)
    RBRACE          reduce using rule 11 (statement -> function .)
    ELSE            reduce using rule 11 (statement -> function .)
    SEMICOLON       reduce using rule 11 (statement -> function .)
    DEFAULT         reduce using rule 11 (statement -> function .)
    CASE            reduce using rule 11 (statement -> function .)


state 12

    (12) statement -> if .

    LBRACE          reduce using rule 12 (statement -> if .)
    CONTINUE        reduce using rule 12 (statement -> if .)
    BREAK           reduce using rule 12 (statement -> if .)
    LIST_TYPE       reduce using rule 12 (statement -> if .)
    MAP_TYPE        reduce using rule 12 (statement -> if .)
    ID              reduce using rule 12 (statement -> if .)
    IMPORT          reduce using rule 12 (statement -> if .)
    IF              reduce using rule 12 (statement -> if .)
    WHILE           reduce using rule 12 (statement -> if .)
    FOR             reduce using rule 12 (statement -> if .)
    PRINT           reduce using rule 12 (statement -> if .)
    CLASS           reduce using rule 12 (statement -> if .)
    ENUM            reduce using rule 12 (statement -> if .)
    TRY             reduce using rule 12 (statement -> if .)
    SWITCH          reduce using rule 12 (statement -> if .)
    RETURN          reduce using rule 12 (statement -> if .)
    CONST           reduce using rule 12 (statement -> if .)
    FINAL           reduce using rule 12 (statement -> if .)
    INT_TYPE        reduce using rule 12 (statement -> if .)
    STRING_TYPE     reduce using rule 12 (statement -> if .)
    NUM_TYPE        reduce using rule 12 (statement -> if .)
    DOUBLE_TYPE     reduce using rule 12 (statement -> if .)
    BOOL_TYPE       reduce using rule 12 (statement -> if .)
    SET_TYPE        reduce using rule 12 (statement -> if .)
    VAR             reduce using rule 12 (statement -> if .)
    VOID            reduce using rule 12 (statement -> if .)
    LPARENTHESIS    reduce using rule 12 (statement -> if .)
    MINUS           reduce using rule 12 (statement -> if .)
    INT             reduce using rule 12 (statement -> if .)
    DOUBLE          reduce using rule 12 (statement -> if .)
    $end            reduce using rule 12 (statement -> if .)
    RBRACE          reduce using rule 12 (statement -> if .)
    ELSE            reduce using rule 12 (statement -> if .)
    SEMICOLON       reduce using rule 12 (statement -> if .)
    DEFAULT         reduce using rule 12 (statement -> if .)
    CASE            reduce using rule 12 (statement -> if .)


state 13

    (13) statement -> while .

    LBRACE          reduce using rule 13 (statement -> while .)
    CONTINUE        reduce using rule 13 (statement -> while .)
    BREAK           reduce using rule 13 (statement -> while .)
    LIST_TYPE       reduce using rule 13 (statement -> while .)
    MAP_TYPE        reduce using rule 13 (statement -> while .)
    ID              reduce using rule 13 (statement -> while .)
    IMPORT          reduce using rule 13 (statement -> while .)
    IF              reduce using rule 13 (statement -> while .)
    WHILE           reduce using rule 13 (statement -> while .)
    FOR             reduce using rule 13 (statement -> while .)
    PRINT           reduce using rule 13 (statement -> while .)
    CLASS           reduce using rule 13 (statement -> while .)
    ENUM            reduce using rule 13 (statement -> while .)
    TRY             reduce using rule 13 (statement -> while .)
    SWITCH          reduce using rule 13 (statement -> while .)
    RETURN          reduce using rule 13 (statement -> while .)
    CONST           reduce using rule 13 (statement -> while .)
    FINAL           reduce using rule 13 (statement -> while .)
    INT_TYPE        reduce using rule 13 (statement -> while .)
    STRING_TYPE     reduce using rule 13 (statement -> while .)
    NUM_TYPE        reduce using rule 13 (statement -> while .)
    DOUBLE_TYPE     reduce using rule 13 (statement -> while .)
    BOOL_TYPE       reduce using rule 13 (statement -> while .)
    SET_TYPE        reduce using rule 13 (statement -> while .)
    VAR             reduce using rule 13 (statement -> while .)
    VOID            reduce using rule 13 (statement -> while .)
    LPARENTHESIS    reduce using rule 13 (statement -> while .)
    MINUS           reduce using rule 13 (statement -> while .)
    INT             reduce using rule 13 (statement -> while .)
    DOUBLE          reduce using rule 13 (statement -> while .)
    $end            reduce using rule 13 (statement -> while .)
    RBRACE          reduce using rule 13 (statement -> while .)
    ELSE            reduce using rule 13 (statement -> while .)
    SEMICOLON       reduce using rule 13 (statement -> while .)
    DEFAULT         reduce using rule 13 (statement -> while .)
    CASE            reduce using rule 13 (statement -> while .)


state 14

    (14) statement -> for .

    LBRACE          reduce using rule 14 (statement -> for .)
    CONTINUE        reduce using rule 14 (statement -> for .)
    BREAK           reduce using rule 14 (statement -> for .)
    LIST_TYPE       reduce using rule 14 (statement -> for .)
    MAP_TYPE        reduce using rule 14 (statement -> for .)
    ID              reduce using rule 14 (statement -> for .)
    IMPORT          reduce using rule 14 (statement -> for .)
    IF              reduce using rule 14 (statement -> for .)
    WHILE           reduce using rule 14 (statement -> for .)
    FOR             reduce using rule 14 (statement -> for .)
    PRINT           reduce using rule 14 (statement -> for .)
    CLASS           reduce using rule 14 (statement -> for .)
    ENUM            reduce using rule 14 (statement -> for .)
    TRY             reduce using rule 14 (statement -> for .)
    SWITCH          reduce using rule 14 (statement -> for .)
    RETURN          reduce using rule 14 (statement -> for .)
    CONST           reduce using rule 14 (statement -> for .)
    FINAL           reduce using rule 14 (statement -> for .)
    INT_TYPE        reduce using rule 14 (statement -> for .)
    STRING_TYPE     reduce using rule 14 (statement -> for .)
    NUM_TYPE        reduce using rule 14 (statement -> for .)
    DOUBLE_TYPE     reduce using rule 14 (statement -> for .)
    BOOL_TYPE       reduce using rule 14 (statement -> for .)
    SET_TYPE        reduce using rule 14 (statement -> for .)
    VAR             reduce using rule 14 (statement -> for .)
    VOID            reduce using rule 14 (statement -> for .)
    LPARENTHESIS    reduce using rule 14 (statement -> for .)
    MINUS           reduce using rule 14 (statement -> for .)
    INT             reduce using rule 14 (statement -> for .)
    DOUBLE          reduce using rule 14 (statement -> for .)
    $end            reduce using rule 14 (statement -> for .)
    RBRACE          reduce using rule 14 (statement -> for .)
    ELSE            reduce using rule 14 (statement -> for .)
    SEMICOLON       reduce using rule 14 (statement -> for .)
    DEFAULT         reduce using rule 14 (statement -> for .)
    CASE            reduce using rule 14 (statement -> for .)


state 15

    (15) statement -> print .

    LBRACE          reduce using rule 15 (statement -> print .)
    CONTINUE        reduce using rule 15 (statement -> print .)
    BREAK           reduce using rule 15 (statement -> print .)
    LIST_TYPE       reduce using rule 15 (statement -> print .)
    MAP_TYPE        reduce using rule 15 (statement -> print .)
    ID              reduce using rule 15 (statement -> print .)
    IMPORT          reduce using rule 15 (statement -> print .)
    IF              reduce using rule 15 (statement -> print .)
    WHILE           reduce using rule 15 (statement -> print .)
    FOR             reduce using rule 15 (statement -> print .)
    PRINT           reduce using rule 15 (statement -> print .)
    CLASS           reduce using rule 15 (statement -> print .)
    ENUM            reduce using rule 15 (statement -> print .)
    TRY             reduce using rule 15 (statement -> print .)
    SWITCH          reduce using rule 15 (statement -> print .)
    RETURN          reduce using rule 15 (statement -> print .)
    CONST           reduce using rule 15 (statement -> print .)
    FINAL           reduce using rule 15 (statement -> print .)
    INT_TYPE        reduce using rule 15 (statement -> print .)
    STRING_TYPE     reduce using rule 15 (statement -> print .)
    NUM_TYPE        reduce using rule 15 (statement -> print .)
    DOUBLE_TYPE     reduce using rule 15 (statement -> print .)
    BOOL_TYPE       reduce using rule 15 (statement -> print .)
    SET_TYPE        reduce using rule 15 (statement -> print .)
    VAR             reduce using rule 15 (statement -> print .)
    VOID            reduce using rule 15 (statement -> print .)
    LPARENTHESIS    reduce using rule 15 (statement -> print .)
    MINUS           reduce using rule 15 (statement -> print .)
    INT             reduce using rule 15 (statement -> print .)
    DOUBLE          reduce using rule 15 (statement -> print .)
    $end            reduce using rule 15 (statement -> print .)
    RBRACE          reduce using rule 15 (statement -> print .)
    ELSE            reduce using rule 15 (statement -> print .)
    SEMICOLON       reduce using rule 15 (statement -> print .)
    DEFAULT         reduce using rule 15 (statement -> print .)
    CASE            reduce using rule 15 (statement -> print .)


state 16

    (16) statement -> input .

    LBRACE          reduce using rule 16 (statement -> input .)
    CONTINUE        reduce using rule 16 (statement -> input .)
    BREAK           reduce using rule 16 (statement -> input .)
    LIST_TYPE       reduce using rule 16 (statement -> input .)
    MAP_TYPE        reduce using rule 16 (statement -> input .)
    ID              reduce using rule 16 (statement -> input .)
    IMPORT          reduce using rule 16 (statement -> input .)
    IF              reduce using rule 16 (statement -> input .)
    WHILE           reduce using rule 16 (statement -> input .)
    FOR             reduce using rule 16 (statement -> input .)
    PRINT           reduce using rule 16 (statement -> input .)
    CLASS           reduce using rule 16 (statement -> input .)
    ENUM            reduce using rule 16 (statement -> input .)
    TRY             reduce using rule 16 (statement -> input .)
    SWITCH          reduce using rule 16 (statement -> input .)
    RETURN          reduce using rule 16 (statement -> input .)
    CONST           reduce using rule 16 (statement -> input .)
    FINAL           reduce using rule 16 (statement -> input .)
    INT_TYPE        reduce using rule 16 (statement -> input .)
    STRING_TYPE     reduce using rule 16 (statement -> input .)
    NUM_TYPE        reduce using rule 16 (statement -> input .)
    DOUBLE_TYPE     reduce using rule 16 (statement -> input .)
    BOOL_TYPE       reduce using rule 16 (statement -> input .)
    SET_TYPE        reduce using rule 16 (statement -> input .)
    VAR             reduce using rule 16 (statement -> input .)
    VOID            reduce using rule 16 (statement -> input .)
    LPARENTHESIS    reduce using rule 16 (statement -> input .)
    MINUS           reduce using rule 16 (statement -> input .)
    INT             reduce using rule 16 (statement -> input .)
    DOUBLE          reduce using rule 16 (statement -> input .)
    $end            reduce using rule 16 (statement -> input .)
    RBRACE          reduce using rule 16 (statement -> input .)
    ELSE            reduce using rule 16 (statement -> input .)
    SEMICOLON       reduce using rule 16 (statement -> input .)
    DEFAULT         reduce using rule 16 (statement -> input .)
    CASE            reduce using rule 16 (statement -> input .)


state 17

    (17) statement -> class_def .

    LBRACE          reduce using rule 17 (statement -> class_def .)
    CONTINUE        reduce using rule 17 (statement -> class_def .)
    BREAK           reduce using rule 17 (statement -> class_def .)
    LIST_TYPE       reduce using rule 17 (statement -> class_def .)
    MAP_TYPE        reduce using rule 17 (statement -> class_def .)
    ID              reduce using rule 17 (statement -> class_def .)
    IMPORT          reduce using rule 17 (statement -> class_def .)
    IF              reduce using rule 17 (statement -> class_def .)
    WHILE           reduce using rule 17 (statement -> class_def .)
    FOR             reduce using rule 17 (statement -> class_def .)
    PRINT           reduce using rule 17 (statement -> class_def .)
    CLASS           reduce using rule 17 (statement -> class_def .)
    ENUM            reduce using rule 17 (statement -> class_def .)
    TRY             reduce using rule 17 (statement -> class_def .)
    SWITCH          reduce using rule 17 (statement -> class_def .)
    RETURN          reduce using rule 17 (statement -> class_def .)
    CONST           reduce using rule 17 (statement -> class_def .)
    FINAL           reduce using rule 17 (statement -> class_def .)
    INT_TYPE        reduce using rule 17 (statement -> class_def .)
    STRING_TYPE     reduce using rule 17 (statement -> class_def .)
    NUM_TYPE        reduce using rule 17 (statement -> class_def .)
    DOUBLE_TYPE     reduce using rule 17 (statement -> class_def .)
    BOOL_TYPE       reduce using rule 17 (statement -> class_def .)
    SET_TYPE        reduce using rule 17 (statement -> class_def .)
    VAR             reduce using rule 17 (statement -> class_def .)
    VOID            reduce using rule 17 (statement -> class_def .)
    LPARENTHESIS    reduce using rule 17 (statement -> class_def .)
    MINUS           reduce using rule 17 (statement -> class_def .)
    INT             reduce using rule 17 (statement -> class_def .)
    DOUBLE          reduce using rule 17 (statement -> class_def .)
    $end            reduce using rule 17 (statement -> class_def .)
    RBRACE          reduce using rule 17 (statement -> class_def .)
    ELSE            reduce using rule 17 (statement -> class_def .)
    SEMICOLON       reduce using rule 17 (statement -> class_def .)
    DEFAULT         reduce using rule 17 (statement -> class_def .)
    CASE            reduce using rule 17 (statement -> class_def .)


state 18

    (18) statement -> enum .

    LBRACE          reduce using rule 18 (statement -> enum .)
    CONTINUE        reduce using rule 18 (statement -> enum .)
    BREAK           reduce using rule 18 (statement -> enum .)
    LIST_TYPE       reduce using rule 18 (statement -> enum .)
    MAP_TYPE        reduce using rule 18 (statement -> enum .)
    ID              reduce using rule 18 (statement -> enum .)
    IMPORT          reduce using rule 18 (statement -> enum .)
    IF              reduce using rule 18 (statement -> enum .)
    WHILE           reduce using rule 18 (statement -> enum .)
    FOR             reduce using rule 18 (statement -> enum .)
    PRINT           reduce using rule 18 (statement -> enum .)
    CLASS           reduce using rule 18 (statement -> enum .)
    ENUM            reduce using rule 18 (statement -> enum .)
    TRY             reduce using rule 18 (statement -> enum .)
    SWITCH          reduce using rule 18 (statement -> enum .)
    RETURN          reduce using rule 18 (statement -> enum .)
    CONST           reduce using rule 18 (statement -> enum .)
    FINAL           reduce using rule 18 (statement -> enum .)
    INT_TYPE        reduce using rule 18 (statement -> enum .)
    STRING_TYPE     reduce using rule 18 (statement -> enum .)
    NUM_TYPE        reduce using rule 18 (statement -> enum .)
    DOUBLE_TYPE     reduce using rule 18 (statement -> enum .)
    BOOL_TYPE       reduce using rule 18 (statement -> enum .)
    SET_TYPE        reduce using rule 18 (statement -> enum .)
    VAR             reduce using rule 18 (statement -> enum .)
    VOID            reduce using rule 18 (statement -> enum .)
    LPARENTHESIS    reduce using rule 18 (statement -> enum .)
    MINUS           reduce using rule 18 (statement -> enum .)
    INT             reduce using rule 18 (statement -> enum .)
    DOUBLE          reduce using rule 18 (statement -> enum .)
    $end            reduce using rule 18 (statement -> enum .)
    RBRACE          reduce using rule 18 (statement -> enum .)
    ELSE            reduce using rule 18 (statement -> enum .)
    SEMICOLON       reduce using rule 18 (statement -> enum .)
    DEFAULT         reduce using rule 18 (statement -> enum .)
    CASE            reduce using rule 18 (statement -> enum .)


state 19

    (19) statement -> try .

    LBRACE          reduce using rule 19 (statement -> try .)
    CONTINUE        reduce using rule 19 (statement -> try .)
    BREAK           reduce using rule 19 (statement -> try .)
    LIST_TYPE       reduce using rule 19 (statement -> try .)
    MAP_TYPE        reduce using rule 19 (statement -> try .)
    ID              reduce using rule 19 (statement -> try .)
    IMPORT          reduce using rule 19 (statement -> try .)
    IF              reduce using rule 19 (statement -> try .)
    WHILE           reduce using rule 19 (statement -> try .)
    FOR             reduce using rule 19 (statement -> try .)
    PRINT           reduce using rule 19 (statement -> try .)
    CLASS           reduce using rule 19 (statement -> try .)
    ENUM            reduce using rule 19 (statement -> try .)
    TRY             reduce using rule 19 (statement -> try .)
    SWITCH          reduce using rule 19 (statement -> try .)
    RETURN          reduce using rule 19 (statement -> try .)
    CONST           reduce using rule 19 (statement -> try .)
    FINAL           reduce using rule 19 (statement -> try .)
    INT_TYPE        reduce using rule 19 (statement -> try .)
    STRING_TYPE     reduce using rule 19 (statement -> try .)
    NUM_TYPE        reduce using rule 19 (statement -> try .)
    DOUBLE_TYPE     reduce using rule 19 (statement -> try .)
    BOOL_TYPE       reduce using rule 19 (statement -> try .)
    SET_TYPE        reduce using rule 19 (statement -> try .)
    VAR             reduce using rule 19 (statement -> try .)
    VOID            reduce using rule 19 (statement -> try .)
    LPARENTHESIS    reduce using rule 19 (statement -> try .)
    MINUS           reduce using rule 19 (statement -> try .)
    INT             reduce using rule 19 (statement -> try .)
    DOUBLE          reduce using rule 19 (statement -> try .)
    $end            reduce using rule 19 (statement -> try .)
    RBRACE          reduce using rule 19 (statement -> try .)
    ELSE            reduce using rule 19 (statement -> try .)
    SEMICOLON       reduce using rule 19 (statement -> try .)
    DEFAULT         reduce using rule 19 (statement -> try .)
    CASE            reduce using rule 19 (statement -> try .)


state 20

    (20) statement -> switch .

    LBRACE          reduce using rule 20 (statement -> switch .)
    CONTINUE        reduce using rule 20 (statement -> switch .)
    BREAK           reduce using rule 20 (statement -> switch .)
    LIST_TYPE       reduce using rule 20 (statement -> switch .)
    MAP_TYPE        reduce using rule 20 (statement -> switch .)
    ID              reduce using rule 20 (statement -> switch .)
    IMPORT          reduce using rule 20 (statement -> switch .)
    IF              reduce using rule 20 (statement -> switch .)
    WHILE           reduce using rule 20 (statement -> switch .)
    FOR             reduce using rule 20 (statement -> switch .)
    PRINT           reduce using rule 20 (statement -> switch .)
    CLASS           reduce using rule 20 (statement -> switch .)
    ENUM            reduce using rule 20 (statement -> switch .)
    TRY             reduce using rule 20 (statement -> switch .)
    SWITCH          reduce using rule 20 (statement -> switch .)
    RETURN          reduce using rule 20 (statement -> switch .)
    CONST           reduce using rule 20 (statement -> switch .)
    FINAL           reduce using rule 20 (statement -> switch .)
    INT_TYPE        reduce using rule 20 (statement -> switch .)
    STRING_TYPE     reduce using rule 20 (statement -> switch .)
    NUM_TYPE        reduce using rule 20 (statement -> switch .)
    DOUBLE_TYPE     reduce using rule 20 (statement -> switch .)
    BOOL_TYPE       reduce using rule 20 (statement -> switch .)
    SET_TYPE        reduce using rule 20 (statement -> switch .)
    VAR             reduce using rule 20 (statement -> switch .)
    VOID            reduce using rule 20 (statement -> switch .)
    LPARENTHESIS    reduce using rule 20 (statement -> switch .)
    MINUS           reduce using rule 20 (statement -> switch .)
    INT             reduce using rule 20 (statement -> switch .)
    DOUBLE          reduce using rule 20 (statement -> switch .)
    $end            reduce using rule 20 (statement -> switch .)
    RBRACE          reduce using rule 20 (statement -> switch .)
    ELSE            reduce using rule 20 (statement -> switch .)
    SEMICOLON       reduce using rule 20 (statement -> switch .)
    DEFAULT         reduce using rule 20 (statement -> switch .)
    CASE            reduce using rule 20 (statement -> switch .)


state 21

    (21) statement -> empty .

    LBRACE          reduce using rule 21 (statement -> empty .)
    CONTINUE        reduce using rule 21 (statement -> empty .)
    BREAK           reduce using rule 21 (statement -> empty .)
    LIST_TYPE       reduce using rule 21 (statement -> empty .)
    MAP_TYPE        reduce using rule 21 (statement -> empty .)
    ID              reduce using rule 21 (statement -> empty .)
    IMPORT          reduce using rule 21 (statement -> empty .)
    IF              reduce using rule 21 (statement -> empty .)
    WHILE           reduce using rule 21 (statement -> empty .)
    FOR             reduce using rule 21 (statement -> empty .)
    PRINT           reduce using rule 21 (statement -> empty .)
    CLASS           reduce using rule 21 (statement -> empty .)
    ENUM            reduce using rule 21 (statement -> empty .)
    TRY             reduce using rule 21 (statement -> empty .)
    SWITCH          reduce using rule 21 (statement -> empty .)
    RETURN          reduce using rule 21 (statement -> empty .)
    CONST           reduce using rule 21 (statement -> empty .)
    FINAL           reduce using rule 21 (statement -> empty .)
    INT_TYPE        reduce using rule 21 (statement -> empty .)
    STRING_TYPE     reduce using rule 21 (statement -> empty .)
    NUM_TYPE        reduce using rule 21 (statement -> empty .)
    DOUBLE_TYPE     reduce using rule 21 (statement -> empty .)
    BOOL_TYPE       reduce using rule 21 (statement -> empty .)
    SET_TYPE        reduce using rule 21 (statement -> empty .)
    VAR             reduce using rule 21 (statement -> empty .)
    VOID            reduce using rule 21 (statement -> empty .)
    LPARENTHESIS    reduce using rule 21 (statement -> empty .)
    MINUS           reduce using rule 21 (statement -> empty .)
    INT             reduce using rule 21 (statement -> empty .)
    DOUBLE          reduce using rule 21 (statement -> empty .)
    $end            reduce using rule 21 (statement -> empty .)
    RBRACE          reduce using rule 21 (statement -> empty .)
    ELSE            reduce using rule 21 (statement -> empty .)
    SEMICOLON       reduce using rule 21 (statement -> empty .)
    DEFAULT         reduce using rule 21 (statement -> empty .)
    CASE            reduce using rule 21 (statement -> empty .)


state 22

    (22) statement -> return . SEMICOLON

    SEMICOLON       shift and go to state 68


state 23

    (23) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 69


state 24

    (24) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 70


state 25

    (70) expression -> term .
    (71) term -> term . TIMES factor
    (72) term -> term . DIVIDE factor
    (73) term -> term . MODULE factor

    SEMICOLON       reduce using rule 70 (expression -> term .)
    PLUS            reduce using rule 70 (expression -> term .)
    MINUS           reduce using rule 70 (expression -> term .)
    RPARENTHESIS    reduce using rule 70 (expression -> term .)
    COMMA           reduce using rule 70 (expression -> term .)
    RBRACKET        reduce using rule 70 (expression -> term .)
    EQUALS          reduce using rule 70 (expression -> term .)
    NOT_EQUALS      reduce using rule 70 (expression -> term .)
    GREATER_THAN    reduce using rule 70 (expression -> term .)
    LESS_THAN       reduce using rule 70 (expression -> term .)
    GREATER_THAN_OR_EQUALS reduce using rule 70 (expression -> term .)
    LESS_THAN_OR_EQUALS reduce using rule 70 (expression -> term .)
    AND             reduce using rule 70 (expression -> term .)
    OR              reduce using rule 70 (expression -> term .)
    COLON           reduce using rule 70 (expression -> term .)
    RBRACE          reduce using rule 70 (expression -> term .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73


state 26

    (79) factor -> MINUS . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    factor                         shift and go to state 74

state 27

    (25) declaration -> declaration_modifier . varType ID
    (26) declaration -> declaration_modifier . ID
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID

    ID              shift and go to state 77
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    LIST_TYPE       shift and go to state 78
    MAP_TYPE        shift and go to state 79
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53

    varType                        shift and go to state 76

state 28

    (27) declaration -> varType . ID

    ID              shift and go to state 80


state 29

    (42) assignation -> ID . PLUS_EQUALS expression
    (43) assignation -> ID . MINUS_EQUALS expression
    (44) assignation -> ID . TIMES_EQUALS expression
    (45) assignation -> ID . DIVIDE_EQUALS expression
    (47) assignation -> ID . ASSIGN_OPERATOR variable
    (98) increment -> ID . INCREMENT
    (99) decrement -> ID . DECREMENT
    (101) function -> ID . LPARENTHESIS parameters RPARENTHESIS
    (121) input -> ID . ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (75) factor -> ID . LBRACKET expression RBRACKET
    (76) factor -> ID . DOT ID
    (77) factor -> ID .

    PLUS_EQUALS     shift and go to state 81
    MINUS_EQUALS    shift and go to state 82
    TIMES_EQUALS    shift and go to state 83
    DIVIDE_EQUALS   shift and go to state 84
    ASSIGN_OPERATOR shift and go to state 85
    INCREMENT       shift and go to state 86
    DECREMENT       shift and go to state 87
    LPARENTHESIS    shift and go to state 88
    LBRACKET        shift and go to state 90
    DOT             shift and go to state 89
    TIMES           reduce using rule 77 (factor -> ID .)
    DIVIDE          reduce using rule 77 (factor -> ID .)
    MODULE          reduce using rule 77 (factor -> ID .)
    SEMICOLON       reduce using rule 77 (factor -> ID .)
    PLUS            reduce using rule 77 (factor -> ID .)
    MINUS           reduce using rule 77 (factor -> ID .)


state 30

    (28) declaration -> LIST_TYPE . LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (53) varType -> LIST_TYPE .

    LESS_THAN       shift and go to state 91
    ID              reduce using rule 53 (varType -> LIST_TYPE .)


state 31

    (33) declaration -> MAP_TYPE . LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (54) varType -> MAP_TYPE .

    LESS_THAN       shift and go to state 92
    ID              reduce using rule 54 (varType -> MAP_TYPE .)


state 32

    (39) import -> IMPORT . STRING SEMICOLON

    STRING          shift and go to state 93


state 33

    (78) factor -> LPARENTHESIS . expression RPARENTHESIS
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    expression                     shift and go to state 94
    term                           shift and go to state 25
    factor                         shift and go to state 43

state 34

    (92) if -> IF . LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> IF . LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement

    LPARENTHESIS    shift and go to state 95


state 35

    (94) while -> WHILE . LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE

    LPARENTHESIS    shift and go to state 96


state 36

    (95) for -> FOR . LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> FOR . LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> FOR . LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE

    LPARENTHESIS    shift and go to state 97


state 37

    (120) print -> PRINT . LPARENTHESIS variable RPARENTHESIS SEMICOLON

    LPARENTHESIS    shift and go to state 98


state 38

    (122) class_def -> CLASS . ID LBRACE class_members RBRACE

    ID              shift and go to state 99


state 39

    (104) enum -> ENUM . ID LBRACE enum_values RBRACE

    ID              shift and go to state 100


state 40

    (107) try -> TRY . LBRACE statements RBRACE FINALLY LBRACE statements RBRACE

    LBRACE          shift and go to state 101


state 41

    (108) switch -> SWITCH . LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE

    LPARENTHESIS    shift and go to state 102


state 42

    (40) return -> RETURN . variable
    (41) return -> RETURN .
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    SEMICOLON       reduce using rule 41 (return -> RETURN .)
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 103
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 43

    (74) term -> factor .

    TIMES           reduce using rule 74 (term -> factor .)
    DIVIDE          reduce using rule 74 (term -> factor .)
    MODULE          reduce using rule 74 (term -> factor .)
    SEMICOLON       reduce using rule 74 (term -> factor .)
    PLUS            reduce using rule 74 (term -> factor .)
    MINUS           reduce using rule 74 (term -> factor .)
    RPARENTHESIS    reduce using rule 74 (term -> factor .)
    COMMA           reduce using rule 74 (term -> factor .)
    RBRACKET        reduce using rule 74 (term -> factor .)
    EQUALS          reduce using rule 74 (term -> factor .)
    NOT_EQUALS      reduce using rule 74 (term -> factor .)
    GREATER_THAN    reduce using rule 74 (term -> factor .)
    LESS_THAN       reduce using rule 74 (term -> factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 74 (term -> factor .)
    LESS_THAN_OR_EQUALS reduce using rule 74 (term -> factor .)
    AND             reduce using rule 74 (term -> factor .)
    OR              reduce using rule 74 (term -> factor .)
    COLON           reduce using rule 74 (term -> factor .)
    RBRACE          reduce using rule 74 (term -> factor .)


state 44

    (58) declaration_modifier -> CONST .

    ID              reduce using rule 58 (declaration_modifier -> CONST .)
    INT_TYPE        reduce using rule 58 (declaration_modifier -> CONST .)
    STRING_TYPE     reduce using rule 58 (declaration_modifier -> CONST .)
    NUM_TYPE        reduce using rule 58 (declaration_modifier -> CONST .)
    DOUBLE_TYPE     reduce using rule 58 (declaration_modifier -> CONST .)
    BOOL_TYPE       reduce using rule 58 (declaration_modifier -> CONST .)
    LIST_TYPE       reduce using rule 58 (declaration_modifier -> CONST .)
    MAP_TYPE        reduce using rule 58 (declaration_modifier -> CONST .)
    SET_TYPE        reduce using rule 58 (declaration_modifier -> CONST .)
    VAR             reduce using rule 58 (declaration_modifier -> CONST .)
    VOID            reduce using rule 58 (declaration_modifier -> CONST .)


state 45

    (59) declaration_modifier -> FINAL .

    ID              reduce using rule 59 (declaration_modifier -> FINAL .)
    INT_TYPE        reduce using rule 59 (declaration_modifier -> FINAL .)
    STRING_TYPE     reduce using rule 59 (declaration_modifier -> FINAL .)
    NUM_TYPE        reduce using rule 59 (declaration_modifier -> FINAL .)
    DOUBLE_TYPE     reduce using rule 59 (declaration_modifier -> FINAL .)
    BOOL_TYPE       reduce using rule 59 (declaration_modifier -> FINAL .)
    LIST_TYPE       reduce using rule 59 (declaration_modifier -> FINAL .)
    MAP_TYPE        reduce using rule 59 (declaration_modifier -> FINAL .)
    SET_TYPE        reduce using rule 59 (declaration_modifier -> FINAL .)
    VAR             reduce using rule 59 (declaration_modifier -> FINAL .)
    VOID            reduce using rule 59 (declaration_modifier -> FINAL .)


state 46

    (48) varType -> INT_TYPE .

    ID              reduce using rule 48 (varType -> INT_TYPE .)
    GREATER_THAN    reduce using rule 48 (varType -> INT_TYPE .)
    COMMA           reduce using rule 48 (varType -> INT_TYPE .)


state 47

    (49) varType -> STRING_TYPE .

    ID              reduce using rule 49 (varType -> STRING_TYPE .)
    GREATER_THAN    reduce using rule 49 (varType -> STRING_TYPE .)
    COMMA           reduce using rule 49 (varType -> STRING_TYPE .)


state 48

    (50) varType -> NUM_TYPE .

    ID              reduce using rule 50 (varType -> NUM_TYPE .)
    GREATER_THAN    reduce using rule 50 (varType -> NUM_TYPE .)
    COMMA           reduce using rule 50 (varType -> NUM_TYPE .)


state 49

    (51) varType -> DOUBLE_TYPE .

    ID              reduce using rule 51 (varType -> DOUBLE_TYPE .)
    GREATER_THAN    reduce using rule 51 (varType -> DOUBLE_TYPE .)
    COMMA           reduce using rule 51 (varType -> DOUBLE_TYPE .)


state 50

    (52) varType -> BOOL_TYPE .

    ID              reduce using rule 52 (varType -> BOOL_TYPE .)
    GREATER_THAN    reduce using rule 52 (varType -> BOOL_TYPE .)
    COMMA           reduce using rule 52 (varType -> BOOL_TYPE .)


state 51

    (55) varType -> SET_TYPE .

    ID              reduce using rule 55 (varType -> SET_TYPE .)
    GREATER_THAN    reduce using rule 55 (varType -> SET_TYPE .)
    COMMA           reduce using rule 55 (varType -> SET_TYPE .)


state 52

    (56) varType -> VAR .

    ID              reduce using rule 56 (varType -> VAR .)
    GREATER_THAN    reduce using rule 56 (varType -> VAR .)
    COMMA           reduce using rule 56 (varType -> VAR .)


state 53

    (57) varType -> VOID .

    ID              reduce using rule 57 (varType -> VOID .)
    GREATER_THAN    reduce using rule 57 (varType -> VOID .)
    COMMA           reduce using rule 57 (varType -> VOID .)


state 54

    (80) factor -> INT .

    TIMES           reduce using rule 80 (factor -> INT .)
    DIVIDE          reduce using rule 80 (factor -> INT .)
    MODULE          reduce using rule 80 (factor -> INT .)
    SEMICOLON       reduce using rule 80 (factor -> INT .)
    PLUS            reduce using rule 80 (factor -> INT .)
    MINUS           reduce using rule 80 (factor -> INT .)
    RPARENTHESIS    reduce using rule 80 (factor -> INT .)
    COMMA           reduce using rule 80 (factor -> INT .)
    RBRACKET        reduce using rule 80 (factor -> INT .)
    EQUALS          reduce using rule 80 (factor -> INT .)
    NOT_EQUALS      reduce using rule 80 (factor -> INT .)
    GREATER_THAN    reduce using rule 80 (factor -> INT .)
    LESS_THAN       reduce using rule 80 (factor -> INT .)
    GREATER_THAN_OR_EQUALS reduce using rule 80 (factor -> INT .)
    LESS_THAN_OR_EQUALS reduce using rule 80 (factor -> INT .)
    AND             reduce using rule 80 (factor -> INT .)
    OR              reduce using rule 80 (factor -> INT .)
    COLON           reduce using rule 80 (factor -> INT .)
    RBRACE          reduce using rule 80 (factor -> INT .)


state 55

    (81) factor -> DOUBLE .

    TIMES           reduce using rule 81 (factor -> DOUBLE .)
    DIVIDE          reduce using rule 81 (factor -> DOUBLE .)
    MODULE          reduce using rule 81 (factor -> DOUBLE .)
    SEMICOLON       reduce using rule 81 (factor -> DOUBLE .)
    PLUS            reduce using rule 81 (factor -> DOUBLE .)
    MINUS           reduce using rule 81 (factor -> DOUBLE .)
    RPARENTHESIS    reduce using rule 81 (factor -> DOUBLE .)
    COMMA           reduce using rule 81 (factor -> DOUBLE .)
    RBRACKET        reduce using rule 81 (factor -> DOUBLE .)
    EQUALS          reduce using rule 81 (factor -> DOUBLE .)
    NOT_EQUALS      reduce using rule 81 (factor -> DOUBLE .)
    GREATER_THAN    reduce using rule 81 (factor -> DOUBLE .)
    LESS_THAN       reduce using rule 81 (factor -> DOUBLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 81 (factor -> DOUBLE .)
    LESS_THAN_OR_EQUALS reduce using rule 81 (factor -> DOUBLE .)
    AND             reduce using rule 81 (factor -> DOUBLE .)
    OR              reduce using rule 81 (factor -> DOUBLE .)
    COLON           reduce using rule 81 (factor -> DOUBLE .)
    RBRACE          reduce using rule 81 (factor -> DOUBLE .)


state 56

    (2) statements -> statements statement .

    LBRACE          reduce using rule 2 (statements -> statements statement .)
    CONTINUE        reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)
    LIST_TYPE       reduce using rule 2 (statements -> statements statement .)
    MAP_TYPE        reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    IMPORT          reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    CLASS           reduce using rule 2 (statements -> statements statement .)
    ENUM            reduce using rule 2 (statements -> statements statement .)
    TRY             reduce using rule 2 (statements -> statements statement .)
    SWITCH          reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    CONST           reduce using rule 2 (statements -> statements statement .)
    FINAL           reduce using rule 2 (statements -> statements statement .)
    INT_TYPE        reduce using rule 2 (statements -> statements statement .)
    STRING_TYPE     reduce using rule 2 (statements -> statements statement .)
    NUM_TYPE        reduce using rule 2 (statements -> statements statement .)
    DOUBLE_TYPE     reduce using rule 2 (statements -> statements statement .)
    BOOL_TYPE       reduce using rule 2 (statements -> statements statement .)
    SET_TYPE        reduce using rule 2 (statements -> statements statement .)
    VAR             reduce using rule 2 (statements -> statements statement .)
    VOID            reduce using rule 2 (statements -> statements statement .)
    LPARENTHESIS    reduce using rule 2 (statements -> statements statement .)
    MINUS           reduce using rule 2 (statements -> statements statement .)
    INT             reduce using rule 2 (statements -> statements statement .)
    DOUBLE          reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    RBRACE          reduce using rule 2 (statements -> statements statement .)
    SEMICOLON       reduce using rule 2 (statements -> statements statement .)
    DEFAULT         reduce using rule 2 (statements -> statements statement .)
    CASE            reduce using rule 2 (statements -> statements statement .)


state 57

    (4) statement -> LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 113
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! RBRACE          [ reduce using rule 127 (empty -> .) ]
  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statement                      shift and go to state 56
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 58

    (5) statement -> expression SEMICOLON .

    LBRACE          reduce using rule 5 (statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 5 (statement -> expression SEMICOLON .)
    BREAK           reduce using rule 5 (statement -> expression SEMICOLON .)
    LIST_TYPE       reduce using rule 5 (statement -> expression SEMICOLON .)
    MAP_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    ID              reduce using rule 5 (statement -> expression SEMICOLON .)
    IMPORT          reduce using rule 5 (statement -> expression SEMICOLON .)
    IF              reduce using rule 5 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> expression SEMICOLON .)
    FOR             reduce using rule 5 (statement -> expression SEMICOLON .)
    PRINT           reduce using rule 5 (statement -> expression SEMICOLON .)
    CLASS           reduce using rule 5 (statement -> expression SEMICOLON .)
    ENUM            reduce using rule 5 (statement -> expression SEMICOLON .)
    TRY             reduce using rule 5 (statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 5 (statement -> expression SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 5 (statement -> expression SEMICOLON .)
    FINAL           reduce using rule 5 (statement -> expression SEMICOLON .)
    INT_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    STRING_TYPE     reduce using rule 5 (statement -> expression SEMICOLON .)
    NUM_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 5 (statement -> expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 5 (statement -> expression SEMICOLON .)
    SET_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 5 (statement -> expression SEMICOLON .)
    VOID            reduce using rule 5 (statement -> expression SEMICOLON .)
    LPARENTHESIS    reduce using rule 5 (statement -> expression SEMICOLON .)
    MINUS           reduce using rule 5 (statement -> expression SEMICOLON .)
    INT             reduce using rule 5 (statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 5 (statement -> expression SEMICOLON .)
    $end            reduce using rule 5 (statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 5 (statement -> expression SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 5 (statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 5 (statement -> expression SEMICOLON .)
    CASE            reduce using rule 5 (statement -> expression SEMICOLON .)


state 59

    (68) expression -> expression PLUS . term
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    term                           shift and go to state 114
    factor                         shift and go to state 43

state 60

    (69) expression -> expression MINUS . term
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    term                           shift and go to state 115
    factor                         shift and go to state 43

state 61

    (6) statement -> declaration SEMICOLON .

    LBRACE          reduce using rule 6 (statement -> declaration SEMICOLON .)
    CONTINUE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    BREAK           reduce using rule 6 (statement -> declaration SEMICOLON .)
    LIST_TYPE       reduce using rule 6 (statement -> declaration SEMICOLON .)
    MAP_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    ID              reduce using rule 6 (statement -> declaration SEMICOLON .)
    IMPORT          reduce using rule 6 (statement -> declaration SEMICOLON .)
    IF              reduce using rule 6 (statement -> declaration SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> declaration SEMICOLON .)
    FOR             reduce using rule 6 (statement -> declaration SEMICOLON .)
    PRINT           reduce using rule 6 (statement -> declaration SEMICOLON .)
    CLASS           reduce using rule 6 (statement -> declaration SEMICOLON .)
    ENUM            reduce using rule 6 (statement -> declaration SEMICOLON .)
    TRY             reduce using rule 6 (statement -> declaration SEMICOLON .)
    SWITCH          reduce using rule 6 (statement -> declaration SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> declaration SEMICOLON .)
    CONST           reduce using rule 6 (statement -> declaration SEMICOLON .)
    FINAL           reduce using rule 6 (statement -> declaration SEMICOLON .)
    INT_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    STRING_TYPE     reduce using rule 6 (statement -> declaration SEMICOLON .)
    NUM_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 6 (statement -> declaration SEMICOLON .)
    BOOL_TYPE       reduce using rule 6 (statement -> declaration SEMICOLON .)
    SET_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    VAR             reduce using rule 6 (statement -> declaration SEMICOLON .)
    VOID            reduce using rule 6 (statement -> declaration SEMICOLON .)
    LPARENTHESIS    reduce using rule 6 (statement -> declaration SEMICOLON .)
    MINUS           reduce using rule 6 (statement -> declaration SEMICOLON .)
    INT             reduce using rule 6 (statement -> declaration SEMICOLON .)
    DOUBLE          reduce using rule 6 (statement -> declaration SEMICOLON .)
    $end            reduce using rule 6 (statement -> declaration SEMICOLON .)
    RBRACE          reduce using rule 6 (statement -> declaration SEMICOLON .)
    ELSE            reduce using rule 6 (statement -> declaration SEMICOLON .)
    SEMICOLON       reduce using rule 6 (statement -> declaration SEMICOLON .)
    DEFAULT         reduce using rule 6 (statement -> declaration SEMICOLON .)
    CASE            reduce using rule 6 (statement -> declaration SEMICOLON .)


state 62

    (46) assignation -> declaration ASSIGN_OPERATOR . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    declaration                    shift and go to state 112
    variable                       shift and go to state 116
    function                       shift and go to state 110
    expression                     shift and go to state 111
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 63

    (100) function -> declaration LPARENTHESIS . parameters RPARENTHESIS LBRACE statements RBRACE
    (102) function -> declaration LPARENTHESIS . parameters RPARENTHESIS ARROW expression SEMICOLON
    (115) parameters -> . parameters COMMA parameter
    (116) parameters -> . parameter
    (117) parameters -> . empty
    (118) parameter -> . varType ID
    (119) parameter -> . variable
    (127) empty -> .
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    RPARENTHESIS    reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    LIST_TYPE       shift and go to state 122
    MAP_TYPE        shift and go to state 123
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    declaration                    shift and go to state 112
    parameters                     shift and go to state 117
    expression                     shift and go to state 111
    parameter                      shift and go to state 118
    empty                          shift and go to state 119
    varType                        shift and go to state 120
    variable                       shift and go to state 121
    function                       shift and go to state 110
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    factor                         shift and go to state 43

state 64

    (7) statement -> assignation SEMICOLON .

    LBRACE          reduce using rule 7 (statement -> assignation SEMICOLON .)
    CONTINUE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    BREAK           reduce using rule 7 (statement -> assignation SEMICOLON .)
    LIST_TYPE       reduce using rule 7 (statement -> assignation SEMICOLON .)
    MAP_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    ID              reduce using rule 7 (statement -> assignation SEMICOLON .)
    IMPORT          reduce using rule 7 (statement -> assignation SEMICOLON .)
    IF              reduce using rule 7 (statement -> assignation SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> assignation SEMICOLON .)
    FOR             reduce using rule 7 (statement -> assignation SEMICOLON .)
    PRINT           reduce using rule 7 (statement -> assignation SEMICOLON .)
    CLASS           reduce using rule 7 (statement -> assignation SEMICOLON .)
    ENUM            reduce using rule 7 (statement -> assignation SEMICOLON .)
    TRY             reduce using rule 7 (statement -> assignation SEMICOLON .)
    SWITCH          reduce using rule 7 (statement -> assignation SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> assignation SEMICOLON .)
    CONST           reduce using rule 7 (statement -> assignation SEMICOLON .)
    FINAL           reduce using rule 7 (statement -> assignation SEMICOLON .)
    INT_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    STRING_TYPE     reduce using rule 7 (statement -> assignation SEMICOLON .)
    NUM_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 7 (statement -> assignation SEMICOLON .)
    BOOL_TYPE       reduce using rule 7 (statement -> assignation SEMICOLON .)
    SET_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    VAR             reduce using rule 7 (statement -> assignation SEMICOLON .)
    VOID            reduce using rule 7 (statement -> assignation SEMICOLON .)
    LPARENTHESIS    reduce using rule 7 (statement -> assignation SEMICOLON .)
    MINUS           reduce using rule 7 (statement -> assignation SEMICOLON .)
    INT             reduce using rule 7 (statement -> assignation SEMICOLON .)
    DOUBLE          reduce using rule 7 (statement -> assignation SEMICOLON .)
    $end            reduce using rule 7 (statement -> assignation SEMICOLON .)
    RBRACE          reduce using rule 7 (statement -> assignation SEMICOLON .)
    ELSE            reduce using rule 7 (statement -> assignation SEMICOLON .)
    SEMICOLON       reduce using rule 7 (statement -> assignation SEMICOLON .)
    DEFAULT         reduce using rule 7 (statement -> assignation SEMICOLON .)
    CASE            reduce using rule 7 (statement -> assignation SEMICOLON .)


state 65

    (8) statement -> increment SEMICOLON .

    LBRACE          reduce using rule 8 (statement -> increment SEMICOLON .)
    CONTINUE        reduce using rule 8 (statement -> increment SEMICOLON .)
    BREAK           reduce using rule 8 (statement -> increment SEMICOLON .)
    LIST_TYPE       reduce using rule 8 (statement -> increment SEMICOLON .)
    MAP_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    ID              reduce using rule 8 (statement -> increment SEMICOLON .)
    IMPORT          reduce using rule 8 (statement -> increment SEMICOLON .)
    IF              reduce using rule 8 (statement -> increment SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> increment SEMICOLON .)
    FOR             reduce using rule 8 (statement -> increment SEMICOLON .)
    PRINT           reduce using rule 8 (statement -> increment SEMICOLON .)
    CLASS           reduce using rule 8 (statement -> increment SEMICOLON .)
    ENUM            reduce using rule 8 (statement -> increment SEMICOLON .)
    TRY             reduce using rule 8 (statement -> increment SEMICOLON .)
    SWITCH          reduce using rule 8 (statement -> increment SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> increment SEMICOLON .)
    CONST           reduce using rule 8 (statement -> increment SEMICOLON .)
    FINAL           reduce using rule 8 (statement -> increment SEMICOLON .)
    INT_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    STRING_TYPE     reduce using rule 8 (statement -> increment SEMICOLON .)
    NUM_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 8 (statement -> increment SEMICOLON .)
    BOOL_TYPE       reduce using rule 8 (statement -> increment SEMICOLON .)
    SET_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    VAR             reduce using rule 8 (statement -> increment SEMICOLON .)
    VOID            reduce using rule 8 (statement -> increment SEMICOLON .)
    LPARENTHESIS    reduce using rule 8 (statement -> increment SEMICOLON .)
    MINUS           reduce using rule 8 (statement -> increment SEMICOLON .)
    INT             reduce using rule 8 (statement -> increment SEMICOLON .)
    DOUBLE          reduce using rule 8 (statement -> increment SEMICOLON .)
    $end            reduce using rule 8 (statement -> increment SEMICOLON .)
    RBRACE          reduce using rule 8 (statement -> increment SEMICOLON .)
    ELSE            reduce using rule 8 (statement -> increment SEMICOLON .)
    SEMICOLON       reduce using rule 8 (statement -> increment SEMICOLON .)
    DEFAULT         reduce using rule 8 (statement -> increment SEMICOLON .)
    CASE            reduce using rule 8 (statement -> increment SEMICOLON .)


state 66

    (9) statement -> decrement SEMICOLON .

    LBRACE          reduce using rule 9 (statement -> decrement SEMICOLON .)
    CONTINUE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    BREAK           reduce using rule 9 (statement -> decrement SEMICOLON .)
    LIST_TYPE       reduce using rule 9 (statement -> decrement SEMICOLON .)
    MAP_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    ID              reduce using rule 9 (statement -> decrement SEMICOLON .)
    IMPORT          reduce using rule 9 (statement -> decrement SEMICOLON .)
    IF              reduce using rule 9 (statement -> decrement SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> decrement SEMICOLON .)
    FOR             reduce using rule 9 (statement -> decrement SEMICOLON .)
    PRINT           reduce using rule 9 (statement -> decrement SEMICOLON .)
    CLASS           reduce using rule 9 (statement -> decrement SEMICOLON .)
    ENUM            reduce using rule 9 (statement -> decrement SEMICOLON .)
    TRY             reduce using rule 9 (statement -> decrement SEMICOLON .)
    SWITCH          reduce using rule 9 (statement -> decrement SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> decrement SEMICOLON .)
    CONST           reduce using rule 9 (statement -> decrement SEMICOLON .)
    FINAL           reduce using rule 9 (statement -> decrement SEMICOLON .)
    INT_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    STRING_TYPE     reduce using rule 9 (statement -> decrement SEMICOLON .)
    NUM_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 9 (statement -> decrement SEMICOLON .)
    BOOL_TYPE       reduce using rule 9 (statement -> decrement SEMICOLON .)
    SET_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    VAR             reduce using rule 9 (statement -> decrement SEMICOLON .)
    VOID            reduce using rule 9 (statement -> decrement SEMICOLON .)
    LPARENTHESIS    reduce using rule 9 (statement -> decrement SEMICOLON .)
    MINUS           reduce using rule 9 (statement -> decrement SEMICOLON .)
    INT             reduce using rule 9 (statement -> decrement SEMICOLON .)
    DOUBLE          reduce using rule 9 (statement -> decrement SEMICOLON .)
    $end            reduce using rule 9 (statement -> decrement SEMICOLON .)
    RBRACE          reduce using rule 9 (statement -> decrement SEMICOLON .)
    ELSE            reduce using rule 9 (statement -> decrement SEMICOLON .)
    SEMICOLON       reduce using rule 9 (statement -> decrement SEMICOLON .)
    DEFAULT         reduce using rule 9 (statement -> decrement SEMICOLON .)
    CASE            reduce using rule 9 (statement -> decrement SEMICOLON .)


state 67

    (10) statement -> import SEMICOLON .

    LBRACE          reduce using rule 10 (statement -> import SEMICOLON .)
    CONTINUE        reduce using rule 10 (statement -> import SEMICOLON .)
    BREAK           reduce using rule 10 (statement -> import SEMICOLON .)
    LIST_TYPE       reduce using rule 10 (statement -> import SEMICOLON .)
    MAP_TYPE        reduce using rule 10 (statement -> import SEMICOLON .)
    ID              reduce using rule 10 (statement -> import SEMICOLON .)
    IMPORT          reduce using rule 10 (statement -> import SEMICOLON .)
    IF              reduce using rule 10 (statement -> import SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> import SEMICOLON .)
    FOR             reduce using rule 10 (statement -> import SEMICOLON .)
    PRINT           reduce using rule 10 (statement -> import SEMICOLON .)
    CLASS           reduce using rule 10 (statement -> import SEMICOLON .)
    ENUM            reduce using rule 10 (statement -> import SEMICOLON .)
    TRY             reduce using rule 10 (statement -> import SEMICOLON .)
    SWITCH          reduce using rule 10 (statement -> import SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> import SEMICOLON .)
    CONST           reduce using rule 10 (statement -> import SEMICOLON .)
    FINAL           reduce using rule 10 (statement -> import SEMICOLON .)
    INT_TYPE        reduce using rule 10 (statement -> import SEMICOLON .)
    STRING_TYPE     reduce using rule 10 (statement -> import SEMICOLON .)
    NUM_TYPE        reduce using rule 10 (statement -> import SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 10 (statement -> import SEMICOLON .)
    BOOL_TYPE       reduce using rule 10 (statement -> import SEMICOLON .)
    SET_TYPE        reduce using rule 10 (statement -> import SEMICOLON .)
    VAR             reduce using rule 10 (statement -> import SEMICOLON .)
    VOID            reduce using rule 10 (statement -> import SEMICOLON .)
    LPARENTHESIS    reduce using rule 10 (statement -> import SEMICOLON .)
    MINUS           reduce using rule 10 (statement -> import SEMICOLON .)
    INT             reduce using rule 10 (statement -> import SEMICOLON .)
    DOUBLE          reduce using rule 10 (statement -> import SEMICOLON .)
    $end            reduce using rule 10 (statement -> import SEMICOLON .)
    RBRACE          reduce using rule 10 (statement -> import SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> import SEMICOLON .)
    SEMICOLON       reduce using rule 10 (statement -> import SEMICOLON .)
    DEFAULT         reduce using rule 10 (statement -> import SEMICOLON .)
    CASE            reduce using rule 10 (statement -> import SEMICOLON .)


state 68

    (22) statement -> return SEMICOLON .

    LBRACE          reduce using rule 22 (statement -> return SEMICOLON .)
    CONTINUE        reduce using rule 22 (statement -> return SEMICOLON .)
    BREAK           reduce using rule 22 (statement -> return SEMICOLON .)
    LIST_TYPE       reduce using rule 22 (statement -> return SEMICOLON .)
    MAP_TYPE        reduce using rule 22 (statement -> return SEMICOLON .)
    ID              reduce using rule 22 (statement -> return SEMICOLON .)
    IMPORT          reduce using rule 22 (statement -> return SEMICOLON .)
    IF              reduce using rule 22 (statement -> return SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> return SEMICOLON .)
    FOR             reduce using rule 22 (statement -> return SEMICOLON .)
    PRINT           reduce using rule 22 (statement -> return SEMICOLON .)
    CLASS           reduce using rule 22 (statement -> return SEMICOLON .)
    ENUM            reduce using rule 22 (statement -> return SEMICOLON .)
    TRY             reduce using rule 22 (statement -> return SEMICOLON .)
    SWITCH          reduce using rule 22 (statement -> return SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> return SEMICOLON .)
    CONST           reduce using rule 22 (statement -> return SEMICOLON .)
    FINAL           reduce using rule 22 (statement -> return SEMICOLON .)
    INT_TYPE        reduce using rule 22 (statement -> return SEMICOLON .)
    STRING_TYPE     reduce using rule 22 (statement -> return SEMICOLON .)
    NUM_TYPE        reduce using rule 22 (statement -> return SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 22 (statement -> return SEMICOLON .)
    BOOL_TYPE       reduce using rule 22 (statement -> return SEMICOLON .)
    SET_TYPE        reduce using rule 22 (statement -> return SEMICOLON .)
    VAR             reduce using rule 22 (statement -> return SEMICOLON .)
    VOID            reduce using rule 22 (statement -> return SEMICOLON .)
    LPARENTHESIS    reduce using rule 22 (statement -> return SEMICOLON .)
    MINUS           reduce using rule 22 (statement -> return SEMICOLON .)
    INT             reduce using rule 22 (statement -> return SEMICOLON .)
    DOUBLE          reduce using rule 22 (statement -> return SEMICOLON .)
    $end            reduce using rule 22 (statement -> return SEMICOLON .)
    RBRACE          reduce using rule 22 (statement -> return SEMICOLON .)
    ELSE            reduce using rule 22 (statement -> return SEMICOLON .)
    SEMICOLON       reduce using rule 22 (statement -> return SEMICOLON .)
    DEFAULT         reduce using rule 22 (statement -> return SEMICOLON .)
    CASE            reduce using rule 22 (statement -> return SEMICOLON .)


state 69

    (23) statement -> CONTINUE SEMICOLON .

    LBRACE          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    LIST_TYPE       reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    MAP_TYPE        reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    IMPORT          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    PRINT           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    FINAL           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    INT_TYPE        reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    STRING_TYPE     reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    NUM_TYPE        reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    BOOL_TYPE       reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    SET_TYPE        reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    LPARENTHESIS    reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)


state 70

    (24) statement -> BREAK SEMICOLON .

    LBRACE          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 24 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    LIST_TYPE       reduce using rule 24 (statement -> BREAK SEMICOLON .)
    MAP_TYPE        reduce using rule 24 (statement -> BREAK SEMICOLON .)
    ID              reduce using rule 24 (statement -> BREAK SEMICOLON .)
    IMPORT          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 24 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 24 (statement -> BREAK SEMICOLON .)
    PRINT           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 24 (statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 24 (statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    FINAL           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    INT_TYPE        reduce using rule 24 (statement -> BREAK SEMICOLON .)
    STRING_TYPE     reduce using rule 24 (statement -> BREAK SEMICOLON .)
    NUM_TYPE        reduce using rule 24 (statement -> BREAK SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 24 (statement -> BREAK SEMICOLON .)
    BOOL_TYPE       reduce using rule 24 (statement -> BREAK SEMICOLON .)
    SET_TYPE        reduce using rule 24 (statement -> BREAK SEMICOLON .)
    VAR             reduce using rule 24 (statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 24 (statement -> BREAK SEMICOLON .)
    LPARENTHESIS    reduce using rule 24 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 24 (statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    $end            reduce using rule 24 (statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 24 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 24 (statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 24 (statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 24 (statement -> BREAK SEMICOLON .)


state 71

    (71) term -> term TIMES . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    factor                         shift and go to state 124

state 72

    (72) term -> term DIVIDE . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    factor                         shift and go to state 125

state 73

    (73) term -> term MODULE . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    factor                         shift and go to state 126

state 74

    (79) factor -> MINUS factor .

    TIMES           reduce using rule 79 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 79 (factor -> MINUS factor .)
    MODULE          reduce using rule 79 (factor -> MINUS factor .)
    SEMICOLON       reduce using rule 79 (factor -> MINUS factor .)
    PLUS            reduce using rule 79 (factor -> MINUS factor .)
    MINUS           reduce using rule 79 (factor -> MINUS factor .)
    RPARENTHESIS    reduce using rule 79 (factor -> MINUS factor .)
    COMMA           reduce using rule 79 (factor -> MINUS factor .)
    RBRACKET        reduce using rule 79 (factor -> MINUS factor .)
    EQUALS          reduce using rule 79 (factor -> MINUS factor .)
    NOT_EQUALS      reduce using rule 79 (factor -> MINUS factor .)
    GREATER_THAN    reduce using rule 79 (factor -> MINUS factor .)
    LESS_THAN       reduce using rule 79 (factor -> MINUS factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 79 (factor -> MINUS factor .)
    LESS_THAN_OR_EQUALS reduce using rule 79 (factor -> MINUS factor .)
    AND             reduce using rule 79 (factor -> MINUS factor .)
    OR              reduce using rule 79 (factor -> MINUS factor .)
    COLON           reduce using rule 79 (factor -> MINUS factor .)
    RBRACE          reduce using rule 79 (factor -> MINUS factor .)


state 75

    (75) factor -> ID . LBRACKET expression RBRACKET
    (76) factor -> ID . DOT ID
    (77) factor -> ID .

    LBRACKET        shift and go to state 90
    DOT             shift and go to state 89
    TIMES           reduce using rule 77 (factor -> ID .)
    DIVIDE          reduce using rule 77 (factor -> ID .)
    MODULE          reduce using rule 77 (factor -> ID .)
    SEMICOLON       reduce using rule 77 (factor -> ID .)
    PLUS            reduce using rule 77 (factor -> ID .)
    MINUS           reduce using rule 77 (factor -> ID .)
    RPARENTHESIS    reduce using rule 77 (factor -> ID .)
    COMMA           reduce using rule 77 (factor -> ID .)
    RBRACKET        reduce using rule 77 (factor -> ID .)
    EQUALS          reduce using rule 77 (factor -> ID .)
    NOT_EQUALS      reduce using rule 77 (factor -> ID .)
    GREATER_THAN    reduce using rule 77 (factor -> ID .)
    LESS_THAN       reduce using rule 77 (factor -> ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 77 (factor -> ID .)
    LESS_THAN_OR_EQUALS reduce using rule 77 (factor -> ID .)
    AND             reduce using rule 77 (factor -> ID .)
    OR              reduce using rule 77 (factor -> ID .)
    COLON           reduce using rule 77 (factor -> ID .)
    RBRACE          reduce using rule 77 (factor -> ID .)


state 76

    (25) declaration -> declaration_modifier varType . ID

    ID              shift and go to state 127


state 77

    (26) declaration -> declaration_modifier ID .

    SEMICOLON       reduce using rule 26 (declaration -> declaration_modifier ID .)
    ASSIGN_OPERATOR reduce using rule 26 (declaration -> declaration_modifier ID .)
    LPARENTHESIS    reduce using rule 26 (declaration -> declaration_modifier ID .)


state 78

    (53) varType -> LIST_TYPE .

    ID              reduce using rule 53 (varType -> LIST_TYPE .)
    GREATER_THAN    reduce using rule 53 (varType -> LIST_TYPE .)
    COMMA           reduce using rule 53 (varType -> LIST_TYPE .)


state 79

    (54) varType -> MAP_TYPE .

    ID              reduce using rule 54 (varType -> MAP_TYPE .)
    GREATER_THAN    reduce using rule 54 (varType -> MAP_TYPE .)
    COMMA           reduce using rule 54 (varType -> MAP_TYPE .)


state 80

    (27) declaration -> varType ID .

    SEMICOLON       reduce using rule 27 (declaration -> varType ID .)
    ASSIGN_OPERATOR reduce using rule 27 (declaration -> varType ID .)
    LPARENTHESIS    reduce using rule 27 (declaration -> varType ID .)


state 81

    (42) assignation -> ID PLUS_EQUALS . expression
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    expression                     shift and go to state 128
    term                           shift and go to state 25
    factor                         shift and go to state 43

state 82

    (43) assignation -> ID MINUS_EQUALS . expression
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    expression                     shift and go to state 129
    term                           shift and go to state 25
    factor                         shift and go to state 43

state 83

    (44) assignation -> ID TIMES_EQUALS . expression
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    expression                     shift and go to state 130
    term                           shift and go to state 25
    factor                         shift and go to state 43

state 84

    (45) assignation -> ID DIVIDE_EQUALS . expression
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    expression                     shift and go to state 131
    term                           shift and go to state 25
    factor                         shift and go to state 43

state 85

    (47) assignation -> ID ASSIGN_OPERATOR . variable
    (121) input -> ID ASSIGN_OPERATOR . STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    STDIN           shift and go to state 133
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 132
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 86

    (98) increment -> ID INCREMENT .

    SEMICOLON       reduce using rule 98 (increment -> ID INCREMENT .)
    RPARENTHESIS    reduce using rule 98 (increment -> ID INCREMENT .)


state 87

    (99) decrement -> ID DECREMENT .

    SEMICOLON       reduce using rule 99 (decrement -> ID DECREMENT .)
    RPARENTHESIS    reduce using rule 99 (decrement -> ID DECREMENT .)


state 88

    (101) function -> ID LPARENTHESIS . parameters RPARENTHESIS
    (115) parameters -> . parameters COMMA parameter
    (116) parameters -> . parameter
    (117) parameters -> . empty
    (118) parameter -> . varType ID
    (119) parameter -> . variable
    (127) empty -> .
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    RPARENTHESIS    reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    LIST_TYPE       shift and go to state 122
    MAP_TYPE        shift and go to state 123
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    parameters                     shift and go to state 134
    parameter                      shift and go to state 118
    empty                          shift and go to state 119
    varType                        shift and go to state 120
    variable                       shift and go to state 121
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    factor                         shift and go to state 43

state 89

    (76) factor -> ID DOT . ID

    ID              shift and go to state 135


state 90

    (75) factor -> ID LBRACKET . expression RBRACKET
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    expression                     shift and go to state 136
    term                           shift and go to state 25
    factor                         shift and go to state 43

state 91

    (28) declaration -> LIST_TYPE LESS_THAN . varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID

    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    LIST_TYPE       shift and go to state 78
    MAP_TYPE        shift and go to state 79
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53

    varType                        shift and go to state 137

state 92

    (33) declaration -> MAP_TYPE LESS_THAN . varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID

    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    LIST_TYPE       shift and go to state 78
    MAP_TYPE        shift and go to state 79
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53

    varType                        shift and go to state 138

state 93

    (39) import -> IMPORT STRING . SEMICOLON

    SEMICOLON       shift and go to state 139


state 94

    (78) factor -> LPARENTHESIS expression . RPARENTHESIS
    (68) expression -> expression . PLUS term
    (69) expression -> expression . MINUS term

    RPARENTHESIS    shift and go to state 140
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 95

    (92) if -> IF LPARENTHESIS . booleanExpression RPARENTHESIS statement
    (93) if -> IF LPARENTHESIS . booleanExpression RPARENTHESIS statement ELSE statement
    (82) booleanExpression -> . variable EQUALS variable
    (83) booleanExpression -> . variable NOT_EQUALS variable
    (84) booleanExpression -> . variable GREATER_THAN variable
    (85) booleanExpression -> . variable LESS_THAN variable
    (86) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (87) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (88) booleanExpression -> . booleanExpression AND booleanExpression
    (89) booleanExpression -> . booleanExpression OR booleanExpression
    (90) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (91) booleanExpression -> . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    LPARENTHESIS    shift and go to state 141
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    MINUS           shift and go to state 26

    booleanExpression              shift and go to state 142
    variable                       shift and go to state 143
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 96

    (94) while -> WHILE LPARENTHESIS . booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (82) booleanExpression -> . variable EQUALS variable
    (83) booleanExpression -> . variable NOT_EQUALS variable
    (84) booleanExpression -> . variable GREATER_THAN variable
    (85) booleanExpression -> . variable LESS_THAN variable
    (86) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (87) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (88) booleanExpression -> . booleanExpression AND booleanExpression
    (89) booleanExpression -> . booleanExpression OR booleanExpression
    (90) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (91) booleanExpression -> . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    LPARENTHESIS    shift and go to state 141
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    MINUS           shift and go to state 26

    booleanExpression              shift and go to state 144
    variable                       shift and go to state 143
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 97

    (95) for -> FOR LPARENTHESIS . assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> FOR LPARENTHESIS . assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> FOR LPARENTHESIS . varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL

    ID              shift and go to state 147
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    LIST_TYPE       shift and go to state 122
    MAP_TYPE        shift and go to state 123
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    CONST           shift and go to state 44
    FINAL           shift and go to state 45

    assignation                    shift and go to state 145
    varType                        shift and go to state 146
    declaration                    shift and go to state 148
    declaration_modifier           shift and go to state 27

state 98

    (120) print -> PRINT LPARENTHESIS . variable RPARENTHESIS SEMICOLON
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 149
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 99

    (122) class_def -> CLASS ID . LBRACE class_members RBRACE

    LBRACE          shift and go to state 150


state 100

    (104) enum -> ENUM ID . LBRACE enum_values RBRACE

    LBRACE          shift and go to state 151


state 101

    (107) try -> TRY LBRACE . statements RBRACE FINALLY LBRACE statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RBRACE          reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statements                     shift and go to state 152
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 102

    (108) switch -> SWITCH LPARENTHESIS . variable RPARENTHESIS LBRACE cases default_case RBRACE
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 153
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 103

    (40) return -> RETURN variable .

    SEMICOLON       reduce using rule 40 (return -> RETURN variable .)


state 104

    (60) variable -> INT .
    (80) factor -> INT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for COMMA resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for EQUALS resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for AND resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for OR resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for COLON resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 60 (variable -> INT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 60 (variable -> INT .)
    SEMICOLON       reduce using rule 60 (variable -> INT .)
    RPARENTHESIS    reduce using rule 60 (variable -> INT .)
    COMMA           reduce using rule 60 (variable -> INT .)
    EQUALS          reduce using rule 60 (variable -> INT .)
    NOT_EQUALS      reduce using rule 60 (variable -> INT .)
    GREATER_THAN    reduce using rule 60 (variable -> INT .)
    LESS_THAN       reduce using rule 60 (variable -> INT .)
    GREATER_THAN_OR_EQUALS reduce using rule 60 (variable -> INT .)
    LESS_THAN_OR_EQUALS reduce using rule 60 (variable -> INT .)
    AND             reduce using rule 60 (variable -> INT .)
    OR              reduce using rule 60 (variable -> INT .)
    COLON           reduce using rule 60 (variable -> INT .)
    RBRACKET        reduce using rule 60 (variable -> INT .)
    RBRACE          reduce using rule 60 (variable -> INT .)
    TIMES           reduce using rule 80 (factor -> INT .)
    DIVIDE          reduce using rule 80 (factor -> INT .)
    MODULE          reduce using rule 80 (factor -> INT .)
    PLUS            reduce using rule 80 (factor -> INT .)
    MINUS           reduce using rule 80 (factor -> INT .)

  ! SEMICOLON       [ reduce using rule 80 (factor -> INT .) ]
  ! RPARENTHESIS    [ reduce using rule 80 (factor -> INT .) ]
  ! COMMA           [ reduce using rule 80 (factor -> INT .) ]
  ! EQUALS          [ reduce using rule 80 (factor -> INT .) ]
  ! NOT_EQUALS      [ reduce using rule 80 (factor -> INT .) ]
  ! GREATER_THAN    [ reduce using rule 80 (factor -> INT .) ]
  ! LESS_THAN       [ reduce using rule 80 (factor -> INT .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 80 (factor -> INT .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 80 (factor -> INT .) ]
  ! AND             [ reduce using rule 80 (factor -> INT .) ]
  ! OR              [ reduce using rule 80 (factor -> INT .) ]
  ! COLON           [ reduce using rule 80 (factor -> INT .) ]
  ! RBRACKET        [ reduce using rule 80 (factor -> INT .) ]
  ! RBRACE          [ reduce using rule 80 (factor -> INT .) ]


state 105

    (61) variable -> DOUBLE .
    (81) factor -> DOUBLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for EQUALS resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for AND resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for OR resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for COLON resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 61 (variable -> DOUBLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 61 (variable -> DOUBLE .)
    SEMICOLON       reduce using rule 61 (variable -> DOUBLE .)
    RPARENTHESIS    reduce using rule 61 (variable -> DOUBLE .)
    COMMA           reduce using rule 61 (variable -> DOUBLE .)
    EQUALS          reduce using rule 61 (variable -> DOUBLE .)
    NOT_EQUALS      reduce using rule 61 (variable -> DOUBLE .)
    GREATER_THAN    reduce using rule 61 (variable -> DOUBLE .)
    LESS_THAN       reduce using rule 61 (variable -> DOUBLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 61 (variable -> DOUBLE .)
    LESS_THAN_OR_EQUALS reduce using rule 61 (variable -> DOUBLE .)
    AND             reduce using rule 61 (variable -> DOUBLE .)
    OR              reduce using rule 61 (variable -> DOUBLE .)
    COLON           reduce using rule 61 (variable -> DOUBLE .)
    RBRACKET        reduce using rule 61 (variable -> DOUBLE .)
    RBRACE          reduce using rule 61 (variable -> DOUBLE .)
    TIMES           reduce using rule 81 (factor -> DOUBLE .)
    DIVIDE          reduce using rule 81 (factor -> DOUBLE .)
    MODULE          reduce using rule 81 (factor -> DOUBLE .)
    PLUS            reduce using rule 81 (factor -> DOUBLE .)
    MINUS           reduce using rule 81 (factor -> DOUBLE .)

  ! SEMICOLON       [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! RPARENTHESIS    [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! COMMA           [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! EQUALS          [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! NOT_EQUALS      [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! GREATER_THAN    [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! LESS_THAN       [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! AND             [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! OR              [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! COLON           [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! RBRACKET        [ reduce using rule 81 (factor -> DOUBLE .) ]
  ! RBRACE          [ reduce using rule 81 (factor -> DOUBLE .) ]


state 106

    (62) variable -> STRING .

    SEMICOLON       reduce using rule 62 (variable -> STRING .)
    RPARENTHESIS    reduce using rule 62 (variable -> STRING .)
    COMMA           reduce using rule 62 (variable -> STRING .)
    EQUALS          reduce using rule 62 (variable -> STRING .)
    NOT_EQUALS      reduce using rule 62 (variable -> STRING .)
    GREATER_THAN    reduce using rule 62 (variable -> STRING .)
    LESS_THAN       reduce using rule 62 (variable -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 62 (variable -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 62 (variable -> STRING .)
    AND             reduce using rule 62 (variable -> STRING .)
    OR              reduce using rule 62 (variable -> STRING .)
    COLON           reduce using rule 62 (variable -> STRING .)
    RBRACKET        reduce using rule 62 (variable -> STRING .)
    RBRACE          reduce using rule 62 (variable -> STRING .)


state 107

    (63) variable -> BOOL .

    SEMICOLON       reduce using rule 63 (variable -> BOOL .)
    RPARENTHESIS    reduce using rule 63 (variable -> BOOL .)
    COMMA           reduce using rule 63 (variable -> BOOL .)
    EQUALS          reduce using rule 63 (variable -> BOOL .)
    NOT_EQUALS      reduce using rule 63 (variable -> BOOL .)
    GREATER_THAN    reduce using rule 63 (variable -> BOOL .)
    LESS_THAN       reduce using rule 63 (variable -> BOOL .)
    GREATER_THAN_OR_EQUALS reduce using rule 63 (variable -> BOOL .)
    LESS_THAN_OR_EQUALS reduce using rule 63 (variable -> BOOL .)
    AND             reduce using rule 63 (variable -> BOOL .)
    OR              reduce using rule 63 (variable -> BOOL .)
    COLON           reduce using rule 63 (variable -> BOOL .)
    RBRACKET        reduce using rule 63 (variable -> BOOL .)
    RBRACE          reduce using rule 63 (variable -> BOOL .)


state 108

    (64) variable -> NULL .

    SEMICOLON       reduce using rule 64 (variable -> NULL .)
    RPARENTHESIS    reduce using rule 64 (variable -> NULL .)
    COMMA           reduce using rule 64 (variable -> NULL .)
    EQUALS          reduce using rule 64 (variable -> NULL .)
    NOT_EQUALS      reduce using rule 64 (variable -> NULL .)
    GREATER_THAN    reduce using rule 64 (variable -> NULL .)
    LESS_THAN       reduce using rule 64 (variable -> NULL .)
    GREATER_THAN_OR_EQUALS reduce using rule 64 (variable -> NULL .)
    LESS_THAN_OR_EQUALS reduce using rule 64 (variable -> NULL .)
    AND             reduce using rule 64 (variable -> NULL .)
    OR              reduce using rule 64 (variable -> NULL .)
    COLON           reduce using rule 64 (variable -> NULL .)
    RBRACKET        reduce using rule 64 (variable -> NULL .)
    RBRACE          reduce using rule 64 (variable -> NULL .)


state 109

    (65) variable -> ID .
    (101) function -> ID . LPARENTHESIS parameters RPARENTHESIS
    (75) factor -> ID . LBRACKET expression RBRACKET
    (76) factor -> ID . DOT ID
    (77) factor -> ID .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for EQUALS resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 65 (variable -> ID .)
  ! reduce/reduce conflict for RBRACE resolved using rule 65 (variable -> ID .)
    SEMICOLON       reduce using rule 65 (variable -> ID .)
    RPARENTHESIS    reduce using rule 65 (variable -> ID .)
    COMMA           reduce using rule 65 (variable -> ID .)
    EQUALS          reduce using rule 65 (variable -> ID .)
    NOT_EQUALS      reduce using rule 65 (variable -> ID .)
    GREATER_THAN    reduce using rule 65 (variable -> ID .)
    LESS_THAN       reduce using rule 65 (variable -> ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 65 (variable -> ID .)
    LESS_THAN_OR_EQUALS reduce using rule 65 (variable -> ID .)
    AND             reduce using rule 65 (variable -> ID .)
    OR              reduce using rule 65 (variable -> ID .)
    COLON           reduce using rule 65 (variable -> ID .)
    RBRACKET        reduce using rule 65 (variable -> ID .)
    RBRACE          reduce using rule 65 (variable -> ID .)
    LPARENTHESIS    shift and go to state 88
    LBRACKET        shift and go to state 90
    DOT             shift and go to state 89
    TIMES           reduce using rule 77 (factor -> ID .)
    DIVIDE          reduce using rule 77 (factor -> ID .)
    MODULE          reduce using rule 77 (factor -> ID .)
    PLUS            reduce using rule 77 (factor -> ID .)
    MINUS           reduce using rule 77 (factor -> ID .)

  ! SEMICOLON       [ reduce using rule 77 (factor -> ID .) ]
  ! RPARENTHESIS    [ reduce using rule 77 (factor -> ID .) ]
  ! COMMA           [ reduce using rule 77 (factor -> ID .) ]
  ! EQUALS          [ reduce using rule 77 (factor -> ID .) ]
  ! NOT_EQUALS      [ reduce using rule 77 (factor -> ID .) ]
  ! GREATER_THAN    [ reduce using rule 77 (factor -> ID .) ]
  ! LESS_THAN       [ reduce using rule 77 (factor -> ID .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 77 (factor -> ID .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 77 (factor -> ID .) ]
  ! AND             [ reduce using rule 77 (factor -> ID .) ]
  ! OR              [ reduce using rule 77 (factor -> ID .) ]
  ! COLON           [ reduce using rule 77 (factor -> ID .) ]
  ! RBRACKET        [ reduce using rule 77 (factor -> ID .) ]
  ! RBRACE          [ reduce using rule 77 (factor -> ID .) ]


state 110

    (66) variable -> function .

    SEMICOLON       reduce using rule 66 (variable -> function .)
    RPARENTHESIS    reduce using rule 66 (variable -> function .)
    COMMA           reduce using rule 66 (variable -> function .)
    EQUALS          reduce using rule 66 (variable -> function .)
    NOT_EQUALS      reduce using rule 66 (variable -> function .)
    GREATER_THAN    reduce using rule 66 (variable -> function .)
    LESS_THAN       reduce using rule 66 (variable -> function .)
    GREATER_THAN_OR_EQUALS reduce using rule 66 (variable -> function .)
    LESS_THAN_OR_EQUALS reduce using rule 66 (variable -> function .)
    AND             reduce using rule 66 (variable -> function .)
    OR              reduce using rule 66 (variable -> function .)
    COLON           reduce using rule 66 (variable -> function .)
    RBRACKET        reduce using rule 66 (variable -> function .)
    RBRACE          reduce using rule 66 (variable -> function .)


state 111

    (67) variable -> expression .
    (68) expression -> expression . PLUS term
    (69) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 67 (variable -> expression .)
    RPARENTHESIS    reduce using rule 67 (variable -> expression .)
    COMMA           reduce using rule 67 (variable -> expression .)
    EQUALS          reduce using rule 67 (variable -> expression .)
    NOT_EQUALS      reduce using rule 67 (variable -> expression .)
    GREATER_THAN    reduce using rule 67 (variable -> expression .)
    LESS_THAN       reduce using rule 67 (variable -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 67 (variable -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 67 (variable -> expression .)
    AND             reduce using rule 67 (variable -> expression .)
    OR              reduce using rule 67 (variable -> expression .)
    COLON           reduce using rule 67 (variable -> expression .)
    RBRACKET        reduce using rule 67 (variable -> expression .)
    RBRACE          reduce using rule 67 (variable -> expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 112

    (100) function -> declaration . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (102) function -> declaration . LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON

    LPARENTHESIS    shift and go to state 63


state 113

    (4) statement -> LBRACE statements RBRACE .

    LBRACE          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    BREAK           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    ID              reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    IMPORT          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    IF              reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    FOR             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    CLASS           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    ENUM            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    TRY             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    SWITCH          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    CONST           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    FINAL           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    VAR             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    VOID            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    MINUS           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    INT             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    $end            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    CASE            reduce using rule 4 (statement -> LBRACE statements RBRACE .)


state 114

    (68) expression -> expression PLUS term .
    (71) term -> term . TIMES factor
    (72) term -> term . DIVIDE factor
    (73) term -> term . MODULE factor

    SEMICOLON       reduce using rule 68 (expression -> expression PLUS term .)
    PLUS            reduce using rule 68 (expression -> expression PLUS term .)
    MINUS           reduce using rule 68 (expression -> expression PLUS term .)
    RPARENTHESIS    reduce using rule 68 (expression -> expression PLUS term .)
    COMMA           reduce using rule 68 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 68 (expression -> expression PLUS term .)
    EQUALS          reduce using rule 68 (expression -> expression PLUS term .)
    NOT_EQUALS      reduce using rule 68 (expression -> expression PLUS term .)
    GREATER_THAN    reduce using rule 68 (expression -> expression PLUS term .)
    LESS_THAN       reduce using rule 68 (expression -> expression PLUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 68 (expression -> expression PLUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 68 (expression -> expression PLUS term .)
    AND             reduce using rule 68 (expression -> expression PLUS term .)
    OR              reduce using rule 68 (expression -> expression PLUS term .)
    COLON           reduce using rule 68 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 68 (expression -> expression PLUS term .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73


state 115

    (69) expression -> expression MINUS term .
    (71) term -> term . TIMES factor
    (72) term -> term . DIVIDE factor
    (73) term -> term . MODULE factor

    SEMICOLON       reduce using rule 69 (expression -> expression MINUS term .)
    PLUS            reduce using rule 69 (expression -> expression MINUS term .)
    MINUS           reduce using rule 69 (expression -> expression MINUS term .)
    RPARENTHESIS    reduce using rule 69 (expression -> expression MINUS term .)
    COMMA           reduce using rule 69 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 69 (expression -> expression MINUS term .)
    EQUALS          reduce using rule 69 (expression -> expression MINUS term .)
    NOT_EQUALS      reduce using rule 69 (expression -> expression MINUS term .)
    GREATER_THAN    reduce using rule 69 (expression -> expression MINUS term .)
    LESS_THAN       reduce using rule 69 (expression -> expression MINUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 69 (expression -> expression MINUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 69 (expression -> expression MINUS term .)
    AND             reduce using rule 69 (expression -> expression MINUS term .)
    OR              reduce using rule 69 (expression -> expression MINUS term .)
    COLON           reduce using rule 69 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 69 (expression -> expression MINUS term .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    MODULE          shift and go to state 73


state 116

    (46) assignation -> declaration ASSIGN_OPERATOR variable .

    SEMICOLON       reduce using rule 46 (assignation -> declaration ASSIGN_OPERATOR variable .)


state 117

    (100) function -> declaration LPARENTHESIS parameters . RPARENTHESIS LBRACE statements RBRACE
    (102) function -> declaration LPARENTHESIS parameters . RPARENTHESIS ARROW expression SEMICOLON
    (115) parameters -> parameters . COMMA parameter

    RPARENTHESIS    shift and go to state 154
    COMMA           shift and go to state 155


state 118

    (116) parameters -> parameter .

    RPARENTHESIS    reduce using rule 116 (parameters -> parameter .)
    COMMA           reduce using rule 116 (parameters -> parameter .)


state 119

    (117) parameters -> empty .

    RPARENTHESIS    reduce using rule 117 (parameters -> empty .)
    COMMA           reduce using rule 117 (parameters -> empty .)


state 120

    (118) parameter -> varType . ID
    (27) declaration -> varType . ID

    ID              shift and go to state 156


state 121

    (119) parameter -> variable .

    RPARENTHESIS    reduce using rule 119 (parameter -> variable .)
    COMMA           reduce using rule 119 (parameter -> variable .)


state 122

    (53) varType -> LIST_TYPE .
    (28) declaration -> LIST_TYPE . LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal

    ID              reduce using rule 53 (varType -> LIST_TYPE .)
    LESS_THAN       shift and go to state 91


state 123

    (54) varType -> MAP_TYPE .
    (33) declaration -> MAP_TYPE . LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal

    ID              reduce using rule 54 (varType -> MAP_TYPE .)
    LESS_THAN       shift and go to state 92


state 124

    (71) term -> term TIMES factor .

    TIMES           reduce using rule 71 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 71 (term -> term TIMES factor .)
    MODULE          reduce using rule 71 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 71 (term -> term TIMES factor .)
    PLUS            reduce using rule 71 (term -> term TIMES factor .)
    MINUS           reduce using rule 71 (term -> term TIMES factor .)
    RPARENTHESIS    reduce using rule 71 (term -> term TIMES factor .)
    COMMA           reduce using rule 71 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 71 (term -> term TIMES factor .)
    EQUALS          reduce using rule 71 (term -> term TIMES factor .)
    NOT_EQUALS      reduce using rule 71 (term -> term TIMES factor .)
    GREATER_THAN    reduce using rule 71 (term -> term TIMES factor .)
    LESS_THAN       reduce using rule 71 (term -> term TIMES factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 71 (term -> term TIMES factor .)
    LESS_THAN_OR_EQUALS reduce using rule 71 (term -> term TIMES factor .)
    AND             reduce using rule 71 (term -> term TIMES factor .)
    OR              reduce using rule 71 (term -> term TIMES factor .)
    COLON           reduce using rule 71 (term -> term TIMES factor .)
    RBRACE          reduce using rule 71 (term -> term TIMES factor .)


state 125

    (72) term -> term DIVIDE factor .

    TIMES           reduce using rule 72 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 72 (term -> term DIVIDE factor .)
    MODULE          reduce using rule 72 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 72 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 72 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 72 (term -> term DIVIDE factor .)
    RPARENTHESIS    reduce using rule 72 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 72 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 72 (term -> term DIVIDE factor .)
    EQUALS          reduce using rule 72 (term -> term DIVIDE factor .)
    NOT_EQUALS      reduce using rule 72 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 72 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 72 (term -> term DIVIDE factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 72 (term -> term DIVIDE factor .)
    LESS_THAN_OR_EQUALS reduce using rule 72 (term -> term DIVIDE factor .)
    AND             reduce using rule 72 (term -> term DIVIDE factor .)
    OR              reduce using rule 72 (term -> term DIVIDE factor .)
    COLON           reduce using rule 72 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 72 (term -> term DIVIDE factor .)


state 126

    (73) term -> term MODULE factor .

    TIMES           reduce using rule 73 (term -> term MODULE factor .)
    DIVIDE          reduce using rule 73 (term -> term MODULE factor .)
    MODULE          reduce using rule 73 (term -> term MODULE factor .)
    SEMICOLON       reduce using rule 73 (term -> term MODULE factor .)
    PLUS            reduce using rule 73 (term -> term MODULE factor .)
    MINUS           reduce using rule 73 (term -> term MODULE factor .)
    RPARENTHESIS    reduce using rule 73 (term -> term MODULE factor .)
    COMMA           reduce using rule 73 (term -> term MODULE factor .)
    RBRACKET        reduce using rule 73 (term -> term MODULE factor .)
    EQUALS          reduce using rule 73 (term -> term MODULE factor .)
    NOT_EQUALS      reduce using rule 73 (term -> term MODULE factor .)
    GREATER_THAN    reduce using rule 73 (term -> term MODULE factor .)
    LESS_THAN       reduce using rule 73 (term -> term MODULE factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 73 (term -> term MODULE factor .)
    LESS_THAN_OR_EQUALS reduce using rule 73 (term -> term MODULE factor .)
    AND             reduce using rule 73 (term -> term MODULE factor .)
    OR              reduce using rule 73 (term -> term MODULE factor .)
    COLON           reduce using rule 73 (term -> term MODULE factor .)
    RBRACE          reduce using rule 73 (term -> term MODULE factor .)


state 127

    (25) declaration -> declaration_modifier varType ID .

    SEMICOLON       reduce using rule 25 (declaration -> declaration_modifier varType ID .)
    ASSIGN_OPERATOR reduce using rule 25 (declaration -> declaration_modifier varType ID .)
    LPARENTHESIS    reduce using rule 25 (declaration -> declaration_modifier varType ID .)


state 128

    (42) assignation -> ID PLUS_EQUALS expression .
    (68) expression -> expression . PLUS term
    (69) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 42 (assignation -> ID PLUS_EQUALS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 129

    (43) assignation -> ID MINUS_EQUALS expression .
    (68) expression -> expression . PLUS term
    (69) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 43 (assignation -> ID MINUS_EQUALS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 130

    (44) assignation -> ID TIMES_EQUALS expression .
    (68) expression -> expression . PLUS term
    (69) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 44 (assignation -> ID TIMES_EQUALS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 131

    (45) assignation -> ID DIVIDE_EQUALS expression .
    (68) expression -> expression . PLUS term
    (69) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 45 (assignation -> ID DIVIDE_EQUALS expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 132

    (47) assignation -> ID ASSIGN_OPERATOR variable .

    SEMICOLON       reduce using rule 47 (assignation -> ID ASSIGN_OPERATOR variable .)


state 133

    (121) input -> ID ASSIGN_OPERATOR STDIN . DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON

    DOT             shift and go to state 157


state 134

    (101) function -> ID LPARENTHESIS parameters . RPARENTHESIS
    (115) parameters -> parameters . COMMA parameter

    RPARENTHESIS    shift and go to state 158
    COMMA           shift and go to state 155


state 135

    (76) factor -> ID DOT ID .

    TIMES           reduce using rule 76 (factor -> ID DOT ID .)
    DIVIDE          reduce using rule 76 (factor -> ID DOT ID .)
    MODULE          reduce using rule 76 (factor -> ID DOT ID .)
    SEMICOLON       reduce using rule 76 (factor -> ID DOT ID .)
    PLUS            reduce using rule 76 (factor -> ID DOT ID .)
    MINUS           reduce using rule 76 (factor -> ID DOT ID .)
    RPARENTHESIS    reduce using rule 76 (factor -> ID DOT ID .)
    COMMA           reduce using rule 76 (factor -> ID DOT ID .)
    RBRACKET        reduce using rule 76 (factor -> ID DOT ID .)
    EQUALS          reduce using rule 76 (factor -> ID DOT ID .)
    NOT_EQUALS      reduce using rule 76 (factor -> ID DOT ID .)
    GREATER_THAN    reduce using rule 76 (factor -> ID DOT ID .)
    LESS_THAN       reduce using rule 76 (factor -> ID DOT ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 76 (factor -> ID DOT ID .)
    LESS_THAN_OR_EQUALS reduce using rule 76 (factor -> ID DOT ID .)
    AND             reduce using rule 76 (factor -> ID DOT ID .)
    OR              reduce using rule 76 (factor -> ID DOT ID .)
    COLON           reduce using rule 76 (factor -> ID DOT ID .)
    RBRACE          reduce using rule 76 (factor -> ID DOT ID .)


state 136

    (75) factor -> ID LBRACKET expression . RBRACKET
    (68) expression -> expression . PLUS term
    (69) expression -> expression . MINUS term

    RBRACKET        shift and go to state 159
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 137

    (28) declaration -> LIST_TYPE LESS_THAN varType . GREATER_THAN ID ASSIGN_OPERATOR list_literal

    GREATER_THAN    shift and go to state 160


state 138

    (33) declaration -> MAP_TYPE LESS_THAN varType . COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal

    COMMA           shift and go to state 161


state 139

    (39) import -> IMPORT STRING SEMICOLON .

    SEMICOLON       reduce using rule 39 (import -> IMPORT STRING SEMICOLON .)


state 140

    (78) factor -> LPARENTHESIS expression RPARENTHESIS .

    TIMES           reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    DIVIDE          reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    MODULE          reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    SEMICOLON       reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    PLUS            reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    MINUS           reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    COMMA           reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    RBRACKET        reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    EQUALS          reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    NOT_EQUALS      reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    GREATER_THAN    reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    LESS_THAN       reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    AND             reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    OR              reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    COLON           reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    RBRACE          reduce using rule 78 (factor -> LPARENTHESIS expression RPARENTHESIS .)


state 141

    (90) booleanExpression -> LPARENTHESIS . booleanExpression RPARENTHESIS
    (78) factor -> LPARENTHESIS . expression RPARENTHESIS
    (82) booleanExpression -> . variable EQUALS variable
    (83) booleanExpression -> . variable NOT_EQUALS variable
    (84) booleanExpression -> . variable GREATER_THAN variable
    (85) booleanExpression -> . variable LESS_THAN variable
    (86) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (87) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (88) booleanExpression -> . booleanExpression AND booleanExpression
    (89) booleanExpression -> . booleanExpression OR booleanExpression
    (90) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (91) booleanExpression -> . variable
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID

    LPARENTHESIS    shift and go to state 141
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    MINUS           shift and go to state 26
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53

    booleanExpression              shift and go to state 162
    expression                     shift and go to state 163
    variable                       shift and go to state 143
    term                           shift and go to state 25
    function                       shift and go to state 110
    factor                         shift and go to state 43
    declaration                    shift and go to state 112
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28

state 142

    (92) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS statement
    (93) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS statement ELSE statement
    (88) booleanExpression -> booleanExpression . AND booleanExpression
    (89) booleanExpression -> booleanExpression . OR booleanExpression

    RPARENTHESIS    shift and go to state 164
    AND             shift and go to state 165
    OR              shift and go to state 166


state 143

    (82) booleanExpression -> variable . EQUALS variable
    (83) booleanExpression -> variable . NOT_EQUALS variable
    (84) booleanExpression -> variable . GREATER_THAN variable
    (85) booleanExpression -> variable . LESS_THAN variable
    (86) booleanExpression -> variable . GREATER_THAN_OR_EQUALS variable
    (87) booleanExpression -> variable . LESS_THAN_OR_EQUALS variable
    (91) booleanExpression -> variable .

    EQUALS          shift and go to state 167
    NOT_EQUALS      shift and go to state 168
    GREATER_THAN    shift and go to state 169
    LESS_THAN       shift and go to state 170
    GREATER_THAN_OR_EQUALS shift and go to state 171
    LESS_THAN_OR_EQUALS shift and go to state 172
    RPARENTHESIS    reduce using rule 91 (booleanExpression -> variable .)
    AND             reduce using rule 91 (booleanExpression -> variable .)
    OR              reduce using rule 91 (booleanExpression -> variable .)
    SEMICOLON       reduce using rule 91 (booleanExpression -> variable .)


state 144

    (94) while -> WHILE LPARENTHESIS booleanExpression . RPARENTHESIS LBRACE statements RBRACE
    (88) booleanExpression -> booleanExpression . AND booleanExpression
    (89) booleanExpression -> booleanExpression . OR booleanExpression

    RPARENTHESIS    shift and go to state 173
    AND             shift and go to state 165
    OR              shift and go to state 166


state 145

    (95) for -> FOR LPARENTHESIS assignation . SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> FOR LPARENTHESIS assignation . SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE

    SEMICOLON       shift and go to state 174


state 146

    (97) for -> FOR LPARENTHESIS varType . ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (27) declaration -> varType . ID

    ID              shift and go to state 175


state 147

    (42) assignation -> ID . PLUS_EQUALS expression
    (43) assignation -> ID . MINUS_EQUALS expression
    (44) assignation -> ID . TIMES_EQUALS expression
    (45) assignation -> ID . DIVIDE_EQUALS expression
    (47) assignation -> ID . ASSIGN_OPERATOR variable

    PLUS_EQUALS     shift and go to state 81
    MINUS_EQUALS    shift and go to state 82
    TIMES_EQUALS    shift and go to state 83
    DIVIDE_EQUALS   shift and go to state 84
    ASSIGN_OPERATOR shift and go to state 176


state 148

    (46) assignation -> declaration . ASSIGN_OPERATOR variable

    ASSIGN_OPERATOR shift and go to state 62


state 149

    (120) print -> PRINT LPARENTHESIS variable . RPARENTHESIS SEMICOLON

    RPARENTHESIS    shift and go to state 177


state 150

    (122) class_def -> CLASS ID LBRACE . class_members RBRACE
    (123) class_members -> . class_members class_member
    (124) class_members -> . class_member
    (125) class_member -> . varType ID SEMICOLON
    (126) class_member -> . function
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL

    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    LIST_TYPE       shift and go to state 122
    MAP_TYPE        shift and go to state 123
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    ID              shift and go to state 178
    CONST           shift and go to state 44
    FINAL           shift and go to state 45

    class_members                  shift and go to state 179
    class_member                   shift and go to state 180
    varType                        shift and go to state 181
    function                       shift and go to state 182
    declaration                    shift and go to state 112
    declaration_modifier           shift and go to state 27

state 151

    (104) enum -> ENUM ID LBRACE . enum_values RBRACE
    (105) enum_values -> . enum_values COMMA ID
    (106) enum_values -> . ID

    ID              shift and go to state 183

    enum_values                    shift and go to state 184

state 152

    (107) try -> TRY LBRACE statements . RBRACE FINALLY LBRACE statements RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 185
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! RBRACE          [ reduce using rule 127 (empty -> .) ]
  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statement                      shift and go to state 56
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 153

    (108) switch -> SWITCH LPARENTHESIS variable . RPARENTHESIS LBRACE cases default_case RBRACE

    RPARENTHESIS    shift and go to state 186


state 154

    (100) function -> declaration LPARENTHESIS parameters RPARENTHESIS . LBRACE statements RBRACE
    (102) function -> declaration LPARENTHESIS parameters RPARENTHESIS . ARROW expression SEMICOLON

    LBRACE          shift and go to state 187
    ARROW           shift and go to state 188


state 155

    (115) parameters -> parameters COMMA . parameter
    (118) parameter -> . varType ID
    (119) parameter -> . variable
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    LIST_TYPE       shift and go to state 122
    MAP_TYPE        shift and go to state 123
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    parameter                      shift and go to state 189
    varType                        shift and go to state 120
    variable                       shift and go to state 121
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    factor                         shift and go to state 43

state 156

    (118) parameter -> varType ID .
    (27) declaration -> varType ID .

    RPARENTHESIS    reduce using rule 118 (parameter -> varType ID .)
    COMMA           reduce using rule 118 (parameter -> varType ID .)
    LPARENTHESIS    reduce using rule 27 (declaration -> varType ID .)


state 157

    (121) input -> ID ASSIGN_OPERATOR STDIN DOT . READ LPARENTHESIS RPARENTHESIS SEMICOLON

    READ            shift and go to state 190


state 158

    (101) function -> ID LPARENTHESIS parameters RPARENTHESIS .

    LBRACE          reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    CONTINUE        reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    BREAK           reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    LIST_TYPE       reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    MAP_TYPE        reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    ID              reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    IMPORT          reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    IF              reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    WHILE           reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    FOR             reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    PRINT           reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    CLASS           reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    ENUM            reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    TRY             reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    SWITCH          reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    RETURN          reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    CONST           reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    FINAL           reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    INT_TYPE        reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    STRING_TYPE     reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    NUM_TYPE        reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    DOUBLE_TYPE     reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    BOOL_TYPE       reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    SET_TYPE        reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    VAR             reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    VOID            reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    LPARENTHESIS    reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    MINUS           reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    INT             reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    DOUBLE          reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    $end            reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    RBRACE          reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    SEMICOLON       reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    COMMA           reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    EQUALS          reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    NOT_EQUALS      reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    GREATER_THAN    reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    LESS_THAN       reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    AND             reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    OR              reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    ELSE            reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    DEFAULT         reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    CASE            reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    COLON           reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    RBRACKET        reduce using rule 101 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)


state 159

    (75) factor -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    MODULE          reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    RPARENTHESIS    reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    NOT_EQUALS      reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    GREATER_THAN    reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    LESS_THAN       reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    GREATER_THAN_OR_EQUALS reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    LESS_THAN_OR_EQUALS reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    COLON           reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 75 (factor -> ID LBRACKET expression RBRACKET .)


state 160

    (28) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN . ID ASSIGN_OPERATOR list_literal

    ID              shift and go to state 191


state 161

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA . varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID

    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    LIST_TYPE       shift and go to state 78
    MAP_TYPE        shift and go to state 79
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53

    varType                        shift and go to state 192

state 162

    (90) booleanExpression -> LPARENTHESIS booleanExpression . RPARENTHESIS
    (88) booleanExpression -> booleanExpression . AND booleanExpression
    (89) booleanExpression -> booleanExpression . OR booleanExpression

    RPARENTHESIS    shift and go to state 193
    AND             shift and go to state 165
    OR              shift and go to state 166


state 163

    (78) factor -> LPARENTHESIS expression . RPARENTHESIS
    (68) expression -> expression . PLUS term
    (69) expression -> expression . MINUS term
    (67) variable -> expression .

  ! shift/reduce conflict for RPARENTHESIS resolved as shift
    RPARENTHESIS    shift and go to state 140
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    EQUALS          reduce using rule 67 (variable -> expression .)
    NOT_EQUALS      reduce using rule 67 (variable -> expression .)
    GREATER_THAN    reduce using rule 67 (variable -> expression .)
    LESS_THAN       reduce using rule 67 (variable -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 67 (variable -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 67 (variable -> expression .)
    AND             reduce using rule 67 (variable -> expression .)
    OR              reduce using rule 67 (variable -> expression .)

  ! RPARENTHESIS    [ reduce using rule 67 (variable -> expression .) ]


state 164

    (92) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS . statement
    (93) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS . statement ELSE statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    ELSE            reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    RBRACE          reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    DEFAULT         reduce using rule 127 (empty -> .)
    CASE            reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statement                      shift and go to state 194
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 165

    (88) booleanExpression -> booleanExpression AND . booleanExpression
    (82) booleanExpression -> . variable EQUALS variable
    (83) booleanExpression -> . variable NOT_EQUALS variable
    (84) booleanExpression -> . variable GREATER_THAN variable
    (85) booleanExpression -> . variable LESS_THAN variable
    (86) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (87) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (88) booleanExpression -> . booleanExpression AND booleanExpression
    (89) booleanExpression -> . booleanExpression OR booleanExpression
    (90) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (91) booleanExpression -> . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    LPARENTHESIS    shift and go to state 141
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    MINUS           shift and go to state 26

    booleanExpression              shift and go to state 195
    variable                       shift and go to state 143
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 166

    (89) booleanExpression -> booleanExpression OR . booleanExpression
    (82) booleanExpression -> . variable EQUALS variable
    (83) booleanExpression -> . variable NOT_EQUALS variable
    (84) booleanExpression -> . variable GREATER_THAN variable
    (85) booleanExpression -> . variable LESS_THAN variable
    (86) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (87) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (88) booleanExpression -> . booleanExpression AND booleanExpression
    (89) booleanExpression -> . booleanExpression OR booleanExpression
    (90) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (91) booleanExpression -> . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    LPARENTHESIS    shift and go to state 141
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    MINUS           shift and go to state 26

    booleanExpression              shift and go to state 196
    variable                       shift and go to state 143
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 167

    (82) booleanExpression -> variable EQUALS . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 197
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 168

    (83) booleanExpression -> variable NOT_EQUALS . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 198
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 169

    (84) booleanExpression -> variable GREATER_THAN . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 199
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 170

    (85) booleanExpression -> variable LESS_THAN . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 200
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 171

    (86) booleanExpression -> variable GREATER_THAN_OR_EQUALS . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 201
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 172

    (87) booleanExpression -> variable LESS_THAN_OR_EQUALS . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 202
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 173

    (94) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 203


state 174

    (95) for -> FOR LPARENTHESIS assignation SEMICOLON . booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> FOR LPARENTHESIS assignation SEMICOLON . booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (82) booleanExpression -> . variable EQUALS variable
    (83) booleanExpression -> . variable NOT_EQUALS variable
    (84) booleanExpression -> . variable GREATER_THAN variable
    (85) booleanExpression -> . variable LESS_THAN variable
    (86) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (87) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (88) booleanExpression -> . booleanExpression AND booleanExpression
    (89) booleanExpression -> . booleanExpression OR booleanExpression
    (90) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (91) booleanExpression -> . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    LPARENTHESIS    shift and go to state 141
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    MINUS           shift and go to state 26

    booleanExpression              shift and go to state 204
    variable                       shift and go to state 143
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 175

    (97) for -> FOR LPARENTHESIS varType ID . IN ID RPARENTHESIS LBRACE statements RBRACE
    (27) declaration -> varType ID .

    IN              shift and go to state 205
    ASSIGN_OPERATOR reduce using rule 27 (declaration -> varType ID .)


state 176

    (47) assignation -> ID ASSIGN_OPERATOR . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 132
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 177

    (120) print -> PRINT LPARENTHESIS variable RPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 206


state 178

    (101) function -> ID . LPARENTHESIS parameters RPARENTHESIS

    LPARENTHESIS    shift and go to state 88


state 179

    (122) class_def -> CLASS ID LBRACE class_members . RBRACE
    (123) class_members -> class_members . class_member
    (125) class_member -> . varType ID SEMICOLON
    (126) class_member -> . function
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL

    RBRACE          shift and go to state 207
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    LIST_TYPE       shift and go to state 122
    MAP_TYPE        shift and go to state 123
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    ID              shift and go to state 178
    CONST           shift and go to state 44
    FINAL           shift and go to state 45

    class_member                   shift and go to state 208
    varType                        shift and go to state 181
    function                       shift and go to state 182
    declaration                    shift and go to state 112
    declaration_modifier           shift and go to state 27

state 180

    (124) class_members -> class_member .

    RBRACE          reduce using rule 124 (class_members -> class_member .)
    INT_TYPE        reduce using rule 124 (class_members -> class_member .)
    STRING_TYPE     reduce using rule 124 (class_members -> class_member .)
    NUM_TYPE        reduce using rule 124 (class_members -> class_member .)
    DOUBLE_TYPE     reduce using rule 124 (class_members -> class_member .)
    BOOL_TYPE       reduce using rule 124 (class_members -> class_member .)
    LIST_TYPE       reduce using rule 124 (class_members -> class_member .)
    MAP_TYPE        reduce using rule 124 (class_members -> class_member .)
    SET_TYPE        reduce using rule 124 (class_members -> class_member .)
    VAR             reduce using rule 124 (class_members -> class_member .)
    VOID            reduce using rule 124 (class_members -> class_member .)
    ID              reduce using rule 124 (class_members -> class_member .)
    CONST           reduce using rule 124 (class_members -> class_member .)
    FINAL           reduce using rule 124 (class_members -> class_member .)


state 181

    (125) class_member -> varType . ID SEMICOLON
    (27) declaration -> varType . ID

    ID              shift and go to state 209


state 182

    (126) class_member -> function .

    RBRACE          reduce using rule 126 (class_member -> function .)
    INT_TYPE        reduce using rule 126 (class_member -> function .)
    STRING_TYPE     reduce using rule 126 (class_member -> function .)
    NUM_TYPE        reduce using rule 126 (class_member -> function .)
    DOUBLE_TYPE     reduce using rule 126 (class_member -> function .)
    BOOL_TYPE       reduce using rule 126 (class_member -> function .)
    LIST_TYPE       reduce using rule 126 (class_member -> function .)
    MAP_TYPE        reduce using rule 126 (class_member -> function .)
    SET_TYPE        reduce using rule 126 (class_member -> function .)
    VAR             reduce using rule 126 (class_member -> function .)
    VOID            reduce using rule 126 (class_member -> function .)
    ID              reduce using rule 126 (class_member -> function .)
    CONST           reduce using rule 126 (class_member -> function .)
    FINAL           reduce using rule 126 (class_member -> function .)


state 183

    (106) enum_values -> ID .

    RBRACE          reduce using rule 106 (enum_values -> ID .)
    COMMA           reduce using rule 106 (enum_values -> ID .)


state 184

    (104) enum -> ENUM ID LBRACE enum_values . RBRACE
    (105) enum_values -> enum_values . COMMA ID

    RBRACE          shift and go to state 210
    COMMA           shift and go to state 211


state 185

    (107) try -> TRY LBRACE statements RBRACE . FINALLY LBRACE statements RBRACE

    FINALLY         shift and go to state 212


state 186

    (108) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS . LBRACE cases default_case RBRACE

    LBRACE          shift and go to state 213


state 187

    (100) function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RBRACE          reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    declaration                    shift and go to state 6
    statements                     shift and go to state 214
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 188

    (102) function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW . expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    ID              shift and go to state 75
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

    expression                     shift and go to state 215
    term                           shift and go to state 25
    factor                         shift and go to state 43

state 189

    (115) parameters -> parameters COMMA parameter .

    RPARENTHESIS    reduce using rule 115 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 115 (parameters -> parameters COMMA parameter .)


state 190

    (121) input -> ID ASSIGN_OPERATOR STDIN DOT READ . LPARENTHESIS RPARENTHESIS SEMICOLON

    LPARENTHESIS    shift and go to state 216


state 191

    (28) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID . ASSIGN_OPERATOR list_literal

    ASSIGN_OPERATOR shift and go to state 217


state 192

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA varType . GREATER_THAN ID ASSIGN_OPERATOR map_literal

    GREATER_THAN    shift and go to state 218


state 193

    (90) booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .

    RPARENTHESIS    reduce using rule 90 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)
    AND             reduce using rule 90 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)
    OR              reduce using rule 90 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)
    SEMICOLON       reduce using rule 90 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)


state 194

    (92) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .
    (93) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement . ELSE statement

    LBRACE          reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    CONTINUE        reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    BREAK           reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    LIST_TYPE       reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    MAP_TYPE        reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    ID              reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    IMPORT          reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    IF              reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    WHILE           reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    FOR             reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    PRINT           reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    CLASS           reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    ENUM            reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    TRY             reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    SWITCH          reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    RETURN          reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    CONST           reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    FINAL           reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    INT_TYPE        reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    STRING_TYPE     reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    NUM_TYPE        reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    DOUBLE_TYPE     reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    BOOL_TYPE       reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    SET_TYPE        reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    VAR             reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    VOID            reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    LPARENTHESIS    reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    MINUS           reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    INT             reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    DOUBLE          reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    $end            reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    RBRACE          reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    SEMICOLON       reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    DEFAULT         reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    CASE            reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    ELSE            shift and go to state 219

  ! ELSE            [ reduce using rule 92 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .) ]


state 195

    (88) booleanExpression -> booleanExpression AND booleanExpression .
    (88) booleanExpression -> booleanExpression . AND booleanExpression
    (89) booleanExpression -> booleanExpression . OR booleanExpression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPARENTHESIS    reduce using rule 88 (booleanExpression -> booleanExpression AND booleanExpression .)
    SEMICOLON       reduce using rule 88 (booleanExpression -> booleanExpression AND booleanExpression .)
    AND             shift and go to state 165
    OR              shift and go to state 166

  ! AND             [ reduce using rule 88 (booleanExpression -> booleanExpression AND booleanExpression .) ]
  ! OR              [ reduce using rule 88 (booleanExpression -> booleanExpression AND booleanExpression .) ]


state 196

    (89) booleanExpression -> booleanExpression OR booleanExpression .
    (88) booleanExpression -> booleanExpression . AND booleanExpression
    (89) booleanExpression -> booleanExpression . OR booleanExpression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPARENTHESIS    reduce using rule 89 (booleanExpression -> booleanExpression OR booleanExpression .)
    SEMICOLON       reduce using rule 89 (booleanExpression -> booleanExpression OR booleanExpression .)
    AND             shift and go to state 165
    OR              shift and go to state 166

  ! AND             [ reduce using rule 89 (booleanExpression -> booleanExpression OR booleanExpression .) ]
  ! OR              [ reduce using rule 89 (booleanExpression -> booleanExpression OR booleanExpression .) ]


state 197

    (82) booleanExpression -> variable EQUALS variable .

    RPARENTHESIS    reduce using rule 82 (booleanExpression -> variable EQUALS variable .)
    AND             reduce using rule 82 (booleanExpression -> variable EQUALS variable .)
    OR              reduce using rule 82 (booleanExpression -> variable EQUALS variable .)
    SEMICOLON       reduce using rule 82 (booleanExpression -> variable EQUALS variable .)


state 198

    (83) booleanExpression -> variable NOT_EQUALS variable .

    RPARENTHESIS    reduce using rule 83 (booleanExpression -> variable NOT_EQUALS variable .)
    AND             reduce using rule 83 (booleanExpression -> variable NOT_EQUALS variable .)
    OR              reduce using rule 83 (booleanExpression -> variable NOT_EQUALS variable .)
    SEMICOLON       reduce using rule 83 (booleanExpression -> variable NOT_EQUALS variable .)


state 199

    (84) booleanExpression -> variable GREATER_THAN variable .

    RPARENTHESIS    reduce using rule 84 (booleanExpression -> variable GREATER_THAN variable .)
    AND             reduce using rule 84 (booleanExpression -> variable GREATER_THAN variable .)
    OR              reduce using rule 84 (booleanExpression -> variable GREATER_THAN variable .)
    SEMICOLON       reduce using rule 84 (booleanExpression -> variable GREATER_THAN variable .)


state 200

    (85) booleanExpression -> variable LESS_THAN variable .

    RPARENTHESIS    reduce using rule 85 (booleanExpression -> variable LESS_THAN variable .)
    AND             reduce using rule 85 (booleanExpression -> variable LESS_THAN variable .)
    OR              reduce using rule 85 (booleanExpression -> variable LESS_THAN variable .)
    SEMICOLON       reduce using rule 85 (booleanExpression -> variable LESS_THAN variable .)


state 201

    (86) booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 86 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    AND             reduce using rule 86 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    OR              reduce using rule 86 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    SEMICOLON       reduce using rule 86 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)


state 202

    (87) booleanExpression -> variable LESS_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 87 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    AND             reduce using rule 87 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    OR              reduce using rule 87 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    SEMICOLON       reduce using rule 87 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)


state 203

    (94) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RBRACE          reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statements                     shift and go to state 220
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 204

    (95) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression . SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression . SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (88) booleanExpression -> booleanExpression . AND booleanExpression
    (89) booleanExpression -> booleanExpression . OR booleanExpression

    SEMICOLON       shift and go to state 221
    AND             shift and go to state 165
    OR              shift and go to state 166


state 205

    (97) for -> FOR LPARENTHESIS varType ID IN . ID RPARENTHESIS LBRACE statements RBRACE

    ID              shift and go to state 222


state 206

    (120) print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .

    LBRACE          reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    LIST_TYPE       reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    MAP_TYPE        reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    ID              reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    IMPORT          reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    IF              reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    ENUM            reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    TRY             reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    CONST           reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    INT_TYPE        reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    STRING_TYPE     reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    NUM_TYPE        reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    BOOL_TYPE       reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    SET_TYPE        reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    VAR             reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    VOID            reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    LPARENTHESIS    reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    MINUS           reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    INT             reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    DOUBLE          reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    $end            reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    RBRACE          reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    DEFAULT         reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    CASE            reduce using rule 120 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)


state 207

    (122) class_def -> CLASS ID LBRACE class_members RBRACE .

    LBRACE          reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    CONTINUE        reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    BREAK           reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    LIST_TYPE       reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    MAP_TYPE        reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    ID              reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    IMPORT          reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    IF              reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    WHILE           reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    FOR             reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    PRINT           reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    CLASS           reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    ENUM            reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    TRY             reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    SWITCH          reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    RETURN          reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    CONST           reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    FINAL           reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    INT_TYPE        reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    STRING_TYPE     reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    NUM_TYPE        reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    DOUBLE_TYPE     reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    BOOL_TYPE       reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    SET_TYPE        reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    VAR             reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    VOID            reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    LPARENTHESIS    reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    MINUS           reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    INT             reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    DOUBLE          reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    $end            reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    RBRACE          reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    ELSE            reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    SEMICOLON       reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    DEFAULT         reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    CASE            reduce using rule 122 (class_def -> CLASS ID LBRACE class_members RBRACE .)


state 208

    (123) class_members -> class_members class_member .

    RBRACE          reduce using rule 123 (class_members -> class_members class_member .)
    INT_TYPE        reduce using rule 123 (class_members -> class_members class_member .)
    STRING_TYPE     reduce using rule 123 (class_members -> class_members class_member .)
    NUM_TYPE        reduce using rule 123 (class_members -> class_members class_member .)
    DOUBLE_TYPE     reduce using rule 123 (class_members -> class_members class_member .)
    BOOL_TYPE       reduce using rule 123 (class_members -> class_members class_member .)
    LIST_TYPE       reduce using rule 123 (class_members -> class_members class_member .)
    MAP_TYPE        reduce using rule 123 (class_members -> class_members class_member .)
    SET_TYPE        reduce using rule 123 (class_members -> class_members class_member .)
    VAR             reduce using rule 123 (class_members -> class_members class_member .)
    VOID            reduce using rule 123 (class_members -> class_members class_member .)
    ID              reduce using rule 123 (class_members -> class_members class_member .)
    CONST           reduce using rule 123 (class_members -> class_members class_member .)
    FINAL           reduce using rule 123 (class_members -> class_members class_member .)


state 209

    (125) class_member -> varType ID . SEMICOLON
    (27) declaration -> varType ID .

    SEMICOLON       shift and go to state 223
    LPARENTHESIS    reduce using rule 27 (declaration -> varType ID .)


state 210

    (104) enum -> ENUM ID LBRACE enum_values RBRACE .

    LBRACE          reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    CONTINUE        reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    BREAK           reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    LIST_TYPE       reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    MAP_TYPE        reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    ID              reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    IMPORT          reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    IF              reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    WHILE           reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    FOR             reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    PRINT           reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    CLASS           reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    ENUM            reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    TRY             reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    SWITCH          reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    RETURN          reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    CONST           reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    FINAL           reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    INT_TYPE        reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    STRING_TYPE     reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    NUM_TYPE        reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    DOUBLE_TYPE     reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    BOOL_TYPE       reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    SET_TYPE        reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    VAR             reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    VOID            reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    LPARENTHESIS    reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    MINUS           reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    INT             reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    DOUBLE          reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    $end            reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    RBRACE          reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    ELSE            reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    SEMICOLON       reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    DEFAULT         reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    CASE            reduce using rule 104 (enum -> ENUM ID LBRACE enum_values RBRACE .)


state 211

    (105) enum_values -> enum_values COMMA . ID

    ID              shift and go to state 224


state 212

    (107) try -> TRY LBRACE statements RBRACE FINALLY . LBRACE statements RBRACE

    LBRACE          shift and go to state 225


state 213

    (108) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE . cases default_case RBRACE
    (109) cases -> . cases case
    (110) cases -> . case
    (111) case -> . CASE variable COLON statements BREAK
    (112) case -> . CASE variable COLON statements SEMICOLON
    (113) case -> . CASE variable COLON statements

    CASE            shift and go to state 228

    cases                          shift and go to state 226
    case                           shift and go to state 227

state 214

    (100) function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 229
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! RBRACE          [ reduce using rule 127 (empty -> .) ]
  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    declaration                    shift and go to state 6
    statement                      shift and go to state 56
    expression                     shift and go to state 5
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 215

    (102) function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression . SEMICOLON
    (68) expression -> expression . PLUS term
    (69) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 230
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60


state 216

    (121) input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS . RPARENTHESIS SEMICOLON

    RPARENTHESIS    shift and go to state 231


state 217

    (28) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR . list_literal
    (29) list_literal -> . LBRACKET list_elements RBRACKET

    LBRACKET        shift and go to state 233

    list_literal                   shift and go to state 232

state 218

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN . ID ASSIGN_OPERATOR map_literal

    ID              shift and go to state 234


state 219

    (93) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    ELSE            reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    RBRACE          reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    DEFAULT         reduce using rule 127 (empty -> .)
    CASE            reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statement                      shift and go to state 235
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 220

    (94) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 236
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! RBRACE          [ reduce using rule 127 (empty -> .) ]
  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statement                      shift and go to state 56
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 221

    (95) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON . increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON . decrement RPARENTHESIS LBRACE statements RBRACE
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT

    ID              shift and go to state 239

    increment                      shift and go to state 237
    decrement                      shift and go to state 238

state 222

    (97) for -> FOR LPARENTHESIS varType ID IN ID . RPARENTHESIS LBRACE statements RBRACE

    RPARENTHESIS    shift and go to state 240


state 223

    (125) class_member -> varType ID SEMICOLON .

    RBRACE          reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    INT_TYPE        reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    STRING_TYPE     reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    NUM_TYPE        reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    BOOL_TYPE       reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    LIST_TYPE       reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    MAP_TYPE        reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    SET_TYPE        reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    VAR             reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    VOID            reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    ID              reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    CONST           reduce using rule 125 (class_member -> varType ID SEMICOLON .)
    FINAL           reduce using rule 125 (class_member -> varType ID SEMICOLON .)


state 224

    (105) enum_values -> enum_values COMMA ID .

    RBRACE          reduce using rule 105 (enum_values -> enum_values COMMA ID .)
    COMMA           reduce using rule 105 (enum_values -> enum_values COMMA ID .)


state 225

    (107) try -> TRY LBRACE statements RBRACE FINALLY LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RBRACE          reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statements                     shift and go to state 241
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 226

    (108) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases . default_case RBRACE
    (109) cases -> cases . case
    (114) default_case -> . DEFAULT COLON statements
    (111) case -> . CASE variable COLON statements BREAK
    (112) case -> . CASE variable COLON statements SEMICOLON
    (113) case -> . CASE variable COLON statements

    DEFAULT         shift and go to state 244
    CASE            shift and go to state 228

    default_case                   shift and go to state 242
    case                           shift and go to state 243

state 227

    (110) cases -> case .

    DEFAULT         reduce using rule 110 (cases -> case .)
    CASE            reduce using rule 110 (cases -> case .)


state 228

    (111) case -> CASE . variable COLON statements BREAK
    (112) case -> CASE . variable COLON statements SEMICOLON
    (113) case -> CASE . variable COLON statements
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 245
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 229

    (100) function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RETURN          reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    MINUS           reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RPARENTHESIS    reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    COMMA           reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    EQUALS          reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    NOT_EQUALS      reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN    reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN       reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    AND             reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    OR              reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    CASE            reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    COLON           reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RBRACKET        reduce using rule 100 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)


state 230

    (102) function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .

    LBRACE          reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    CONTINUE        reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    BREAK           reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    LIST_TYPE       reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    MAP_TYPE        reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    ID              reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    IMPORT          reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    IF              reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    WHILE           reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    FOR             reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    PRINT           reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    CLASS           reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    ENUM            reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    TRY             reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    SWITCH          reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    RETURN          reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    CONST           reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    FINAL           reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    INT_TYPE        reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    STRING_TYPE     reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    NUM_TYPE        reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    SET_TYPE        reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    VAR             reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    VOID            reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    LPARENTHESIS    reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    MINUS           reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    INT             reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    DOUBLE          reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    $end            reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    RBRACE          reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    SEMICOLON       reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    RPARENTHESIS    reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    COMMA           reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    EQUALS          reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    NOT_EQUALS      reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    GREATER_THAN    reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    LESS_THAN       reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    AND             reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    OR              reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    ELSE            reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    DEFAULT         reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    CASE            reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    COLON           reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    RBRACKET        reduce using rule 102 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)


state 231

    (121) input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 246


state 232

    (28) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .

    SEMICOLON       reduce using rule 28 (declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)
    ASSIGN_OPERATOR reduce using rule 28 (declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)
    LPARENTHESIS    reduce using rule 28 (declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)


state 233

    (29) list_literal -> LBRACKET . list_elements RBRACKET
    (30) list_elements -> . list_elements COMMA variable
    (31) list_elements -> . variable
    (32) list_elements -> . empty
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (127) empty -> .
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    RBRACKET        reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    list_elements                  shift and go to state 247
    variable                       shift and go to state 248
    empty                          shift and go to state 249
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 234

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID . ASSIGN_OPERATOR map_literal

    ASSIGN_OPERATOR shift and go to state 250


state 235

    (93) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .

    LBRACE          reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CONTINUE        reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    BREAK           reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LIST_TYPE       reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    MAP_TYPE        reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ID              reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    IMPORT          reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    IF              reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    WHILE           reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    FOR             reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    PRINT           reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CLASS           reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ENUM            reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    TRY             reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    SWITCH          reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    RETURN          reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CONST           reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    FINAL           reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    INT_TYPE        reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    STRING_TYPE     reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    NUM_TYPE        reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DOUBLE_TYPE     reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    BOOL_TYPE       reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    SET_TYPE        reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    VAR             reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    VOID            reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LPARENTHESIS    reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    MINUS           reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    INT             reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DOUBLE          reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    $end            reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    RBRACE          reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ELSE            reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    SEMICOLON       reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DEFAULT         reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CASE            reduce using rule 93 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)


state 236

    (94) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    RETURN          reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    MINUS           reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    CASE            reduce using rule 94 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)


state 237

    (95) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment . RPARENTHESIS LBRACE statements RBRACE

    RPARENTHESIS    shift and go to state 251


state 238

    (96) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement . RPARENTHESIS LBRACE statements RBRACE

    RPARENTHESIS    shift and go to state 252


state 239

    (98) increment -> ID . INCREMENT
    (99) decrement -> ID . DECREMENT

    INCREMENT       shift and go to state 86
    DECREMENT       shift and go to state 87


state 240

    (97) for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 253


state 241

    (107) try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 254
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! RBRACE          [ reduce using rule 127 (empty -> .) ]
  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statement                      shift and go to state 56
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 242

    (108) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case . RBRACE

    RBRACE          shift and go to state 255


state 243

    (109) cases -> cases case .

    DEFAULT         reduce using rule 109 (cases -> cases case .)
    CASE            reduce using rule 109 (cases -> cases case .)


state 244

    (114) default_case -> DEFAULT . COLON statements

    COLON           shift and go to state 256


state 245

    (111) case -> CASE variable . COLON statements BREAK
    (112) case -> CASE variable . COLON statements SEMICOLON
    (113) case -> CASE variable . COLON statements

    COLON           shift and go to state 257


state 246

    (121) input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .

    LBRACE          reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    LIST_TYPE       reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    MAP_TYPE        reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    ID              reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    IMPORT          reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    IF              reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    ENUM            reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    TRY             reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    CONST           reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    INT_TYPE        reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    STRING_TYPE     reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    NUM_TYPE        reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    BOOL_TYPE       reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    SET_TYPE        reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    VAR             reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    VOID            reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    LPARENTHESIS    reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    MINUS           reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    INT             reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    DOUBLE          reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    $end            reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    RBRACE          reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    DEFAULT         reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    CASE            reduce using rule 121 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)


state 247

    (29) list_literal -> LBRACKET list_elements . RBRACKET
    (30) list_elements -> list_elements . COMMA variable

    RBRACKET        shift and go to state 258
    COMMA           shift and go to state 259


state 248

    (31) list_elements -> variable .

    RBRACKET        reduce using rule 31 (list_elements -> variable .)
    COMMA           reduce using rule 31 (list_elements -> variable .)


state 249

    (32) list_elements -> empty .

    RBRACKET        reduce using rule 32 (list_elements -> empty .)
    COMMA           reduce using rule 32 (list_elements -> empty .)


state 250

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR . map_literal
    (34) map_literal -> . LBRACE map_elements RBRACE

    LBRACE          shift and go to state 261

    map_literal                    shift and go to state 260

state 251

    (95) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 262


state 252

    (96) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 263


state 253

    (97) for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RBRACE          reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    varType                        shift and go to state 28
    statements                     shift and go to state 264
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    factor                         shift and go to state 43

state 254

    (107) try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .

    LBRACE          reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    BREAK           reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    ID              reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    IMPORT          reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    IF              reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    WHILE           reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    FOR             reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    PRINT           reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    CLASS           reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    ENUM            reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    TRY             reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    SWITCH          reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    RETURN          reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    CONST           reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    FINAL           reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    VAR             reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    VOID            reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    MINUS           reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    INT             reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    $end            reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    RBRACE          reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    ELSE            reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    CASE            reduce using rule 107 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)


state 255

    (108) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .

    LBRACE          reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    CONTINUE        reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    BREAK           reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    LIST_TYPE       reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    MAP_TYPE        reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    ID              reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    IMPORT          reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    IF              reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    WHILE           reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    FOR             reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    PRINT           reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    CLASS           reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    ENUM            reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    TRY             reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    SWITCH          reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    RETURN          reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    CONST           reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    FINAL           reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    INT_TYPE        reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    STRING_TYPE     reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    NUM_TYPE        reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    DOUBLE_TYPE     reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    BOOL_TYPE       reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    SET_TYPE        reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    VAR             reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    VOID            reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    LPARENTHESIS    reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    MINUS           reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    INT             reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    DOUBLE          reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    $end            reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    RBRACE          reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    ELSE            reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    SEMICOLON       reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    DEFAULT         reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    CASE            reduce using rule 108 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)


state 256

    (114) default_case -> DEFAULT COLON . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RBRACE          reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statements                     shift and go to state 265
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 257

    (111) case -> CASE variable COLON . statements BREAK
    (112) case -> CASE variable COLON . statements SEMICOLON
    (113) case -> CASE variable COLON . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    SEMICOLON       reduce using rule 127 (empty -> .)
    DEFAULT         reduce using rule 127 (empty -> .)
    CASE            reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    statements                     shift and go to state 266
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 258

    (29) list_literal -> LBRACKET list_elements RBRACKET .

    SEMICOLON       reduce using rule 29 (list_literal -> LBRACKET list_elements RBRACKET .)
    ASSIGN_OPERATOR reduce using rule 29 (list_literal -> LBRACKET list_elements RBRACKET .)
    LPARENTHESIS    reduce using rule 29 (list_literal -> LBRACKET list_elements RBRACKET .)


state 259

    (30) list_elements -> list_elements COMMA . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 267
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 260

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .

    SEMICOLON       reduce using rule 33 (declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)
    ASSIGN_OPERATOR reduce using rule 33 (declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)
    LPARENTHESIS    reduce using rule 33 (declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)


state 261

    (34) map_literal -> LBRACE . map_elements RBRACE
    (35) map_elements -> . map_elements COMMA map_pair
    (36) map_elements -> . map_pair
    (37) map_elements -> . empty
    (38) map_pair -> . variable COLON variable
    (127) empty -> .
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    RBRACE          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    map_elements                   shift and go to state 268
    map_pair                       shift and go to state 269
    empty                          shift and go to state 270
    variable                       shift and go to state 271
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 262

    (95) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RBRACE          reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    statements                     shift and go to state 272
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 263

    (96) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RBRACE          reduce using rule 127 (empty -> .)
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    assignation                    shift and go to state 7
    decrement                      shift and go to state 9
    statements                     shift and go to state 273
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    increment                      shift and go to state 8
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 264

    (97) for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 274
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! RBRACE          [ reduce using rule 127 (empty -> .) ]
  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    varType                        shift and go to state 28
    statement                      shift and go to state 56
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    factor                         shift and go to state 43

state 265

    (114) default_case -> DEFAULT COLON statements .
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! reduce/reduce conflict for RBRACE resolved using rule 114 (default_case -> DEFAULT COLON statements .)
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          reduce using rule 114 (default_case -> DEFAULT COLON statements .)
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]
  ! RBRACE          [ reduce using rule 127 (empty -> .) ]

    statement                      shift and go to state 56
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 266

    (111) case -> CASE variable COLON statements . BREAK
    (112) case -> CASE variable COLON statements . SEMICOLON
    (113) case -> CASE variable COLON statements .
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! reduce/reduce conflict for DEFAULT resolved using rule 113 (case -> CASE variable COLON statements .)
  ! reduce/reduce conflict for CASE resolved using rule 113 (case -> CASE variable COLON statements .)
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    BREAK           shift and go to state 275
    SEMICOLON       shift and go to state 276
    DEFAULT         reduce using rule 113 (case -> CASE variable COLON statements .)
    CASE            reduce using rule 113 (case -> CASE variable COLON statements .)
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 127 (empty -> .) ]
  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 127 (empty -> .) ]
  ! CASE            [ reduce using rule 127 (empty -> .) ]

    statement                      shift and go to state 56
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 267

    (30) list_elements -> list_elements COMMA variable .

    RBRACKET        reduce using rule 30 (list_elements -> list_elements COMMA variable .)
    COMMA           reduce using rule 30 (list_elements -> list_elements COMMA variable .)


state 268

    (34) map_literal -> LBRACE map_elements . RBRACE
    (35) map_elements -> map_elements . COMMA map_pair

    RBRACE          shift and go to state 277
    COMMA           shift and go to state 278


state 269

    (36) map_elements -> map_pair .

    RBRACE          reduce using rule 36 (map_elements -> map_pair .)
    COMMA           reduce using rule 36 (map_elements -> map_pair .)


state 270

    (37) map_elements -> empty .

    RBRACE          reduce using rule 37 (map_elements -> empty .)
    COMMA           reduce using rule 37 (map_elements -> empty .)


state 271

    (38) map_pair -> variable . COLON variable

    COLON           shift and go to state 279


state 272

    (95) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 280
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! RBRACE          [ reduce using rule 127 (empty -> .) ]
  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    statement                      shift and go to state 56
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 273

    (96) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (42) assignation -> . ID PLUS_EQUALS expression
    (43) assignation -> . ID MINUS_EQUALS expression
    (44) assignation -> . ID TIMES_EQUALS expression
    (45) assignation -> . ID DIVIDE_EQUALS expression
    (46) assignation -> . declaration ASSIGN_OPERATOR variable
    (47) assignation -> . ID ASSIGN_OPERATOR variable
    (98) increment -> . ID INCREMENT
    (99) decrement -> . ID DECREMENT
    (39) import -> . IMPORT STRING SEMICOLON
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (92) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (93) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (94) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (95) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (96) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (97) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (120) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (121) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (122) class_def -> . CLASS ID LBRACE class_members RBRACE
    (104) enum -> . ENUM ID LBRACE enum_values RBRACE
    (107) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (108) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (127) empty -> .
    (40) return -> . RETURN variable
    (41) return -> . RETURN
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 281
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    ID              shift and go to state 29
    IMPORT          shift and go to state 32
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    FOR             shift and go to state 36
    PRINT           shift and go to state 37
    CLASS           shift and go to state 38
    ENUM            shift and go to state 39
    TRY             shift and go to state 40
    SWITCH          shift and go to state 41
    RETURN          shift and go to state 42
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26
    INT             shift and go to state 54
    DOUBLE          shift and go to state 55

  ! RBRACE          [ reduce using rule 127 (empty -> .) ]
  ! LBRACE          [ reduce using rule 127 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 127 (empty -> .) ]
  ! BREAK           [ reduce using rule 127 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]
  ! IMPORT          [ reduce using rule 127 (empty -> .) ]
  ! IF              [ reduce using rule 127 (empty -> .) ]
  ! WHILE           [ reduce using rule 127 (empty -> .) ]
  ! FOR             [ reduce using rule 127 (empty -> .) ]
  ! PRINT           [ reduce using rule 127 (empty -> .) ]
  ! CLASS           [ reduce using rule 127 (empty -> .) ]
  ! ENUM            [ reduce using rule 127 (empty -> .) ]
  ! TRY             [ reduce using rule 127 (empty -> .) ]
  ! SWITCH          [ reduce using rule 127 (empty -> .) ]
  ! RETURN          [ reduce using rule 127 (empty -> .) ]
  ! CONST           [ reduce using rule 127 (empty -> .) ]
  ! FINAL           [ reduce using rule 127 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 127 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 127 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 127 (empty -> .) ]
  ! VAR             [ reduce using rule 127 (empty -> .) ]
  ! VOID            [ reduce using rule 127 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 127 (empty -> .) ]
  ! MINUS           [ reduce using rule 127 (empty -> .) ]
  ! INT             [ reduce using rule 127 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 127 (empty -> .) ]

    assignation                    shift and go to state 7
    decrement                      shift and go to state 9
    statement                      shift and go to state 56
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    increment                      shift and go to state 8
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 274

    (97) for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    RETURN          reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    MINUS           reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    CASE            reduce using rule 97 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)


state 275

    (111) case -> CASE variable COLON statements BREAK .
    (24) statement -> BREAK . SEMICOLON

    DEFAULT         reduce using rule 111 (case -> CASE variable COLON statements BREAK .)
    CASE            reduce using rule 111 (case -> CASE variable COLON statements BREAK .)
    SEMICOLON       shift and go to state 70


state 276

    (112) case -> CASE variable COLON statements SEMICOLON .

    DEFAULT         reduce using rule 112 (case -> CASE variable COLON statements SEMICOLON .)
    CASE            reduce using rule 112 (case -> CASE variable COLON statements SEMICOLON .)


state 277

    (34) map_literal -> LBRACE map_elements RBRACE .

    SEMICOLON       reduce using rule 34 (map_literal -> LBRACE map_elements RBRACE .)
    ASSIGN_OPERATOR reduce using rule 34 (map_literal -> LBRACE map_elements RBRACE .)
    LPARENTHESIS    reduce using rule 34 (map_literal -> LBRACE map_elements RBRACE .)


state 278

    (35) map_elements -> map_elements COMMA . map_pair
    (38) map_pair -> . variable COLON variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    map_pair                       shift and go to state 282
    variable                       shift and go to state 271
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 279

    (38) map_pair -> variable COLON . variable
    (60) variable -> . INT
    (61) variable -> . DOUBLE
    (62) variable -> . STRING
    (63) variable -> . BOOL
    (64) variable -> . NULL
    (65) variable -> . ID
    (66) variable -> . function
    (67) variable -> . expression
    (100) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (101) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (102) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (68) expression -> . expression PLUS term
    (69) expression -> . expression MINUS term
    (70) expression -> . term
    (25) declaration -> . declaration_modifier varType ID
    (26) declaration -> . declaration_modifier ID
    (27) declaration -> . varType ID
    (28) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (71) term -> . term TIMES factor
    (72) term -> . term DIVIDE factor
    (73) term -> . term MODULE factor
    (74) term -> . factor
    (58) declaration_modifier -> . CONST
    (59) declaration_modifier -> . FINAL
    (48) varType -> . INT_TYPE
    (49) varType -> . STRING_TYPE
    (50) varType -> . NUM_TYPE
    (51) varType -> . DOUBLE_TYPE
    (52) varType -> . BOOL_TYPE
    (53) varType -> . LIST_TYPE
    (54) varType -> . MAP_TYPE
    (55) varType -> . SET_TYPE
    (56) varType -> . VAR
    (57) varType -> . VOID
    (75) factor -> . ID LBRACKET expression RBRACKET
    (76) factor -> . ID DOT ID
    (77) factor -> . ID
    (78) factor -> . LPARENTHESIS expression RPARENTHESIS
    (79) factor -> . MINUS factor
    (80) factor -> . INT
    (81) factor -> . DOUBLE

    INT             shift and go to state 104
    DOUBLE          shift and go to state 105
    STRING          shift and go to state 106
    BOOL            shift and go to state 107
    NULL            shift and go to state 108
    ID              shift and go to state 109
    LIST_TYPE       shift and go to state 30
    MAP_TYPE        shift and go to state 31
    CONST           shift and go to state 44
    FINAL           shift and go to state 45
    INT_TYPE        shift and go to state 46
    STRING_TYPE     shift and go to state 47
    NUM_TYPE        shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    BOOL_TYPE       shift and go to state 50
    SET_TYPE        shift and go to state 51
    VAR             shift and go to state 52
    VOID            shift and go to state 53
    LPARENTHESIS    shift and go to state 33
    MINUS           shift and go to state 26

    variable                       shift and go to state 283
    function                       shift and go to state 110
    expression                     shift and go to state 111
    declaration                    shift and go to state 112
    term                           shift and go to state 25
    declaration_modifier           shift and go to state 27
    varType                        shift and go to state 28
    factor                         shift and go to state 43

state 280

    (95) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    RETURN          reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    MINUS           reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    CASE            reduce using rule 95 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)


state 281

    (96) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    RETURN          reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    MINUS           reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    CASE            reduce using rule 96 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)


state 282

    (35) map_elements -> map_elements COMMA map_pair .

    RBRACE          reduce using rule 35 (map_elements -> map_elements COMMA map_pair .)
    COMMA           reduce using rule 35 (map_elements -> map_elements COMMA map_pair .)


state 283

    (38) map_pair -> variable COLON variable .

    RBRACE          reduce using rule 38 (map_pair -> variable COLON variable .)
    COMMA           reduce using rule 38 (map_pair -> variable COLON variable .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACE in state 0 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 0 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 0 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 2 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 2 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 2 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 2 resolved as shift
WARNING: shift/reduce conflict for TRY in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 2 resolved as shift
WARNING: shift/reduce conflict for CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 2 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for VOID in state 2 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 2 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 2 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 4 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 4 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 4 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 4 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 4 resolved as shift
WARNING: shift/reduce conflict for TRY in state 4 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 4 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 4 resolved as shift
WARNING: shift/reduce conflict for CONST in state 4 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 4 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for VAR in state 4 resolved as shift
WARNING: shift/reduce conflict for VOID in state 4 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for INT in state 4 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 4 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 57 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 57 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 57 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 57 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 57 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 57 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 57 resolved as shift
WARNING: shift/reduce conflict for IF in state 57 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 57 resolved as shift
WARNING: shift/reduce conflict for FOR in state 57 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 57 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 57 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 57 resolved as shift
WARNING: shift/reduce conflict for TRY in state 57 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 57 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 57 resolved as shift
WARNING: shift/reduce conflict for CONST in state 57 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 57 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 57 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 57 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 57 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 57 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 57 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 57 resolved as shift
WARNING: shift/reduce conflict for VAR in state 57 resolved as shift
WARNING: shift/reduce conflict for VOID in state 57 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for INT in state 57 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 57 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 101 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 101 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 101 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 101 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 101 resolved as shift
WARNING: shift/reduce conflict for IF in state 101 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 101 resolved as shift
WARNING: shift/reduce conflict for FOR in state 101 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 101 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 101 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 101 resolved as shift
WARNING: shift/reduce conflict for TRY in state 101 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 101 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 101 resolved as shift
WARNING: shift/reduce conflict for CONST in state 101 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 101 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 101 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 101 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 101 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 101 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 101 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 101 resolved as shift
WARNING: shift/reduce conflict for VAR in state 101 resolved as shift
WARNING: shift/reduce conflict for VOID in state 101 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for INT in state 101 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 101 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 152 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 152 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 152 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 152 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 152 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 152 resolved as shift
WARNING: shift/reduce conflict for ID in state 152 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 152 resolved as shift
WARNING: shift/reduce conflict for IF in state 152 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 152 resolved as shift
WARNING: shift/reduce conflict for FOR in state 152 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 152 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 152 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 152 resolved as shift
WARNING: shift/reduce conflict for TRY in state 152 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 152 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 152 resolved as shift
WARNING: shift/reduce conflict for CONST in state 152 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 152 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 152 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 152 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 152 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 152 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 152 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 152 resolved as shift
WARNING: shift/reduce conflict for VAR in state 152 resolved as shift
WARNING: shift/reduce conflict for VOID in state 152 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for INT in state 152 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 152 resolved as shift
WARNING: shift/reduce conflict for RPARENTHESIS in state 163 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 164 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 164 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 164 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 164 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 164 resolved as shift
WARNING: shift/reduce conflict for ID in state 164 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 164 resolved as shift
WARNING: shift/reduce conflict for IF in state 164 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 164 resolved as shift
WARNING: shift/reduce conflict for FOR in state 164 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 164 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 164 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 164 resolved as shift
WARNING: shift/reduce conflict for TRY in state 164 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 164 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 164 resolved as shift
WARNING: shift/reduce conflict for CONST in state 164 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 164 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 164 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 164 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 164 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 164 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 164 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 164 resolved as shift
WARNING: shift/reduce conflict for VAR in state 164 resolved as shift
WARNING: shift/reduce conflict for VOID in state 164 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 164 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: shift/reduce conflict for INT in state 164 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 164 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 187 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 187 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 187 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 187 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 187 resolved as shift
WARNING: shift/reduce conflict for ID in state 187 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 187 resolved as shift
WARNING: shift/reduce conflict for IF in state 187 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 187 resolved as shift
WARNING: shift/reduce conflict for FOR in state 187 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 187 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 187 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 187 resolved as shift
WARNING: shift/reduce conflict for TRY in state 187 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 187 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 187 resolved as shift
WARNING: shift/reduce conflict for CONST in state 187 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 187 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 187 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 187 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 187 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 187 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 187 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 187 resolved as shift
WARNING: shift/reduce conflict for VAR in state 187 resolved as shift
WARNING: shift/reduce conflict for VOID in state 187 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for INT in state 187 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 187 resolved as shift
WARNING: shift/reduce conflict for AND in state 195 resolved as shift
WARNING: shift/reduce conflict for OR in state 195 resolved as shift
WARNING: shift/reduce conflict for AND in state 196 resolved as shift
WARNING: shift/reduce conflict for OR in state 196 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 203 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 203 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 203 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 203 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 203 resolved as shift
WARNING: shift/reduce conflict for ID in state 203 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 203 resolved as shift
WARNING: shift/reduce conflict for IF in state 203 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 203 resolved as shift
WARNING: shift/reduce conflict for FOR in state 203 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 203 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 203 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 203 resolved as shift
WARNING: shift/reduce conflict for TRY in state 203 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 203 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 203 resolved as shift
WARNING: shift/reduce conflict for CONST in state 203 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 203 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 203 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 203 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 203 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 203 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 203 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 203 resolved as shift
WARNING: shift/reduce conflict for VAR in state 203 resolved as shift
WARNING: shift/reduce conflict for VOID in state 203 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 203 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 203 resolved as shift
WARNING: shift/reduce conflict for INT in state 203 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 203 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 214 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 214 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 214 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 214 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 214 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 214 resolved as shift
WARNING: shift/reduce conflict for ID in state 214 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 214 resolved as shift
WARNING: shift/reduce conflict for IF in state 214 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 214 resolved as shift
WARNING: shift/reduce conflict for FOR in state 214 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 214 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 214 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 214 resolved as shift
WARNING: shift/reduce conflict for TRY in state 214 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 214 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 214 resolved as shift
WARNING: shift/reduce conflict for CONST in state 214 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 214 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 214 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 214 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 214 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 214 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 214 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 214 resolved as shift
WARNING: shift/reduce conflict for VAR in state 214 resolved as shift
WARNING: shift/reduce conflict for VOID in state 214 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 214 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 214 resolved as shift
WARNING: shift/reduce conflict for INT in state 214 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 214 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 219 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 219 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 219 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 219 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 219 resolved as shift
WARNING: shift/reduce conflict for ID in state 219 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 219 resolved as shift
WARNING: shift/reduce conflict for IF in state 219 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 219 resolved as shift
WARNING: shift/reduce conflict for FOR in state 219 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 219 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 219 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 219 resolved as shift
WARNING: shift/reduce conflict for TRY in state 219 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 219 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 219 resolved as shift
WARNING: shift/reduce conflict for CONST in state 219 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 219 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 219 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 219 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 219 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 219 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 219 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 219 resolved as shift
WARNING: shift/reduce conflict for VAR in state 219 resolved as shift
WARNING: shift/reduce conflict for VOID in state 219 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 219 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 219 resolved as shift
WARNING: shift/reduce conflict for INT in state 219 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 219 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 220 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 220 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 220 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 220 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for ID in state 220 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 220 resolved as shift
WARNING: shift/reduce conflict for IF in state 220 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 220 resolved as shift
WARNING: shift/reduce conflict for FOR in state 220 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 220 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 220 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 220 resolved as shift
WARNING: shift/reduce conflict for TRY in state 220 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 220 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 220 resolved as shift
WARNING: shift/reduce conflict for CONST in state 220 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 220 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for VAR in state 220 resolved as shift
WARNING: shift/reduce conflict for VOID in state 220 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 220 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 220 resolved as shift
WARNING: shift/reduce conflict for INT in state 220 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 220 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 225 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 225 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 225 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 225 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 225 resolved as shift
WARNING: shift/reduce conflict for ID in state 225 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 225 resolved as shift
WARNING: shift/reduce conflict for IF in state 225 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 225 resolved as shift
WARNING: shift/reduce conflict for FOR in state 225 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 225 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 225 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 225 resolved as shift
WARNING: shift/reduce conflict for TRY in state 225 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 225 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 225 resolved as shift
WARNING: shift/reduce conflict for CONST in state 225 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 225 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 225 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 225 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 225 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 225 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 225 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 225 resolved as shift
WARNING: shift/reduce conflict for VAR in state 225 resolved as shift
WARNING: shift/reduce conflict for VOID in state 225 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 225 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 225 resolved as shift
WARNING: shift/reduce conflict for INT in state 225 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 225 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 241 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 241 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 241 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 241 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 241 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 241 resolved as shift
WARNING: shift/reduce conflict for ID in state 241 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 241 resolved as shift
WARNING: shift/reduce conflict for IF in state 241 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 241 resolved as shift
WARNING: shift/reduce conflict for FOR in state 241 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 241 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 241 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 241 resolved as shift
WARNING: shift/reduce conflict for TRY in state 241 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 241 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 241 resolved as shift
WARNING: shift/reduce conflict for CONST in state 241 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 241 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 241 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 241 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 241 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 241 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 241 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 241 resolved as shift
WARNING: shift/reduce conflict for VAR in state 241 resolved as shift
WARNING: shift/reduce conflict for VOID in state 241 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 241 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 241 resolved as shift
WARNING: shift/reduce conflict for INT in state 241 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 241 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 253 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 253 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 253 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 253 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 253 resolved as shift
WARNING: shift/reduce conflict for ID in state 253 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 253 resolved as shift
WARNING: shift/reduce conflict for IF in state 253 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 253 resolved as shift
WARNING: shift/reduce conflict for FOR in state 253 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 253 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 253 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 253 resolved as shift
WARNING: shift/reduce conflict for TRY in state 253 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 253 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 253 resolved as shift
WARNING: shift/reduce conflict for CONST in state 253 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 253 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 253 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 253 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 253 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 253 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 253 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 253 resolved as shift
WARNING: shift/reduce conflict for VAR in state 253 resolved as shift
WARNING: shift/reduce conflict for VOID in state 253 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 253 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 253 resolved as shift
WARNING: shift/reduce conflict for INT in state 253 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 253 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 256 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 256 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 256 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for ID in state 256 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 256 resolved as shift
WARNING: shift/reduce conflict for IF in state 256 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 256 resolved as shift
WARNING: shift/reduce conflict for FOR in state 256 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 256 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 256 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 256 resolved as shift
WARNING: shift/reduce conflict for TRY in state 256 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 256 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 256 resolved as shift
WARNING: shift/reduce conflict for CONST in state 256 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 256 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for VAR in state 256 resolved as shift
WARNING: shift/reduce conflict for VOID in state 256 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 256 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 256 resolved as shift
WARNING: shift/reduce conflict for INT in state 256 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 256 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 257 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 257 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 257 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 257 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 257 resolved as shift
WARNING: shift/reduce conflict for ID in state 257 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 257 resolved as shift
WARNING: shift/reduce conflict for IF in state 257 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 257 resolved as shift
WARNING: shift/reduce conflict for FOR in state 257 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 257 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 257 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 257 resolved as shift
WARNING: shift/reduce conflict for TRY in state 257 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 257 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 257 resolved as shift
WARNING: shift/reduce conflict for CONST in state 257 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 257 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 257 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 257 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 257 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 257 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 257 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 257 resolved as shift
WARNING: shift/reduce conflict for VAR in state 257 resolved as shift
WARNING: shift/reduce conflict for VOID in state 257 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 257 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 257 resolved as shift
WARNING: shift/reduce conflict for INT in state 257 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 257 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 262 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 262 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 262 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 262 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 262 resolved as shift
WARNING: shift/reduce conflict for ID in state 262 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 262 resolved as shift
WARNING: shift/reduce conflict for IF in state 262 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 262 resolved as shift
WARNING: shift/reduce conflict for FOR in state 262 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 262 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 262 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 262 resolved as shift
WARNING: shift/reduce conflict for TRY in state 262 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 262 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 262 resolved as shift
WARNING: shift/reduce conflict for CONST in state 262 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 262 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 262 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 262 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 262 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 262 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 262 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 262 resolved as shift
WARNING: shift/reduce conflict for VAR in state 262 resolved as shift
WARNING: shift/reduce conflict for VOID in state 262 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 262 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 262 resolved as shift
WARNING: shift/reduce conflict for INT in state 262 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 262 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 263 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 263 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 263 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for ID in state 263 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 263 resolved as shift
WARNING: shift/reduce conflict for IF in state 263 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 263 resolved as shift
WARNING: shift/reduce conflict for FOR in state 263 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 263 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 263 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 263 resolved as shift
WARNING: shift/reduce conflict for TRY in state 263 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 263 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 263 resolved as shift
WARNING: shift/reduce conflict for CONST in state 263 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 263 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for VAR in state 263 resolved as shift
WARNING: shift/reduce conflict for VOID in state 263 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 263 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 263 resolved as shift
WARNING: shift/reduce conflict for INT in state 263 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 263 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 264 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 264 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 264 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 264 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for ID in state 264 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 264 resolved as shift
WARNING: shift/reduce conflict for IF in state 264 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 264 resolved as shift
WARNING: shift/reduce conflict for FOR in state 264 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 264 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 264 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 264 resolved as shift
WARNING: shift/reduce conflict for TRY in state 264 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 264 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 264 resolved as shift
WARNING: shift/reduce conflict for CONST in state 264 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 264 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for VAR in state 264 resolved as shift
WARNING: shift/reduce conflict for VOID in state 264 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 264 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 264 resolved as shift
WARNING: shift/reduce conflict for INT in state 264 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 264 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 265 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 265 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 265 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 265 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 265 resolved as shift
WARNING: shift/reduce conflict for ID in state 265 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 265 resolved as shift
WARNING: shift/reduce conflict for IF in state 265 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 265 resolved as shift
WARNING: shift/reduce conflict for FOR in state 265 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 265 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 265 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 265 resolved as shift
WARNING: shift/reduce conflict for TRY in state 265 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 265 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 265 resolved as shift
WARNING: shift/reduce conflict for CONST in state 265 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 265 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 265 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 265 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 265 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 265 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 265 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 265 resolved as shift
WARNING: shift/reduce conflict for VAR in state 265 resolved as shift
WARNING: shift/reduce conflict for VOID in state 265 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 265 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 265 resolved as shift
WARNING: shift/reduce conflict for INT in state 265 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 265 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 266 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 266 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 266 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 266 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 266 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 266 resolved as shift
WARNING: shift/reduce conflict for ID in state 266 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 266 resolved as shift
WARNING: shift/reduce conflict for IF in state 266 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 266 resolved as shift
WARNING: shift/reduce conflict for FOR in state 266 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 266 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 266 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 266 resolved as shift
WARNING: shift/reduce conflict for TRY in state 266 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 266 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 266 resolved as shift
WARNING: shift/reduce conflict for CONST in state 266 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 266 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 266 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 266 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 266 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 266 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 266 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 266 resolved as shift
WARNING: shift/reduce conflict for VAR in state 266 resolved as shift
WARNING: shift/reduce conflict for VOID in state 266 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 266 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 266 resolved as shift
WARNING: shift/reduce conflict for INT in state 266 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 266 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 272 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 272 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 272 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 272 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 272 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 272 resolved as shift
WARNING: shift/reduce conflict for ID in state 272 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 272 resolved as shift
WARNING: shift/reduce conflict for IF in state 272 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 272 resolved as shift
WARNING: shift/reduce conflict for FOR in state 272 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 272 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 272 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 272 resolved as shift
WARNING: shift/reduce conflict for TRY in state 272 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 272 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 272 resolved as shift
WARNING: shift/reduce conflict for CONST in state 272 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 272 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 272 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 272 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 272 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 272 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 272 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 272 resolved as shift
WARNING: shift/reduce conflict for VAR in state 272 resolved as shift
WARNING: shift/reduce conflict for VOID in state 272 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 272 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 272 resolved as shift
WARNING: shift/reduce conflict for INT in state 272 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 272 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 273 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 273 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 273 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 273 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for ID in state 273 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 273 resolved as shift
WARNING: shift/reduce conflict for IF in state 273 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 273 resolved as shift
WARNING: shift/reduce conflict for FOR in state 273 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 273 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 273 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 273 resolved as shift
WARNING: shift/reduce conflict for TRY in state 273 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 273 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 273 resolved as shift
WARNING: shift/reduce conflict for CONST in state 273 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 273 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for VAR in state 273 resolved as shift
WARNING: shift/reduce conflict for VOID in state 273 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 273 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 273 resolved as shift
WARNING: shift/reduce conflict for INT in state 273 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 273 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> statements)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 104 resolved using rule (variable -> INT)
WARNING: rejected rule (factor -> INT) in state 104
WARNING: reduce/reduce conflict in state 105 resolved using rule (variable -> DOUBLE)
WARNING: rejected rule (factor -> DOUBLE) in state 105
WARNING: reduce/reduce conflict in state 109 resolved using rule (variable -> ID)
WARNING: rejected rule (factor -> ID) in state 109
WARNING: reduce/reduce conflict in state 265 resolved using rule (default_case -> DEFAULT COLON statements)
WARNING: rejected rule (empty -> <empty>) in state 265
WARNING: reduce/reduce conflict in state 266 resolved using rule (case -> CASE variable COLON statements)
WARNING: rejected rule (empty -> <empty>) in state 266

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    EXPORT
    FALSE
    LATE
    NOT
    NULL_TYPE
    RETURN
    STATIC
    TRUE
    TYPEDEF

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> LBRACE statements RBRACE
Rule 5     statement -> expression SEMICOLON
Rule 6     statement -> declaration SEMICOLON
Rule 7     statement -> assignation SEMICOLON
Rule 8     statement -> increment SEMICOLON
Rule 9     statement -> decrement SEMICOLON
Rule 10    statement -> import SEMICOLON
Rule 11    statement -> function
Rule 12    statement -> if
Rule 13    statement -> while
Rule 14    statement -> for
Rule 15    statement -> print
Rule 16    statement -> input
Rule 17    statement -> class_def
Rule 18    statement -> enum
Rule 19    statement -> try
Rule 20    statement -> switch
Rule 21    statement -> empty
Rule 22    statement -> CONTINUE SEMICOLON
Rule 23    statement -> BREAK SEMICOLON
Rule 24    declaration -> declaration_modifier varType ID
Rule 25    declaration -> declaration_modifier ID
Rule 26    declaration -> varType ID
Rule 27    declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
Rule 28    list_literal -> LBRACKET list_elements RBRACKET
Rule 29    list_elements -> list_elements COMMA variable
Rule 30    list_elements -> variable
Rule 31    list_elements -> empty
Rule 32    declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
Rule 33    map_literal -> LBRACE map_elements RBRACE
Rule 34    map_elements -> map_elements COMMA map_pair
Rule 35    map_elements -> map_pair
Rule 36    map_elements -> empty
Rule 37    map_pair -> variable COLON variable
Rule 38    import -> IMPORT STRING SEMICOLON
Rule 39    assignation -> ID PLUS_EQUALS expression
Rule 40    assignation -> ID MINUS_EQUALS expression
Rule 41    assignation -> ID TIMES_EQUALS expression
Rule 42    assignation -> ID DIVIDE_EQUALS expression
Rule 43    assignation -> declaration ASSIGN_OPERATOR variable
Rule 44    assignation -> ID ASSIGN_OPERATOR variable
Rule 45    varType -> INT_TYPE
Rule 46    varType -> STRING_TYPE
Rule 47    varType -> NUM_TYPE
Rule 48    varType -> DOUBLE_TYPE
Rule 49    varType -> BOOL_TYPE
Rule 50    varType -> LIST_TYPE
Rule 51    varType -> MAP_TYPE
Rule 52    varType -> SET_TYPE
Rule 53    varType -> VOID
Rule 54    declaration_modifier -> VAR
Rule 55    declaration_modifier -> CONST
Rule 56    declaration_modifier -> FINAL
Rule 57    variable -> INT
Rule 58    variable -> DOUBLE
Rule 59    variable -> STRING
Rule 60    variable -> BOOL
Rule 61    variable -> NULL
Rule 62    variable -> ID
Rule 63    variable -> expression
Rule 64    expression -> expression PLUS term
Rule 65    expression -> expression MINUS term
Rule 66    expression -> term
Rule 67    term -> term TIMES factor
Rule 68    term -> term DIVIDE factor
Rule 69    term -> term MODULE factor
Rule 70    term -> factor
Rule 71    factor -> ID LBRACKET expression RBRACKET
Rule 72    factor -> ID DOT ID
Rule 73    factor -> ID
Rule 74    factor -> LPARENTHESIS expression RPARENTHESIS
Rule 75    factor -> INT
Rule 76    factor -> DOUBLE
Rule 77    booleanExpression -> variable EQUALS variable
Rule 78    booleanExpression -> variable NOT_EQUALS variable
Rule 79    booleanExpression -> variable GREATER_THAN variable
Rule 80    booleanExpression -> variable LESS_THAN variable
Rule 81    booleanExpression -> variable GREATER_THAN_OR_EQUALS variable
Rule 82    booleanExpression -> variable LESS_THAN_OR_EQUALS variable
Rule 83    booleanExpression -> booleanExpression AND booleanExpression
Rule 84    booleanExpression -> booleanExpression OR booleanExpression
Rule 85    booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS
Rule 86    booleanExpression -> variable
Rule 87    if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement
Rule 88    if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
Rule 89    while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
Rule 90    for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
Rule 91    for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
Rule 92    for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
Rule 93    increment -> ID INCREMENT
Rule 94    decrement -> ID DECREMENT
Rule 95    function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
Rule 96    function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
Rule 97    typedef -> TYPEDEF ID ASSIGN_OPERATOR varType function LPARENTHESIS parameters RPARENTHESIS SEMICOLON
Rule 98    enum -> ENUM ID LBRACE enum_values RBRACE
Rule 99    enum_values -> enum_values COMMA ID
Rule 100   enum_values -> ID
Rule 101   try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
Rule 102   switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
Rule 103   cases -> cases case
Rule 104   cases -> case
Rule 105   case -> CASE variable COLON statements BREAK SEMICOLON
Rule 106   default_case -> DEFAULT COLON statements
Rule 107   parameters -> parameters COMMA parameter
Rule 108   parameters -> parameter
Rule 109   parameters -> empty
Rule 110   parameter -> varType ID
Rule 111   print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
Rule 112   input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
Rule 113   class_def -> CLASS ID LBRACE class_members RBRACE
Rule 114   class_members -> class_members class_member
Rule 115   class_members -> class_member
Rule 116   class_member -> varType ID SEMICOLON
Rule 117   class_member -> function
Rule 118   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 83
ARROW                : 96
ASSIGN_OPERATOR      : 27 32 43 44 97 112
BOOL                 : 60
BOOL_TYPE            : 49
BREAK                : 23 105
CASE                 : 105
CLASS                : 113
COLON                : 37 105 106
COMMA                : 29 32 34 99 107
CONST                : 55
CONTINUE             : 22
DECREMENT            : 94
DEFAULT              : 106
DIVIDE               : 68
DIVIDE_EQUALS        : 42
DOT                  : 72 112
DOUBLE               : 58 76
DOUBLE_TYPE          : 48
ELSE                 : 88
ENUM                 : 98
EQUALS               : 77
EXPORT               : 
FALSE                : 
FINAL                : 56
FINALLY              : 101
FOR                  : 90 91 92
GREATER_THAN         : 27 32 79
GREATER_THAN_OR_EQUALS : 81
ID                   : 24 25 26 27 32 39 40 41 42 44 62 71 72 72 73 92 92 93 94 95 96 97 98 99 100 110 112 113 116
IF                   : 87 88
IMPORT               : 38
IN                   : 92
INCREMENT            : 93
INT                  : 57 75
INT_TYPE             : 45
LATE                 : 
LBRACE               : 4 33 89 90 91 92 95 98 101 101 102 113
LBRACKET             : 28 71
LESS_THAN            : 27 32 80
LESS_THAN_OR_EQUALS  : 82
LIST_TYPE            : 27 50
LPARENTHESIS         : 74 85 87 88 89 90 91 92 95 96 97 102 111 112
MAP_TYPE             : 32 51
MINUS                : 65
MINUS_EQUALS         : 40
MODULE               : 69
NOT                  : 
NOT_EQUALS           : 78
NULL                 : 61
NULL_TYPE            : 
NUM_TYPE             : 47
OR                   : 84
PLUS                 : 64
PLUS_EQUALS          : 39
PRINT                : 111
RBRACE               : 4 33 89 90 91 92 95 98 101 101 102 113
RBRACKET             : 28 71
READ                 : 112
RETURN               : 
RPARENTHESIS         : 74 85 87 88 89 90 91 92 95 96 97 102 111 112
SEMICOLON            : 5 6 7 8 9 10 22 23 38 90 90 91 91 96 97 105 111 112 116
SET_TYPE             : 52
STATIC               : 
STDIN                : 112
STRING               : 38 59
STRING_TYPE          : 46
SWITCH               : 102
TIMES                : 67
TIMES_EQUALS         : 41
TRUE                 : 
TRY                  : 101
TYPEDEF              : 97
VAR                  : 54
VOID                 : 53
WHILE                : 89
error                : 

Nonterminals, with rules where they appear

assignation          : 7 90 91
booleanExpression    : 83 83 84 84 85 87 88 89 90 91
case                 : 103 104
cases                : 102 103
class_def            : 17
class_member         : 114 115
class_members        : 113 114
declaration          : 6 43
declaration_modifier : 24 25
decrement            : 9 91
default_case         : 102
empty                : 21 31 36 109
enum                 : 18
enum_values          : 98 99
expression           : 5 39 40 41 42 63 64 65 71 74 96
factor               : 67 68 69 70
for                  : 14
function             : 11 97 117
if                   : 12
import               : 10
increment            : 8 90
input                : 16
list_elements        : 28 29
list_literal         : 27
map_elements         : 33 34
map_literal          : 32
map_pair             : 34 35
parameter            : 107 108
parameters           : 95 96 97 107
print                : 15
program              : 0
statement            : 2 3 87 88 88
statements           : 1 2 4 89 90 91 92 95 101 101 105 106
switch               : 20
term                 : 64 65 66 67 68 69
try                  : 19
typedef              : 
varType              : 24 26 27 32 32 92 95 96 97 110 116
variable             : 29 30 37 37 43 44 77 77 78 78 79 79 80 80 81 81 82 82 86 102 105 111
while                : 13


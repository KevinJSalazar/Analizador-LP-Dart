Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    EXPORT
    FALSE
    NOT
    NULL_TYPE
    STATIC
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> LBRACE statements RBRACE
Rule 5     statement -> expression SEMICOLON
Rule 6     statement -> declaration SEMICOLON
Rule 7     statement -> assignation SEMICOLON
Rule 8     statement -> increment SEMICOLON
Rule 9     statement -> decrement SEMICOLON
Rule 10    statement -> import
Rule 11    statement -> function
Rule 12    statement -> if
Rule 13    statement -> while
Rule 14    statement -> for
Rule 15    statement -> print
Rule 16    statement -> input
Rule 17    statement -> class_def
Rule 18    statement -> enum
Rule 19    statement -> try
Rule 20    statement -> switch
Rule 21    statement -> empty
Rule 22    statement -> return SEMICOLON
Rule 23    statement -> CONTINUE SEMICOLON
Rule 24    statement -> BREAK SEMICOLON
Rule 25    declaration -> declaration_with_modifier
Rule 26    declaration -> declaration_without_modifier
Rule 27    declaration_with_modifier -> declaration_modifier varType ID
Rule 28    declaration_with_modifier -> declaration_modifier ID
Rule 29    declaration_without_modifier -> varType ID
Rule 30    declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
Rule 31    declaration -> declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
Rule 32    declaration -> declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
Rule 33    declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
Rule 34    declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
Rule 35    declaration -> SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
Rule 36    declaration -> declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
Rule 37    set_literal -> LBRACE list_elements RBRACE
Rule 38    assignation -> declaration ASSIGN_OPERATOR variable
Rule 39    assignation -> ID ASSIGN_OPERATOR variable
Rule 40    assignation -> ID PLUS_EQUALS expression
Rule 41    assignation -> ID MINUS_EQUALS expression
Rule 42    assignation -> ID TIMES_EQUALS expression
Rule 43    assignation -> ID DIVIDE_EQUALS expression
Rule 44    declaration_modifier -> CONST
Rule 45    declaration_modifier -> FINAL
Rule 46    declaration_modifier -> LATE
Rule 47    varType -> INT_TYPE
Rule 48    varType -> STRING_TYPE
Rule 49    varType -> NUM_TYPE
Rule 50    varType -> DOUBLE_TYPE
Rule 51    varType -> BOOL_TYPE
Rule 52    varType -> LIST_TYPE
Rule 53    varType -> MAP_TYPE
Rule 54    varType -> SET_TYPE
Rule 55    varType -> VAR
Rule 56    varType -> VOID
Rule 57    list_literal -> LBRACKET list_elements RBRACKET
Rule 58    list_elements -> list_elements COMMA variable
Rule 59    list_elements -> variable
Rule 60    list_elements -> empty
Rule 61    map_literal -> LBRACE map_elements RBRACE
Rule 62    map_elements -> map_elements COMMA map_pair
Rule 63    map_elements -> map_pair
Rule 64    map_elements -> empty
Rule 65    map_pair -> variable COLON variable
Rule 66    map_pair -> variable COLON booleanExpression
Rule 67    variable -> INT
Rule 68    variable -> DOUBLE
Rule 69    variable -> STRING
Rule 70    variable -> BOOL
Rule 71    variable -> NULL
Rule 72    variable -> ID
Rule 73    variable -> function
Rule 74    variable -> lambda
Rule 75    variable -> expression
Rule 76    expression -> expression PLUS term
Rule 77    expression -> expression MINUS term
Rule 78    expression -> term
Rule 79    term -> term TIMES factor
Rule 80    term -> term DIVIDE factor
Rule 81    term -> term MODULE factor
Rule 82    term -> factor
Rule 83    factor -> MINUS factor
Rule 84    factor -> INT
Rule 85    factor -> DOUBLE
Rule 86    factor -> ID
Rule 87    factor -> LPARENTHESIS expression RPARENTHESIS
Rule 88    factor -> ID LBRACKET expression RBRACKET
Rule 89    factor -> ID DOT function statement
Rule 90    factor -> ID DOT function
Rule 91    factor -> ID DOT ID
Rule 92    booleanExpression -> variable EQUALS variable
Rule 93    booleanExpression -> variable NOT_EQUALS variable
Rule 94    booleanExpression -> variable GREATER_THAN variable
Rule 95    booleanExpression -> variable LESS_THAN variable
Rule 96    booleanExpression -> variable GREATER_THAN_OR_EQUALS variable
Rule 97    booleanExpression -> variable LESS_THAN_OR_EQUALS variable
Rule 98    booleanExpression -> booleanExpression AND booleanExpression
Rule 99    booleanExpression -> booleanExpression OR booleanExpression
Rule 100   booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS
Rule 101   booleanExpression -> variable
Rule 102   if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement
Rule 103   if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
Rule 104   while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
Rule 105   for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
Rule 106   for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
Rule 107   for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
Rule 108   for_in_block -> LBRACE for_in_scope statements RBRACE
Rule 109   for_in_scope -> <empty>
Rule 110   increment -> ID INCREMENT
Rule 111   decrement -> ID DECREMENT
Rule 112   try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
Rule 113   switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
Rule 114   cases -> cases case
Rule 115   cases -> case
Rule 116   case -> CASE variable COLON statements BREAK
Rule 117   case -> CASE variable COLON statements SEMICOLON
Rule 118   case -> CASE variable COLON statements
Rule 119   default_case -> DEFAULT COLON statements
Rule 120   function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
Rule 121   function -> ID LPARENTHESIS parameters RPARENTHESIS
Rule 122   function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
Rule 123   parameters -> parameters COMMA parameter
Rule 124   parameters -> parameter
Rule 125   parameters -> empty
Rule 126   parameter -> declaration
Rule 127   parameter -> variable
Rule 128   lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
Rule 129   print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
Rule 130   input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
Rule 131   class_def -> CLASS ID LBRACE class_members RBRACE
Rule 132   class_members -> class_members class_member
Rule 133   class_members -> class_member
Rule 134   class_member -> varType ID SEMICOLON
Rule 135   class_member -> function
Rule 136   enum -> ENUM ID LBRACE enum_values RBRACE
Rule 137   enum_values -> enum_values COMMA ID
Rule 138   enum_values -> ID
Rule 139   typedef -> TYPEDEF ID ASSIGN_OPERATOR varType function LPARENTHESIS parameters RPARENTHESIS SEMICOLON
Rule 140   return -> RETURN variable
Rule 141   return -> RETURN
Rule 142   import -> IMPORT STRING SEMICOLON
Rule 143   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 98
ARROW                : 122
ASSIGN_OPERATOR      : 30 31 32 33 34 35 36 38 39 130 139
BOOL                 : 70
BOOL_TYPE            : 51
BREAK                : 24 116
CASE                 : 116 117 118
CLASS                : 131
COLON                : 65 66 116 117 118 119
COMMA                : 33 34 58 62 123 137
CONST                : 44
CONTINUE             : 23
DECREMENT            : 111
DEFAULT              : 119
DIVIDE               : 80
DIVIDE_EQUALS        : 43
DOT                  : 89 90 91 130
DOUBLE               : 68 85
DOUBLE_TYPE          : 50
ELSE                 : 103
ENUM                 : 136
EQUALS               : 92
EXPORT               : 
FALSE                : 
FINAL                : 45
FINALLY              : 112
FOR                  : 105 106 107
GREATER_THAN         : 30 31 32 33 34 35 36 94
GREATER_THAN_OR_EQUALS : 96
ID                   : 27 28 29 30 31 33 34 35 36 39 40 41 42 43 72 86 88 89 90 91 91 107 107 110 111 121 130 131 134 136 137 138 139
IF                   : 102 103
IMPORT               : 142
IN                   : 107
INCREMENT            : 110
INT                  : 67 84
INT_TYPE             : 47
LATE                 : 46
LBRACE               : 4 37 61 104 105 106 108 112 112 113 120 128 131 136
LBRACKET             : 57 88
LESS_THAN            : 30 31 32 33 34 35 36 95
LESS_THAN_OR_EQUALS  : 97
LIST_TYPE            : 30 31 52
LPARENTHESIS         : 87 100 102 103 104 105 106 107 113 120 121 122 128 129 130 139
MAP_TYPE             : 33 34 53
MINUS                : 77 83
MINUS_EQUALS         : 41
MODULE               : 81
NOT                  : 
NOT_EQUALS           : 93
NULL                 : 71
NULL_TYPE            : 
NUM_TYPE             : 49
OR                   : 99
PLUS                 : 76
PLUS_EQUALS          : 40
PRINT                : 129
RBRACE               : 4 37 61 104 105 106 108 112 112 113 120 128 131 136
RBRACKET             : 57 88
READ                 : 130
RETURN               : 140 141
RPARENTHESIS         : 87 100 102 103 104 105 106 107 113 120 121 122 128 129 130 139
SEMICOLON            : 5 6 7 8 9 22 23 24 105 105 106 106 117 122 129 130 134 139 142
SET_TYPE             : 35 36 54
STATIC               : 
STDIN                : 130
STRING               : 69 142
STRING_TYPE          : 48
SWITCH               : 113
TIMES                : 79
TIMES_EQUALS         : 42
TRUE                 : 
TRY                  : 112
TYPEDEF              : 139
VAR                  : 55
VOID                 : 56
WHILE                : 104
error                : 

Nonterminals, with rules where they appear

assignation          : 7 105 106
booleanExpression    : 66 98 98 99 99 100 102 103 104 105 106
case                 : 114 115
cases                : 113 114
class_def            : 17
class_member         : 132 133
class_members        : 131 132
declaration          : 6 32 38 120 122 126
declaration_modifier : 27 28 31 34 36
declaration_with_modifier : 25
declaration_without_modifier : 26
decrement            : 9 106
default_case         : 113
empty                : 21 60 64 125
enum                 : 18
enum_values          : 136 137
expression           : 5 40 41 42 43 75 76 77 87 88 122
factor               : 79 80 81 82 83
for                  : 14
for_in_block         : 107
for_in_scope         : 108
function             : 11 73 89 90 135 139
if                   : 12
import               : 10
increment            : 8 105
input                : 16
lambda               : 74
list_elements        : 37 57 58
list_literal         : 30 31 32
map_elements         : 61 62
map_literal          : 33 34
map_pair             : 62 63
parameter            : 123 124
parameters           : 120 121 122 123 128 139
print                : 15
program              : 0
return               : 22
set_literal          : 35 36
statement            : 2 3 89 102 103 103
statements           : 1 2 4 104 105 106 108 112 112 116 117 118 119 120 128
switch               : 20
term                 : 76 77 78 79 80 81
try                  : 19
typedef              : 
varType              : 27 29 30 31 32 33 33 34 34 35 36 107 134 139
variable             : 38 39 58 59 65 65 66 92 92 93 93 94 94 95 95 96 96 97 97 101 113 116 117 118 127 129 140
while                : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    $end            reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> statements .)
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
    $end            reduce using rule 1 (program -> statements .)
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]
  ! $end            [ reduce using rule 143 (empty -> .) ]

    statement                      shift and go to state 59
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 3

    (3) statements -> statement .

    LBRACE          reduce using rule 3 (statements -> statement .)
    CONTINUE        reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    LIST_TYPE       reduce using rule 3 (statements -> statement .)
    MAP_TYPE        reduce using rule 3 (statements -> statement .)
    SET_TYPE        reduce using rule 3 (statements -> statement .)
    ID              reduce using rule 3 (statements -> statement .)
    IMPORT          reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    CLASS           reduce using rule 3 (statements -> statement .)
    ENUM            reduce using rule 3 (statements -> statement .)
    TRY             reduce using rule 3 (statements -> statement .)
    SWITCH          reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    CONST           reduce using rule 3 (statements -> statement .)
    FINAL           reduce using rule 3 (statements -> statement .)
    LATE            reduce using rule 3 (statements -> statement .)
    INT_TYPE        reduce using rule 3 (statements -> statement .)
    STRING_TYPE     reduce using rule 3 (statements -> statement .)
    NUM_TYPE        reduce using rule 3 (statements -> statement .)
    DOUBLE_TYPE     reduce using rule 3 (statements -> statement .)
    BOOL_TYPE       reduce using rule 3 (statements -> statement .)
    VAR             reduce using rule 3 (statements -> statement .)
    VOID            reduce using rule 3 (statements -> statement .)
    MINUS           reduce using rule 3 (statements -> statement .)
    INT             reduce using rule 3 (statements -> statement .)
    DOUBLE          reduce using rule 3 (statements -> statement .)
    LPARENTHESIS    reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RBRACE          reduce using rule 3 (statements -> statement .)
    SEMICOLON       reduce using rule 3 (statements -> statement .)
    DEFAULT         reduce using rule 3 (statements -> statement .)
    CASE            reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RBRACE          reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statements                     shift and go to state 60
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 5

    (5) statement -> expression . SEMICOLON
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 6

    (6) statement -> declaration . SEMICOLON
    (32) declaration -> declaration . ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (38) assignation -> declaration . ASSIGN_OPERATOR variable
    (120) function -> declaration . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (122) function -> declaration . LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON

    SEMICOLON       shift and go to state 64
    ASSIGN_OPERATOR shift and go to state 65
    LPARENTHESIS    shift and go to state 66


state 7

    (7) statement -> assignation . SEMICOLON

    SEMICOLON       shift and go to state 67


state 8

    (8) statement -> increment . SEMICOLON

    SEMICOLON       shift and go to state 68


state 9

    (9) statement -> decrement . SEMICOLON

    SEMICOLON       shift and go to state 69


state 10

    (10) statement -> import .

    LBRACE          reduce using rule 10 (statement -> import .)
    CONTINUE        reduce using rule 10 (statement -> import .)
    BREAK           reduce using rule 10 (statement -> import .)
    LIST_TYPE       reduce using rule 10 (statement -> import .)
    MAP_TYPE        reduce using rule 10 (statement -> import .)
    SET_TYPE        reduce using rule 10 (statement -> import .)
    ID              reduce using rule 10 (statement -> import .)
    IMPORT          reduce using rule 10 (statement -> import .)
    IF              reduce using rule 10 (statement -> import .)
    WHILE           reduce using rule 10 (statement -> import .)
    FOR             reduce using rule 10 (statement -> import .)
    PRINT           reduce using rule 10 (statement -> import .)
    CLASS           reduce using rule 10 (statement -> import .)
    ENUM            reduce using rule 10 (statement -> import .)
    TRY             reduce using rule 10 (statement -> import .)
    SWITCH          reduce using rule 10 (statement -> import .)
    RETURN          reduce using rule 10 (statement -> import .)
    CONST           reduce using rule 10 (statement -> import .)
    FINAL           reduce using rule 10 (statement -> import .)
    LATE            reduce using rule 10 (statement -> import .)
    INT_TYPE        reduce using rule 10 (statement -> import .)
    STRING_TYPE     reduce using rule 10 (statement -> import .)
    NUM_TYPE        reduce using rule 10 (statement -> import .)
    DOUBLE_TYPE     reduce using rule 10 (statement -> import .)
    BOOL_TYPE       reduce using rule 10 (statement -> import .)
    VAR             reduce using rule 10 (statement -> import .)
    VOID            reduce using rule 10 (statement -> import .)
    MINUS           reduce using rule 10 (statement -> import .)
    INT             reduce using rule 10 (statement -> import .)
    DOUBLE          reduce using rule 10 (statement -> import .)
    LPARENTHESIS    reduce using rule 10 (statement -> import .)
    $end            reduce using rule 10 (statement -> import .)
    RBRACE          reduce using rule 10 (statement -> import .)
    TIMES           reduce using rule 10 (statement -> import .)
    DIVIDE          reduce using rule 10 (statement -> import .)
    MODULE          reduce using rule 10 (statement -> import .)
    SEMICOLON       reduce using rule 10 (statement -> import .)
    PLUS            reduce using rule 10 (statement -> import .)
    RPARENTHESIS    reduce using rule 10 (statement -> import .)
    COMMA           reduce using rule 10 (statement -> import .)
    RBRACKET        reduce using rule 10 (statement -> import .)
    EQUALS          reduce using rule 10 (statement -> import .)
    NOT_EQUALS      reduce using rule 10 (statement -> import .)
    GREATER_THAN    reduce using rule 10 (statement -> import .)
    LESS_THAN       reduce using rule 10 (statement -> import .)
    GREATER_THAN_OR_EQUALS reduce using rule 10 (statement -> import .)
    LESS_THAN_OR_EQUALS reduce using rule 10 (statement -> import .)
    AND             reduce using rule 10 (statement -> import .)
    OR              reduce using rule 10 (statement -> import .)
    COLON           reduce using rule 10 (statement -> import .)
    ELSE            reduce using rule 10 (statement -> import .)
    DEFAULT         reduce using rule 10 (statement -> import .)
    CASE            reduce using rule 10 (statement -> import .)


state 11

    (11) statement -> function .

    LBRACE          reduce using rule 11 (statement -> function .)
    CONTINUE        reduce using rule 11 (statement -> function .)
    BREAK           reduce using rule 11 (statement -> function .)
    LIST_TYPE       reduce using rule 11 (statement -> function .)
    MAP_TYPE        reduce using rule 11 (statement -> function .)
    SET_TYPE        reduce using rule 11 (statement -> function .)
    ID              reduce using rule 11 (statement -> function .)
    IMPORT          reduce using rule 11 (statement -> function .)
    IF              reduce using rule 11 (statement -> function .)
    WHILE           reduce using rule 11 (statement -> function .)
    FOR             reduce using rule 11 (statement -> function .)
    PRINT           reduce using rule 11 (statement -> function .)
    CLASS           reduce using rule 11 (statement -> function .)
    ENUM            reduce using rule 11 (statement -> function .)
    TRY             reduce using rule 11 (statement -> function .)
    SWITCH          reduce using rule 11 (statement -> function .)
    RETURN          reduce using rule 11 (statement -> function .)
    CONST           reduce using rule 11 (statement -> function .)
    FINAL           reduce using rule 11 (statement -> function .)
    LATE            reduce using rule 11 (statement -> function .)
    INT_TYPE        reduce using rule 11 (statement -> function .)
    STRING_TYPE     reduce using rule 11 (statement -> function .)
    NUM_TYPE        reduce using rule 11 (statement -> function .)
    DOUBLE_TYPE     reduce using rule 11 (statement -> function .)
    BOOL_TYPE       reduce using rule 11 (statement -> function .)
    VAR             reduce using rule 11 (statement -> function .)
    VOID            reduce using rule 11 (statement -> function .)
    MINUS           reduce using rule 11 (statement -> function .)
    INT             reduce using rule 11 (statement -> function .)
    DOUBLE          reduce using rule 11 (statement -> function .)
    LPARENTHESIS    reduce using rule 11 (statement -> function .)
    $end            reduce using rule 11 (statement -> function .)
    RBRACE          reduce using rule 11 (statement -> function .)
    TIMES           reduce using rule 11 (statement -> function .)
    DIVIDE          reduce using rule 11 (statement -> function .)
    MODULE          reduce using rule 11 (statement -> function .)
    SEMICOLON       reduce using rule 11 (statement -> function .)
    PLUS            reduce using rule 11 (statement -> function .)
    RPARENTHESIS    reduce using rule 11 (statement -> function .)
    COMMA           reduce using rule 11 (statement -> function .)
    RBRACKET        reduce using rule 11 (statement -> function .)
    EQUALS          reduce using rule 11 (statement -> function .)
    NOT_EQUALS      reduce using rule 11 (statement -> function .)
    GREATER_THAN    reduce using rule 11 (statement -> function .)
    LESS_THAN       reduce using rule 11 (statement -> function .)
    GREATER_THAN_OR_EQUALS reduce using rule 11 (statement -> function .)
    LESS_THAN_OR_EQUALS reduce using rule 11 (statement -> function .)
    AND             reduce using rule 11 (statement -> function .)
    OR              reduce using rule 11 (statement -> function .)
    COLON           reduce using rule 11 (statement -> function .)
    ELSE            reduce using rule 11 (statement -> function .)
    DEFAULT         reduce using rule 11 (statement -> function .)
    CASE            reduce using rule 11 (statement -> function .)


state 12

    (12) statement -> if .

    LBRACE          reduce using rule 12 (statement -> if .)
    CONTINUE        reduce using rule 12 (statement -> if .)
    BREAK           reduce using rule 12 (statement -> if .)
    LIST_TYPE       reduce using rule 12 (statement -> if .)
    MAP_TYPE        reduce using rule 12 (statement -> if .)
    SET_TYPE        reduce using rule 12 (statement -> if .)
    ID              reduce using rule 12 (statement -> if .)
    IMPORT          reduce using rule 12 (statement -> if .)
    IF              reduce using rule 12 (statement -> if .)
    WHILE           reduce using rule 12 (statement -> if .)
    FOR             reduce using rule 12 (statement -> if .)
    PRINT           reduce using rule 12 (statement -> if .)
    CLASS           reduce using rule 12 (statement -> if .)
    ENUM            reduce using rule 12 (statement -> if .)
    TRY             reduce using rule 12 (statement -> if .)
    SWITCH          reduce using rule 12 (statement -> if .)
    RETURN          reduce using rule 12 (statement -> if .)
    CONST           reduce using rule 12 (statement -> if .)
    FINAL           reduce using rule 12 (statement -> if .)
    LATE            reduce using rule 12 (statement -> if .)
    INT_TYPE        reduce using rule 12 (statement -> if .)
    STRING_TYPE     reduce using rule 12 (statement -> if .)
    NUM_TYPE        reduce using rule 12 (statement -> if .)
    DOUBLE_TYPE     reduce using rule 12 (statement -> if .)
    BOOL_TYPE       reduce using rule 12 (statement -> if .)
    VAR             reduce using rule 12 (statement -> if .)
    VOID            reduce using rule 12 (statement -> if .)
    MINUS           reduce using rule 12 (statement -> if .)
    INT             reduce using rule 12 (statement -> if .)
    DOUBLE          reduce using rule 12 (statement -> if .)
    LPARENTHESIS    reduce using rule 12 (statement -> if .)
    $end            reduce using rule 12 (statement -> if .)
    RBRACE          reduce using rule 12 (statement -> if .)
    TIMES           reduce using rule 12 (statement -> if .)
    DIVIDE          reduce using rule 12 (statement -> if .)
    MODULE          reduce using rule 12 (statement -> if .)
    SEMICOLON       reduce using rule 12 (statement -> if .)
    PLUS            reduce using rule 12 (statement -> if .)
    RPARENTHESIS    reduce using rule 12 (statement -> if .)
    COMMA           reduce using rule 12 (statement -> if .)
    RBRACKET        reduce using rule 12 (statement -> if .)
    EQUALS          reduce using rule 12 (statement -> if .)
    NOT_EQUALS      reduce using rule 12 (statement -> if .)
    GREATER_THAN    reduce using rule 12 (statement -> if .)
    LESS_THAN       reduce using rule 12 (statement -> if .)
    GREATER_THAN_OR_EQUALS reduce using rule 12 (statement -> if .)
    LESS_THAN_OR_EQUALS reduce using rule 12 (statement -> if .)
    AND             reduce using rule 12 (statement -> if .)
    OR              reduce using rule 12 (statement -> if .)
    COLON           reduce using rule 12 (statement -> if .)
    ELSE            reduce using rule 12 (statement -> if .)
    DEFAULT         reduce using rule 12 (statement -> if .)
    CASE            reduce using rule 12 (statement -> if .)


state 13

    (13) statement -> while .

    LBRACE          reduce using rule 13 (statement -> while .)
    CONTINUE        reduce using rule 13 (statement -> while .)
    BREAK           reduce using rule 13 (statement -> while .)
    LIST_TYPE       reduce using rule 13 (statement -> while .)
    MAP_TYPE        reduce using rule 13 (statement -> while .)
    SET_TYPE        reduce using rule 13 (statement -> while .)
    ID              reduce using rule 13 (statement -> while .)
    IMPORT          reduce using rule 13 (statement -> while .)
    IF              reduce using rule 13 (statement -> while .)
    WHILE           reduce using rule 13 (statement -> while .)
    FOR             reduce using rule 13 (statement -> while .)
    PRINT           reduce using rule 13 (statement -> while .)
    CLASS           reduce using rule 13 (statement -> while .)
    ENUM            reduce using rule 13 (statement -> while .)
    TRY             reduce using rule 13 (statement -> while .)
    SWITCH          reduce using rule 13 (statement -> while .)
    RETURN          reduce using rule 13 (statement -> while .)
    CONST           reduce using rule 13 (statement -> while .)
    FINAL           reduce using rule 13 (statement -> while .)
    LATE            reduce using rule 13 (statement -> while .)
    INT_TYPE        reduce using rule 13 (statement -> while .)
    STRING_TYPE     reduce using rule 13 (statement -> while .)
    NUM_TYPE        reduce using rule 13 (statement -> while .)
    DOUBLE_TYPE     reduce using rule 13 (statement -> while .)
    BOOL_TYPE       reduce using rule 13 (statement -> while .)
    VAR             reduce using rule 13 (statement -> while .)
    VOID            reduce using rule 13 (statement -> while .)
    MINUS           reduce using rule 13 (statement -> while .)
    INT             reduce using rule 13 (statement -> while .)
    DOUBLE          reduce using rule 13 (statement -> while .)
    LPARENTHESIS    reduce using rule 13 (statement -> while .)
    $end            reduce using rule 13 (statement -> while .)
    RBRACE          reduce using rule 13 (statement -> while .)
    TIMES           reduce using rule 13 (statement -> while .)
    DIVIDE          reduce using rule 13 (statement -> while .)
    MODULE          reduce using rule 13 (statement -> while .)
    SEMICOLON       reduce using rule 13 (statement -> while .)
    PLUS            reduce using rule 13 (statement -> while .)
    RPARENTHESIS    reduce using rule 13 (statement -> while .)
    COMMA           reduce using rule 13 (statement -> while .)
    RBRACKET        reduce using rule 13 (statement -> while .)
    EQUALS          reduce using rule 13 (statement -> while .)
    NOT_EQUALS      reduce using rule 13 (statement -> while .)
    GREATER_THAN    reduce using rule 13 (statement -> while .)
    LESS_THAN       reduce using rule 13 (statement -> while .)
    GREATER_THAN_OR_EQUALS reduce using rule 13 (statement -> while .)
    LESS_THAN_OR_EQUALS reduce using rule 13 (statement -> while .)
    AND             reduce using rule 13 (statement -> while .)
    OR              reduce using rule 13 (statement -> while .)
    COLON           reduce using rule 13 (statement -> while .)
    ELSE            reduce using rule 13 (statement -> while .)
    DEFAULT         reduce using rule 13 (statement -> while .)
    CASE            reduce using rule 13 (statement -> while .)


state 14

    (14) statement -> for .

    LBRACE          reduce using rule 14 (statement -> for .)
    CONTINUE        reduce using rule 14 (statement -> for .)
    BREAK           reduce using rule 14 (statement -> for .)
    LIST_TYPE       reduce using rule 14 (statement -> for .)
    MAP_TYPE        reduce using rule 14 (statement -> for .)
    SET_TYPE        reduce using rule 14 (statement -> for .)
    ID              reduce using rule 14 (statement -> for .)
    IMPORT          reduce using rule 14 (statement -> for .)
    IF              reduce using rule 14 (statement -> for .)
    WHILE           reduce using rule 14 (statement -> for .)
    FOR             reduce using rule 14 (statement -> for .)
    PRINT           reduce using rule 14 (statement -> for .)
    CLASS           reduce using rule 14 (statement -> for .)
    ENUM            reduce using rule 14 (statement -> for .)
    TRY             reduce using rule 14 (statement -> for .)
    SWITCH          reduce using rule 14 (statement -> for .)
    RETURN          reduce using rule 14 (statement -> for .)
    CONST           reduce using rule 14 (statement -> for .)
    FINAL           reduce using rule 14 (statement -> for .)
    LATE            reduce using rule 14 (statement -> for .)
    INT_TYPE        reduce using rule 14 (statement -> for .)
    STRING_TYPE     reduce using rule 14 (statement -> for .)
    NUM_TYPE        reduce using rule 14 (statement -> for .)
    DOUBLE_TYPE     reduce using rule 14 (statement -> for .)
    BOOL_TYPE       reduce using rule 14 (statement -> for .)
    VAR             reduce using rule 14 (statement -> for .)
    VOID            reduce using rule 14 (statement -> for .)
    MINUS           reduce using rule 14 (statement -> for .)
    INT             reduce using rule 14 (statement -> for .)
    DOUBLE          reduce using rule 14 (statement -> for .)
    LPARENTHESIS    reduce using rule 14 (statement -> for .)
    $end            reduce using rule 14 (statement -> for .)
    RBRACE          reduce using rule 14 (statement -> for .)
    TIMES           reduce using rule 14 (statement -> for .)
    DIVIDE          reduce using rule 14 (statement -> for .)
    MODULE          reduce using rule 14 (statement -> for .)
    SEMICOLON       reduce using rule 14 (statement -> for .)
    PLUS            reduce using rule 14 (statement -> for .)
    RPARENTHESIS    reduce using rule 14 (statement -> for .)
    COMMA           reduce using rule 14 (statement -> for .)
    RBRACKET        reduce using rule 14 (statement -> for .)
    EQUALS          reduce using rule 14 (statement -> for .)
    NOT_EQUALS      reduce using rule 14 (statement -> for .)
    GREATER_THAN    reduce using rule 14 (statement -> for .)
    LESS_THAN       reduce using rule 14 (statement -> for .)
    GREATER_THAN_OR_EQUALS reduce using rule 14 (statement -> for .)
    LESS_THAN_OR_EQUALS reduce using rule 14 (statement -> for .)
    AND             reduce using rule 14 (statement -> for .)
    OR              reduce using rule 14 (statement -> for .)
    COLON           reduce using rule 14 (statement -> for .)
    ELSE            reduce using rule 14 (statement -> for .)
    DEFAULT         reduce using rule 14 (statement -> for .)
    CASE            reduce using rule 14 (statement -> for .)


state 15

    (15) statement -> print .

    LBRACE          reduce using rule 15 (statement -> print .)
    CONTINUE        reduce using rule 15 (statement -> print .)
    BREAK           reduce using rule 15 (statement -> print .)
    LIST_TYPE       reduce using rule 15 (statement -> print .)
    MAP_TYPE        reduce using rule 15 (statement -> print .)
    SET_TYPE        reduce using rule 15 (statement -> print .)
    ID              reduce using rule 15 (statement -> print .)
    IMPORT          reduce using rule 15 (statement -> print .)
    IF              reduce using rule 15 (statement -> print .)
    WHILE           reduce using rule 15 (statement -> print .)
    FOR             reduce using rule 15 (statement -> print .)
    PRINT           reduce using rule 15 (statement -> print .)
    CLASS           reduce using rule 15 (statement -> print .)
    ENUM            reduce using rule 15 (statement -> print .)
    TRY             reduce using rule 15 (statement -> print .)
    SWITCH          reduce using rule 15 (statement -> print .)
    RETURN          reduce using rule 15 (statement -> print .)
    CONST           reduce using rule 15 (statement -> print .)
    FINAL           reduce using rule 15 (statement -> print .)
    LATE            reduce using rule 15 (statement -> print .)
    INT_TYPE        reduce using rule 15 (statement -> print .)
    STRING_TYPE     reduce using rule 15 (statement -> print .)
    NUM_TYPE        reduce using rule 15 (statement -> print .)
    DOUBLE_TYPE     reduce using rule 15 (statement -> print .)
    BOOL_TYPE       reduce using rule 15 (statement -> print .)
    VAR             reduce using rule 15 (statement -> print .)
    VOID            reduce using rule 15 (statement -> print .)
    MINUS           reduce using rule 15 (statement -> print .)
    INT             reduce using rule 15 (statement -> print .)
    DOUBLE          reduce using rule 15 (statement -> print .)
    LPARENTHESIS    reduce using rule 15 (statement -> print .)
    $end            reduce using rule 15 (statement -> print .)
    RBRACE          reduce using rule 15 (statement -> print .)
    TIMES           reduce using rule 15 (statement -> print .)
    DIVIDE          reduce using rule 15 (statement -> print .)
    MODULE          reduce using rule 15 (statement -> print .)
    SEMICOLON       reduce using rule 15 (statement -> print .)
    PLUS            reduce using rule 15 (statement -> print .)
    RPARENTHESIS    reduce using rule 15 (statement -> print .)
    COMMA           reduce using rule 15 (statement -> print .)
    RBRACKET        reduce using rule 15 (statement -> print .)
    EQUALS          reduce using rule 15 (statement -> print .)
    NOT_EQUALS      reduce using rule 15 (statement -> print .)
    GREATER_THAN    reduce using rule 15 (statement -> print .)
    LESS_THAN       reduce using rule 15 (statement -> print .)
    GREATER_THAN_OR_EQUALS reduce using rule 15 (statement -> print .)
    LESS_THAN_OR_EQUALS reduce using rule 15 (statement -> print .)
    AND             reduce using rule 15 (statement -> print .)
    OR              reduce using rule 15 (statement -> print .)
    COLON           reduce using rule 15 (statement -> print .)
    ELSE            reduce using rule 15 (statement -> print .)
    DEFAULT         reduce using rule 15 (statement -> print .)
    CASE            reduce using rule 15 (statement -> print .)


state 16

    (16) statement -> input .

    LBRACE          reduce using rule 16 (statement -> input .)
    CONTINUE        reduce using rule 16 (statement -> input .)
    BREAK           reduce using rule 16 (statement -> input .)
    LIST_TYPE       reduce using rule 16 (statement -> input .)
    MAP_TYPE        reduce using rule 16 (statement -> input .)
    SET_TYPE        reduce using rule 16 (statement -> input .)
    ID              reduce using rule 16 (statement -> input .)
    IMPORT          reduce using rule 16 (statement -> input .)
    IF              reduce using rule 16 (statement -> input .)
    WHILE           reduce using rule 16 (statement -> input .)
    FOR             reduce using rule 16 (statement -> input .)
    PRINT           reduce using rule 16 (statement -> input .)
    CLASS           reduce using rule 16 (statement -> input .)
    ENUM            reduce using rule 16 (statement -> input .)
    TRY             reduce using rule 16 (statement -> input .)
    SWITCH          reduce using rule 16 (statement -> input .)
    RETURN          reduce using rule 16 (statement -> input .)
    CONST           reduce using rule 16 (statement -> input .)
    FINAL           reduce using rule 16 (statement -> input .)
    LATE            reduce using rule 16 (statement -> input .)
    INT_TYPE        reduce using rule 16 (statement -> input .)
    STRING_TYPE     reduce using rule 16 (statement -> input .)
    NUM_TYPE        reduce using rule 16 (statement -> input .)
    DOUBLE_TYPE     reduce using rule 16 (statement -> input .)
    BOOL_TYPE       reduce using rule 16 (statement -> input .)
    VAR             reduce using rule 16 (statement -> input .)
    VOID            reduce using rule 16 (statement -> input .)
    MINUS           reduce using rule 16 (statement -> input .)
    INT             reduce using rule 16 (statement -> input .)
    DOUBLE          reduce using rule 16 (statement -> input .)
    LPARENTHESIS    reduce using rule 16 (statement -> input .)
    $end            reduce using rule 16 (statement -> input .)
    RBRACE          reduce using rule 16 (statement -> input .)
    TIMES           reduce using rule 16 (statement -> input .)
    DIVIDE          reduce using rule 16 (statement -> input .)
    MODULE          reduce using rule 16 (statement -> input .)
    SEMICOLON       reduce using rule 16 (statement -> input .)
    PLUS            reduce using rule 16 (statement -> input .)
    RPARENTHESIS    reduce using rule 16 (statement -> input .)
    COMMA           reduce using rule 16 (statement -> input .)
    RBRACKET        reduce using rule 16 (statement -> input .)
    EQUALS          reduce using rule 16 (statement -> input .)
    NOT_EQUALS      reduce using rule 16 (statement -> input .)
    GREATER_THAN    reduce using rule 16 (statement -> input .)
    LESS_THAN       reduce using rule 16 (statement -> input .)
    GREATER_THAN_OR_EQUALS reduce using rule 16 (statement -> input .)
    LESS_THAN_OR_EQUALS reduce using rule 16 (statement -> input .)
    AND             reduce using rule 16 (statement -> input .)
    OR              reduce using rule 16 (statement -> input .)
    COLON           reduce using rule 16 (statement -> input .)
    ELSE            reduce using rule 16 (statement -> input .)
    DEFAULT         reduce using rule 16 (statement -> input .)
    CASE            reduce using rule 16 (statement -> input .)


state 17

    (17) statement -> class_def .

    LBRACE          reduce using rule 17 (statement -> class_def .)
    CONTINUE        reduce using rule 17 (statement -> class_def .)
    BREAK           reduce using rule 17 (statement -> class_def .)
    LIST_TYPE       reduce using rule 17 (statement -> class_def .)
    MAP_TYPE        reduce using rule 17 (statement -> class_def .)
    SET_TYPE        reduce using rule 17 (statement -> class_def .)
    ID              reduce using rule 17 (statement -> class_def .)
    IMPORT          reduce using rule 17 (statement -> class_def .)
    IF              reduce using rule 17 (statement -> class_def .)
    WHILE           reduce using rule 17 (statement -> class_def .)
    FOR             reduce using rule 17 (statement -> class_def .)
    PRINT           reduce using rule 17 (statement -> class_def .)
    CLASS           reduce using rule 17 (statement -> class_def .)
    ENUM            reduce using rule 17 (statement -> class_def .)
    TRY             reduce using rule 17 (statement -> class_def .)
    SWITCH          reduce using rule 17 (statement -> class_def .)
    RETURN          reduce using rule 17 (statement -> class_def .)
    CONST           reduce using rule 17 (statement -> class_def .)
    FINAL           reduce using rule 17 (statement -> class_def .)
    LATE            reduce using rule 17 (statement -> class_def .)
    INT_TYPE        reduce using rule 17 (statement -> class_def .)
    STRING_TYPE     reduce using rule 17 (statement -> class_def .)
    NUM_TYPE        reduce using rule 17 (statement -> class_def .)
    DOUBLE_TYPE     reduce using rule 17 (statement -> class_def .)
    BOOL_TYPE       reduce using rule 17 (statement -> class_def .)
    VAR             reduce using rule 17 (statement -> class_def .)
    VOID            reduce using rule 17 (statement -> class_def .)
    MINUS           reduce using rule 17 (statement -> class_def .)
    INT             reduce using rule 17 (statement -> class_def .)
    DOUBLE          reduce using rule 17 (statement -> class_def .)
    LPARENTHESIS    reduce using rule 17 (statement -> class_def .)
    $end            reduce using rule 17 (statement -> class_def .)
    RBRACE          reduce using rule 17 (statement -> class_def .)
    TIMES           reduce using rule 17 (statement -> class_def .)
    DIVIDE          reduce using rule 17 (statement -> class_def .)
    MODULE          reduce using rule 17 (statement -> class_def .)
    SEMICOLON       reduce using rule 17 (statement -> class_def .)
    PLUS            reduce using rule 17 (statement -> class_def .)
    RPARENTHESIS    reduce using rule 17 (statement -> class_def .)
    COMMA           reduce using rule 17 (statement -> class_def .)
    RBRACKET        reduce using rule 17 (statement -> class_def .)
    EQUALS          reduce using rule 17 (statement -> class_def .)
    NOT_EQUALS      reduce using rule 17 (statement -> class_def .)
    GREATER_THAN    reduce using rule 17 (statement -> class_def .)
    LESS_THAN       reduce using rule 17 (statement -> class_def .)
    GREATER_THAN_OR_EQUALS reduce using rule 17 (statement -> class_def .)
    LESS_THAN_OR_EQUALS reduce using rule 17 (statement -> class_def .)
    AND             reduce using rule 17 (statement -> class_def .)
    OR              reduce using rule 17 (statement -> class_def .)
    COLON           reduce using rule 17 (statement -> class_def .)
    ELSE            reduce using rule 17 (statement -> class_def .)
    DEFAULT         reduce using rule 17 (statement -> class_def .)
    CASE            reduce using rule 17 (statement -> class_def .)


state 18

    (18) statement -> enum .

    LBRACE          reduce using rule 18 (statement -> enum .)
    CONTINUE        reduce using rule 18 (statement -> enum .)
    BREAK           reduce using rule 18 (statement -> enum .)
    LIST_TYPE       reduce using rule 18 (statement -> enum .)
    MAP_TYPE        reduce using rule 18 (statement -> enum .)
    SET_TYPE        reduce using rule 18 (statement -> enum .)
    ID              reduce using rule 18 (statement -> enum .)
    IMPORT          reduce using rule 18 (statement -> enum .)
    IF              reduce using rule 18 (statement -> enum .)
    WHILE           reduce using rule 18 (statement -> enum .)
    FOR             reduce using rule 18 (statement -> enum .)
    PRINT           reduce using rule 18 (statement -> enum .)
    CLASS           reduce using rule 18 (statement -> enum .)
    ENUM            reduce using rule 18 (statement -> enum .)
    TRY             reduce using rule 18 (statement -> enum .)
    SWITCH          reduce using rule 18 (statement -> enum .)
    RETURN          reduce using rule 18 (statement -> enum .)
    CONST           reduce using rule 18 (statement -> enum .)
    FINAL           reduce using rule 18 (statement -> enum .)
    LATE            reduce using rule 18 (statement -> enum .)
    INT_TYPE        reduce using rule 18 (statement -> enum .)
    STRING_TYPE     reduce using rule 18 (statement -> enum .)
    NUM_TYPE        reduce using rule 18 (statement -> enum .)
    DOUBLE_TYPE     reduce using rule 18 (statement -> enum .)
    BOOL_TYPE       reduce using rule 18 (statement -> enum .)
    VAR             reduce using rule 18 (statement -> enum .)
    VOID            reduce using rule 18 (statement -> enum .)
    MINUS           reduce using rule 18 (statement -> enum .)
    INT             reduce using rule 18 (statement -> enum .)
    DOUBLE          reduce using rule 18 (statement -> enum .)
    LPARENTHESIS    reduce using rule 18 (statement -> enum .)
    $end            reduce using rule 18 (statement -> enum .)
    RBRACE          reduce using rule 18 (statement -> enum .)
    TIMES           reduce using rule 18 (statement -> enum .)
    DIVIDE          reduce using rule 18 (statement -> enum .)
    MODULE          reduce using rule 18 (statement -> enum .)
    SEMICOLON       reduce using rule 18 (statement -> enum .)
    PLUS            reduce using rule 18 (statement -> enum .)
    RPARENTHESIS    reduce using rule 18 (statement -> enum .)
    COMMA           reduce using rule 18 (statement -> enum .)
    RBRACKET        reduce using rule 18 (statement -> enum .)
    EQUALS          reduce using rule 18 (statement -> enum .)
    NOT_EQUALS      reduce using rule 18 (statement -> enum .)
    GREATER_THAN    reduce using rule 18 (statement -> enum .)
    LESS_THAN       reduce using rule 18 (statement -> enum .)
    GREATER_THAN_OR_EQUALS reduce using rule 18 (statement -> enum .)
    LESS_THAN_OR_EQUALS reduce using rule 18 (statement -> enum .)
    AND             reduce using rule 18 (statement -> enum .)
    OR              reduce using rule 18 (statement -> enum .)
    COLON           reduce using rule 18 (statement -> enum .)
    ELSE            reduce using rule 18 (statement -> enum .)
    DEFAULT         reduce using rule 18 (statement -> enum .)
    CASE            reduce using rule 18 (statement -> enum .)


state 19

    (19) statement -> try .

    LBRACE          reduce using rule 19 (statement -> try .)
    CONTINUE        reduce using rule 19 (statement -> try .)
    BREAK           reduce using rule 19 (statement -> try .)
    LIST_TYPE       reduce using rule 19 (statement -> try .)
    MAP_TYPE        reduce using rule 19 (statement -> try .)
    SET_TYPE        reduce using rule 19 (statement -> try .)
    ID              reduce using rule 19 (statement -> try .)
    IMPORT          reduce using rule 19 (statement -> try .)
    IF              reduce using rule 19 (statement -> try .)
    WHILE           reduce using rule 19 (statement -> try .)
    FOR             reduce using rule 19 (statement -> try .)
    PRINT           reduce using rule 19 (statement -> try .)
    CLASS           reduce using rule 19 (statement -> try .)
    ENUM            reduce using rule 19 (statement -> try .)
    TRY             reduce using rule 19 (statement -> try .)
    SWITCH          reduce using rule 19 (statement -> try .)
    RETURN          reduce using rule 19 (statement -> try .)
    CONST           reduce using rule 19 (statement -> try .)
    FINAL           reduce using rule 19 (statement -> try .)
    LATE            reduce using rule 19 (statement -> try .)
    INT_TYPE        reduce using rule 19 (statement -> try .)
    STRING_TYPE     reduce using rule 19 (statement -> try .)
    NUM_TYPE        reduce using rule 19 (statement -> try .)
    DOUBLE_TYPE     reduce using rule 19 (statement -> try .)
    BOOL_TYPE       reduce using rule 19 (statement -> try .)
    VAR             reduce using rule 19 (statement -> try .)
    VOID            reduce using rule 19 (statement -> try .)
    MINUS           reduce using rule 19 (statement -> try .)
    INT             reduce using rule 19 (statement -> try .)
    DOUBLE          reduce using rule 19 (statement -> try .)
    LPARENTHESIS    reduce using rule 19 (statement -> try .)
    $end            reduce using rule 19 (statement -> try .)
    RBRACE          reduce using rule 19 (statement -> try .)
    TIMES           reduce using rule 19 (statement -> try .)
    DIVIDE          reduce using rule 19 (statement -> try .)
    MODULE          reduce using rule 19 (statement -> try .)
    SEMICOLON       reduce using rule 19 (statement -> try .)
    PLUS            reduce using rule 19 (statement -> try .)
    RPARENTHESIS    reduce using rule 19 (statement -> try .)
    COMMA           reduce using rule 19 (statement -> try .)
    RBRACKET        reduce using rule 19 (statement -> try .)
    EQUALS          reduce using rule 19 (statement -> try .)
    NOT_EQUALS      reduce using rule 19 (statement -> try .)
    GREATER_THAN    reduce using rule 19 (statement -> try .)
    LESS_THAN       reduce using rule 19 (statement -> try .)
    GREATER_THAN_OR_EQUALS reduce using rule 19 (statement -> try .)
    LESS_THAN_OR_EQUALS reduce using rule 19 (statement -> try .)
    AND             reduce using rule 19 (statement -> try .)
    OR              reduce using rule 19 (statement -> try .)
    COLON           reduce using rule 19 (statement -> try .)
    ELSE            reduce using rule 19 (statement -> try .)
    DEFAULT         reduce using rule 19 (statement -> try .)
    CASE            reduce using rule 19 (statement -> try .)


state 20

    (20) statement -> switch .

    LBRACE          reduce using rule 20 (statement -> switch .)
    CONTINUE        reduce using rule 20 (statement -> switch .)
    BREAK           reduce using rule 20 (statement -> switch .)
    LIST_TYPE       reduce using rule 20 (statement -> switch .)
    MAP_TYPE        reduce using rule 20 (statement -> switch .)
    SET_TYPE        reduce using rule 20 (statement -> switch .)
    ID              reduce using rule 20 (statement -> switch .)
    IMPORT          reduce using rule 20 (statement -> switch .)
    IF              reduce using rule 20 (statement -> switch .)
    WHILE           reduce using rule 20 (statement -> switch .)
    FOR             reduce using rule 20 (statement -> switch .)
    PRINT           reduce using rule 20 (statement -> switch .)
    CLASS           reduce using rule 20 (statement -> switch .)
    ENUM            reduce using rule 20 (statement -> switch .)
    TRY             reduce using rule 20 (statement -> switch .)
    SWITCH          reduce using rule 20 (statement -> switch .)
    RETURN          reduce using rule 20 (statement -> switch .)
    CONST           reduce using rule 20 (statement -> switch .)
    FINAL           reduce using rule 20 (statement -> switch .)
    LATE            reduce using rule 20 (statement -> switch .)
    INT_TYPE        reduce using rule 20 (statement -> switch .)
    STRING_TYPE     reduce using rule 20 (statement -> switch .)
    NUM_TYPE        reduce using rule 20 (statement -> switch .)
    DOUBLE_TYPE     reduce using rule 20 (statement -> switch .)
    BOOL_TYPE       reduce using rule 20 (statement -> switch .)
    VAR             reduce using rule 20 (statement -> switch .)
    VOID            reduce using rule 20 (statement -> switch .)
    MINUS           reduce using rule 20 (statement -> switch .)
    INT             reduce using rule 20 (statement -> switch .)
    DOUBLE          reduce using rule 20 (statement -> switch .)
    LPARENTHESIS    reduce using rule 20 (statement -> switch .)
    $end            reduce using rule 20 (statement -> switch .)
    RBRACE          reduce using rule 20 (statement -> switch .)
    TIMES           reduce using rule 20 (statement -> switch .)
    DIVIDE          reduce using rule 20 (statement -> switch .)
    MODULE          reduce using rule 20 (statement -> switch .)
    SEMICOLON       reduce using rule 20 (statement -> switch .)
    PLUS            reduce using rule 20 (statement -> switch .)
    RPARENTHESIS    reduce using rule 20 (statement -> switch .)
    COMMA           reduce using rule 20 (statement -> switch .)
    RBRACKET        reduce using rule 20 (statement -> switch .)
    EQUALS          reduce using rule 20 (statement -> switch .)
    NOT_EQUALS      reduce using rule 20 (statement -> switch .)
    GREATER_THAN    reduce using rule 20 (statement -> switch .)
    LESS_THAN       reduce using rule 20 (statement -> switch .)
    GREATER_THAN_OR_EQUALS reduce using rule 20 (statement -> switch .)
    LESS_THAN_OR_EQUALS reduce using rule 20 (statement -> switch .)
    AND             reduce using rule 20 (statement -> switch .)
    OR              reduce using rule 20 (statement -> switch .)
    COLON           reduce using rule 20 (statement -> switch .)
    ELSE            reduce using rule 20 (statement -> switch .)
    DEFAULT         reduce using rule 20 (statement -> switch .)
    CASE            reduce using rule 20 (statement -> switch .)


state 21

    (21) statement -> empty .

    LBRACE          reduce using rule 21 (statement -> empty .)
    CONTINUE        reduce using rule 21 (statement -> empty .)
    BREAK           reduce using rule 21 (statement -> empty .)
    LIST_TYPE       reduce using rule 21 (statement -> empty .)
    MAP_TYPE        reduce using rule 21 (statement -> empty .)
    SET_TYPE        reduce using rule 21 (statement -> empty .)
    ID              reduce using rule 21 (statement -> empty .)
    IMPORT          reduce using rule 21 (statement -> empty .)
    IF              reduce using rule 21 (statement -> empty .)
    WHILE           reduce using rule 21 (statement -> empty .)
    FOR             reduce using rule 21 (statement -> empty .)
    PRINT           reduce using rule 21 (statement -> empty .)
    CLASS           reduce using rule 21 (statement -> empty .)
    ENUM            reduce using rule 21 (statement -> empty .)
    TRY             reduce using rule 21 (statement -> empty .)
    SWITCH          reduce using rule 21 (statement -> empty .)
    RETURN          reduce using rule 21 (statement -> empty .)
    CONST           reduce using rule 21 (statement -> empty .)
    FINAL           reduce using rule 21 (statement -> empty .)
    LATE            reduce using rule 21 (statement -> empty .)
    INT_TYPE        reduce using rule 21 (statement -> empty .)
    STRING_TYPE     reduce using rule 21 (statement -> empty .)
    NUM_TYPE        reduce using rule 21 (statement -> empty .)
    DOUBLE_TYPE     reduce using rule 21 (statement -> empty .)
    BOOL_TYPE       reduce using rule 21 (statement -> empty .)
    VAR             reduce using rule 21 (statement -> empty .)
    VOID            reduce using rule 21 (statement -> empty .)
    MINUS           reduce using rule 21 (statement -> empty .)
    INT             reduce using rule 21 (statement -> empty .)
    DOUBLE          reduce using rule 21 (statement -> empty .)
    LPARENTHESIS    reduce using rule 21 (statement -> empty .)
    $end            reduce using rule 21 (statement -> empty .)
    RBRACE          reduce using rule 21 (statement -> empty .)
    TIMES           reduce using rule 21 (statement -> empty .)
    DIVIDE          reduce using rule 21 (statement -> empty .)
    MODULE          reduce using rule 21 (statement -> empty .)
    SEMICOLON       reduce using rule 21 (statement -> empty .)
    PLUS            reduce using rule 21 (statement -> empty .)
    RPARENTHESIS    reduce using rule 21 (statement -> empty .)
    COMMA           reduce using rule 21 (statement -> empty .)
    RBRACKET        reduce using rule 21 (statement -> empty .)
    EQUALS          reduce using rule 21 (statement -> empty .)
    NOT_EQUALS      reduce using rule 21 (statement -> empty .)
    GREATER_THAN    reduce using rule 21 (statement -> empty .)
    LESS_THAN       reduce using rule 21 (statement -> empty .)
    GREATER_THAN_OR_EQUALS reduce using rule 21 (statement -> empty .)
    LESS_THAN_OR_EQUALS reduce using rule 21 (statement -> empty .)
    AND             reduce using rule 21 (statement -> empty .)
    OR              reduce using rule 21 (statement -> empty .)
    COLON           reduce using rule 21 (statement -> empty .)
    ELSE            reduce using rule 21 (statement -> empty .)
    DEFAULT         reduce using rule 21 (statement -> empty .)
    CASE            reduce using rule 21 (statement -> empty .)


state 22

    (22) statement -> return . SEMICOLON

    SEMICOLON       shift and go to state 70


state 23

    (23) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 71


state 24

    (24) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 72


state 25

    (78) expression -> term .
    (79) term -> term . TIMES factor
    (80) term -> term . DIVIDE factor
    (81) term -> term . MODULE factor

    SEMICOLON       reduce using rule 78 (expression -> term .)
    PLUS            reduce using rule 78 (expression -> term .)
    MINUS           reduce using rule 78 (expression -> term .)
    RPARENTHESIS    reduce using rule 78 (expression -> term .)
    COMMA           reduce using rule 78 (expression -> term .)
    RBRACKET        reduce using rule 78 (expression -> term .)
    EQUALS          reduce using rule 78 (expression -> term .)
    NOT_EQUALS      reduce using rule 78 (expression -> term .)
    GREATER_THAN    reduce using rule 78 (expression -> term .)
    LESS_THAN       reduce using rule 78 (expression -> term .)
    GREATER_THAN_OR_EQUALS reduce using rule 78 (expression -> term .)
    LESS_THAN_OR_EQUALS reduce using rule 78 (expression -> term .)
    AND             reduce using rule 78 (expression -> term .)
    OR              reduce using rule 78 (expression -> term .)
    RBRACE          reduce using rule 78 (expression -> term .)
    COLON           reduce using rule 78 (expression -> term .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    MODULE          shift and go to state 75


state 26

    (83) factor -> MINUS . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    factor                         shift and go to state 76

state 27

    (25) declaration -> declaration_with_modifier .

    SEMICOLON       reduce using rule 25 (declaration -> declaration_with_modifier .)
    ASSIGN_OPERATOR reduce using rule 25 (declaration -> declaration_with_modifier .)
    LPARENTHESIS    reduce using rule 25 (declaration -> declaration_with_modifier .)
    RPARENTHESIS    reduce using rule 25 (declaration -> declaration_with_modifier .)
    COMMA           reduce using rule 25 (declaration -> declaration_with_modifier .)


state 28

    (26) declaration -> declaration_without_modifier .

    SEMICOLON       reduce using rule 26 (declaration -> declaration_without_modifier .)
    ASSIGN_OPERATOR reduce using rule 26 (declaration -> declaration_without_modifier .)
    LPARENTHESIS    reduce using rule 26 (declaration -> declaration_without_modifier .)
    RPARENTHESIS    reduce using rule 26 (declaration -> declaration_without_modifier .)
    COMMA           reduce using rule 26 (declaration -> declaration_without_modifier .)


state 29

    (30) declaration -> LIST_TYPE . LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (52) varType -> LIST_TYPE .

    LESS_THAN       shift and go to state 78
    ID              reduce using rule 52 (varType -> LIST_TYPE .)


state 30

    (29) declaration_without_modifier -> varType . ID

    ID              shift and go to state 79


state 31

    (39) assignation -> ID . ASSIGN_OPERATOR variable
    (40) assignation -> ID . PLUS_EQUALS expression
    (41) assignation -> ID . MINUS_EQUALS expression
    (42) assignation -> ID . TIMES_EQUALS expression
    (43) assignation -> ID . DIVIDE_EQUALS expression
    (110) increment -> ID . INCREMENT
    (111) decrement -> ID . DECREMENT
    (121) function -> ID . LPARENTHESIS parameters RPARENTHESIS
    (130) input -> ID . ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (86) factor -> ID .
    (88) factor -> ID . LBRACKET expression RBRACKET
    (89) factor -> ID . DOT function statement
    (90) factor -> ID . DOT function
    (91) factor -> ID . DOT ID

    ASSIGN_OPERATOR shift and go to state 80
    PLUS_EQUALS     shift and go to state 81
    MINUS_EQUALS    shift and go to state 82
    TIMES_EQUALS    shift and go to state 83
    DIVIDE_EQUALS   shift and go to state 84
    INCREMENT       shift and go to state 85
    DECREMENT       shift and go to state 86
    LPARENTHESIS    shift and go to state 87
    TIMES           reduce using rule 86 (factor -> ID .)
    DIVIDE          reduce using rule 86 (factor -> ID .)
    MODULE          reduce using rule 86 (factor -> ID .)
    SEMICOLON       reduce using rule 86 (factor -> ID .)
    PLUS            reduce using rule 86 (factor -> ID .)
    MINUS           reduce using rule 86 (factor -> ID .)
    LBRACKET        shift and go to state 89
    DOT             shift and go to state 88


state 32

    (31) declaration -> declaration_modifier . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (34) declaration -> declaration_modifier . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (36) declaration -> declaration_modifier . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (27) declaration_with_modifier -> declaration_modifier . varType ID
    (28) declaration_with_modifier -> declaration_modifier . ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    LIST_TYPE       shift and go to state 90
    MAP_TYPE        shift and go to state 93
    SET_TYPE        shift and go to state 94
    ID              shift and go to state 92
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    varType                        shift and go to state 91

state 33

    (33) declaration -> MAP_TYPE . LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (53) varType -> MAP_TYPE .

    LESS_THAN       shift and go to state 95
    ID              reduce using rule 53 (varType -> MAP_TYPE .)


state 34

    (35) declaration -> SET_TYPE . LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (54) varType -> SET_TYPE .

    LESS_THAN       shift and go to state 96
    ID              reduce using rule 54 (varType -> SET_TYPE .)


state 35

    (142) import -> IMPORT . STRING SEMICOLON

    STRING          shift and go to state 97


state 36

    (87) factor -> LPARENTHESIS . expression RPARENTHESIS
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    expression                     shift and go to state 98
    term                           shift and go to state 25
    factor                         shift and go to state 46

state 37

    (102) if -> IF . LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> IF . LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement

    LPARENTHESIS    shift and go to state 99


state 38

    (104) while -> WHILE . LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE

    LPARENTHESIS    shift and go to state 100


state 39

    (105) for -> FOR . LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> FOR . LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> FOR . LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block

    LPARENTHESIS    shift and go to state 101


state 40

    (129) print -> PRINT . LPARENTHESIS variable RPARENTHESIS SEMICOLON

    LPARENTHESIS    shift and go to state 102


state 41

    (131) class_def -> CLASS . ID LBRACE class_members RBRACE

    ID              shift and go to state 103


state 42

    (136) enum -> ENUM . ID LBRACE enum_values RBRACE

    ID              shift and go to state 104


state 43

    (112) try -> TRY . LBRACE statements RBRACE FINALLY LBRACE statements RBRACE

    LBRACE          shift and go to state 105


state 44

    (113) switch -> SWITCH . LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE

    LPARENTHESIS    shift and go to state 106


state 45

    (140) return -> RETURN . variable
    (141) return -> RETURN .
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    SEMICOLON       reduce using rule 141 (return -> RETURN .)
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 107
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 46

    (82) term -> factor .

    TIMES           reduce using rule 82 (term -> factor .)
    DIVIDE          reduce using rule 82 (term -> factor .)
    MODULE          reduce using rule 82 (term -> factor .)
    SEMICOLON       reduce using rule 82 (term -> factor .)
    PLUS            reduce using rule 82 (term -> factor .)
    MINUS           reduce using rule 82 (term -> factor .)
    RPARENTHESIS    reduce using rule 82 (term -> factor .)
    COMMA           reduce using rule 82 (term -> factor .)
    RBRACKET        reduce using rule 82 (term -> factor .)
    EQUALS          reduce using rule 82 (term -> factor .)
    NOT_EQUALS      reduce using rule 82 (term -> factor .)
    GREATER_THAN    reduce using rule 82 (term -> factor .)
    LESS_THAN       reduce using rule 82 (term -> factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 82 (term -> factor .)
    LESS_THAN_OR_EQUALS reduce using rule 82 (term -> factor .)
    AND             reduce using rule 82 (term -> factor .)
    OR              reduce using rule 82 (term -> factor .)
    RBRACE          reduce using rule 82 (term -> factor .)
    COLON           reduce using rule 82 (term -> factor .)


state 47

    (44) declaration_modifier -> CONST .

    LIST_TYPE       reduce using rule 44 (declaration_modifier -> CONST .)
    MAP_TYPE        reduce using rule 44 (declaration_modifier -> CONST .)
    SET_TYPE        reduce using rule 44 (declaration_modifier -> CONST .)
    ID              reduce using rule 44 (declaration_modifier -> CONST .)
    INT_TYPE        reduce using rule 44 (declaration_modifier -> CONST .)
    STRING_TYPE     reduce using rule 44 (declaration_modifier -> CONST .)
    NUM_TYPE        reduce using rule 44 (declaration_modifier -> CONST .)
    DOUBLE_TYPE     reduce using rule 44 (declaration_modifier -> CONST .)
    BOOL_TYPE       reduce using rule 44 (declaration_modifier -> CONST .)
    VAR             reduce using rule 44 (declaration_modifier -> CONST .)
    VOID            reduce using rule 44 (declaration_modifier -> CONST .)


state 48

    (45) declaration_modifier -> FINAL .

    LIST_TYPE       reduce using rule 45 (declaration_modifier -> FINAL .)
    MAP_TYPE        reduce using rule 45 (declaration_modifier -> FINAL .)
    SET_TYPE        reduce using rule 45 (declaration_modifier -> FINAL .)
    ID              reduce using rule 45 (declaration_modifier -> FINAL .)
    INT_TYPE        reduce using rule 45 (declaration_modifier -> FINAL .)
    STRING_TYPE     reduce using rule 45 (declaration_modifier -> FINAL .)
    NUM_TYPE        reduce using rule 45 (declaration_modifier -> FINAL .)
    DOUBLE_TYPE     reduce using rule 45 (declaration_modifier -> FINAL .)
    BOOL_TYPE       reduce using rule 45 (declaration_modifier -> FINAL .)
    VAR             reduce using rule 45 (declaration_modifier -> FINAL .)
    VOID            reduce using rule 45 (declaration_modifier -> FINAL .)


state 49

    (46) declaration_modifier -> LATE .

    LIST_TYPE       reduce using rule 46 (declaration_modifier -> LATE .)
    MAP_TYPE        reduce using rule 46 (declaration_modifier -> LATE .)
    SET_TYPE        reduce using rule 46 (declaration_modifier -> LATE .)
    ID              reduce using rule 46 (declaration_modifier -> LATE .)
    INT_TYPE        reduce using rule 46 (declaration_modifier -> LATE .)
    STRING_TYPE     reduce using rule 46 (declaration_modifier -> LATE .)
    NUM_TYPE        reduce using rule 46 (declaration_modifier -> LATE .)
    DOUBLE_TYPE     reduce using rule 46 (declaration_modifier -> LATE .)
    BOOL_TYPE       reduce using rule 46 (declaration_modifier -> LATE .)
    VAR             reduce using rule 46 (declaration_modifier -> LATE .)
    VOID            reduce using rule 46 (declaration_modifier -> LATE .)


state 58

    (84) factor -> INT .

    TIMES           reduce using rule 84 (factor -> INT .)
    DIVIDE          reduce using rule 84 (factor -> INT .)
    MODULE          reduce using rule 84 (factor -> INT .)
    SEMICOLON       reduce using rule 84 (factor -> INT .)
    PLUS            reduce using rule 84 (factor -> INT .)
    MINUS           reduce using rule 84 (factor -> INT .)
    RPARENTHESIS    reduce using rule 84 (factor -> INT .)
    COMMA           reduce using rule 84 (factor -> INT .)
    RBRACKET        reduce using rule 84 (factor -> INT .)
    EQUALS          reduce using rule 84 (factor -> INT .)
    NOT_EQUALS      reduce using rule 84 (factor -> INT .)
    GREATER_THAN    reduce using rule 84 (factor -> INT .)
    LESS_THAN       reduce using rule 84 (factor -> INT .)
    GREATER_THAN_OR_EQUALS reduce using rule 84 (factor -> INT .)
    LESS_THAN_OR_EQUALS reduce using rule 84 (factor -> INT .)
    AND             reduce using rule 84 (factor -> INT .)
    OR              reduce using rule 84 (factor -> INT .)
    RBRACE          reduce using rule 84 (factor -> INT .)
    COLON           reduce using rule 84 (factor -> INT .)


state 51

    (85) factor -> DOUBLE .

    TIMES           reduce using rule 85 (factor -> DOUBLE .)
    DIVIDE          reduce using rule 85 (factor -> DOUBLE .)
    MODULE          reduce using rule 85 (factor -> DOUBLE .)
    SEMICOLON       reduce using rule 85 (factor -> DOUBLE .)
    PLUS            reduce using rule 85 (factor -> DOUBLE .)
    MINUS           reduce using rule 85 (factor -> DOUBLE .)
    RPARENTHESIS    reduce using rule 85 (factor -> DOUBLE .)
    COMMA           reduce using rule 85 (factor -> DOUBLE .)
    RBRACKET        reduce using rule 85 (factor -> DOUBLE .)
    EQUALS          reduce using rule 85 (factor -> DOUBLE .)
    NOT_EQUALS      reduce using rule 85 (factor -> DOUBLE .)
    GREATER_THAN    reduce using rule 85 (factor -> DOUBLE .)
    LESS_THAN       reduce using rule 85 (factor -> DOUBLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 85 (factor -> DOUBLE .)
    LESS_THAN_OR_EQUALS reduce using rule 85 (factor -> DOUBLE .)
    AND             reduce using rule 85 (factor -> DOUBLE .)
    OR              reduce using rule 85 (factor -> DOUBLE .)
    RBRACE          reduce using rule 85 (factor -> DOUBLE .)
    COLON           reduce using rule 85 (factor -> DOUBLE .)


state 52

    (47) varType -> INT_TYPE .

    ID              reduce using rule 47 (varType -> INT_TYPE .)
    GREATER_THAN    reduce using rule 47 (varType -> INT_TYPE .)
    COMMA           reduce using rule 47 (varType -> INT_TYPE .)


state 53

    (48) varType -> STRING_TYPE .

    ID              reduce using rule 48 (varType -> STRING_TYPE .)
    GREATER_THAN    reduce using rule 48 (varType -> STRING_TYPE .)
    COMMA           reduce using rule 48 (varType -> STRING_TYPE .)


state 54

    (49) varType -> NUM_TYPE .

    ID              reduce using rule 49 (varType -> NUM_TYPE .)
    GREATER_THAN    reduce using rule 49 (varType -> NUM_TYPE .)
    COMMA           reduce using rule 49 (varType -> NUM_TYPE .)


state 55

    (50) varType -> DOUBLE_TYPE .

    ID              reduce using rule 50 (varType -> DOUBLE_TYPE .)
    GREATER_THAN    reduce using rule 50 (varType -> DOUBLE_TYPE .)
    COMMA           reduce using rule 50 (varType -> DOUBLE_TYPE .)


state 56

    (51) varType -> BOOL_TYPE .

    ID              reduce using rule 51 (varType -> BOOL_TYPE .)
    GREATER_THAN    reduce using rule 51 (varType -> BOOL_TYPE .)
    COMMA           reduce using rule 51 (varType -> BOOL_TYPE .)


state 57

    (55) varType -> VAR .

    ID              reduce using rule 55 (varType -> VAR .)
    GREATER_THAN    reduce using rule 55 (varType -> VAR .)
    COMMA           reduce using rule 55 (varType -> VAR .)


state 58

    (56) varType -> VOID .

    ID              reduce using rule 56 (varType -> VOID .)
    GREATER_THAN    reduce using rule 56 (varType -> VOID .)
    COMMA           reduce using rule 56 (varType -> VOID .)


state 59

    (2) statements -> statements statement .

    LBRACE          reduce using rule 2 (statements -> statements statement .)
    CONTINUE        reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)
    LIST_TYPE       reduce using rule 2 (statements -> statements statement .)
    MAP_TYPE        reduce using rule 2 (statements -> statements statement .)
    SET_TYPE        reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    IMPORT          reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    CLASS           reduce using rule 2 (statements -> statements statement .)
    ENUM            reduce using rule 2 (statements -> statements statement .)
    TRY             reduce using rule 2 (statements -> statements statement .)
    SWITCH          reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    CONST           reduce using rule 2 (statements -> statements statement .)
    FINAL           reduce using rule 2 (statements -> statements statement .)
    LATE            reduce using rule 2 (statements -> statements statement .)
    INT_TYPE        reduce using rule 2 (statements -> statements statement .)
    STRING_TYPE     reduce using rule 2 (statements -> statements statement .)
    NUM_TYPE        reduce using rule 2 (statements -> statements statement .)
    DOUBLE_TYPE     reduce using rule 2 (statements -> statements statement .)
    BOOL_TYPE       reduce using rule 2 (statements -> statements statement .)
    VAR             reduce using rule 2 (statements -> statements statement .)
    VOID            reduce using rule 2 (statements -> statements statement .)
    MINUS           reduce using rule 2 (statements -> statements statement .)
    INT             reduce using rule 2 (statements -> statements statement .)
    DOUBLE          reduce using rule 2 (statements -> statements statement .)
    LPARENTHESIS    reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    RBRACE          reduce using rule 2 (statements -> statements statement .)
    SEMICOLON       reduce using rule 2 (statements -> statements statement .)
    DEFAULT         reduce using rule 2 (statements -> statements statement .)
    CASE            reduce using rule 2 (statements -> statements statement .)


state 60

    (4) statement -> LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    RBRACE          shift and go to state 119
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! RBRACE          [ reduce using rule 143 (empty -> .) ]
  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statement                      shift and go to state 59
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 61

    (5) statement -> expression SEMICOLON .

    LBRACE          reduce using rule 5 (statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 5 (statement -> expression SEMICOLON .)
    BREAK           reduce using rule 5 (statement -> expression SEMICOLON .)
    LIST_TYPE       reduce using rule 5 (statement -> expression SEMICOLON .)
    MAP_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    SET_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    ID              reduce using rule 5 (statement -> expression SEMICOLON .)
    IMPORT          reduce using rule 5 (statement -> expression SEMICOLON .)
    IF              reduce using rule 5 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> expression SEMICOLON .)
    FOR             reduce using rule 5 (statement -> expression SEMICOLON .)
    PRINT           reduce using rule 5 (statement -> expression SEMICOLON .)
    CLASS           reduce using rule 5 (statement -> expression SEMICOLON .)
    ENUM            reduce using rule 5 (statement -> expression SEMICOLON .)
    TRY             reduce using rule 5 (statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 5 (statement -> expression SEMICOLON .)
    RETURN          reduce using rule 5 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 5 (statement -> expression SEMICOLON .)
    FINAL           reduce using rule 5 (statement -> expression SEMICOLON .)
    LATE            reduce using rule 5 (statement -> expression SEMICOLON .)
    INT_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    STRING_TYPE     reduce using rule 5 (statement -> expression SEMICOLON .)
    NUM_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 5 (statement -> expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 5 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 5 (statement -> expression SEMICOLON .)
    VOID            reduce using rule 5 (statement -> expression SEMICOLON .)
    MINUS           reduce using rule 5 (statement -> expression SEMICOLON .)
    INT             reduce using rule 5 (statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 5 (statement -> expression SEMICOLON .)
    LPARENTHESIS    reduce using rule 5 (statement -> expression SEMICOLON .)
    $end            reduce using rule 5 (statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 5 (statement -> expression SEMICOLON .)
    TIMES           reduce using rule 5 (statement -> expression SEMICOLON .)
    DIVIDE          reduce using rule 5 (statement -> expression SEMICOLON .)
    MODULE          reduce using rule 5 (statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 5 (statement -> expression SEMICOLON .)
    PLUS            reduce using rule 5 (statement -> expression SEMICOLON .)
    RPARENTHESIS    reduce using rule 5 (statement -> expression SEMICOLON .)
    COMMA           reduce using rule 5 (statement -> expression SEMICOLON .)
    RBRACKET        reduce using rule 5 (statement -> expression SEMICOLON .)
    EQUALS          reduce using rule 5 (statement -> expression SEMICOLON .)
    NOT_EQUALS      reduce using rule 5 (statement -> expression SEMICOLON .)
    GREATER_THAN    reduce using rule 5 (statement -> expression SEMICOLON .)
    LESS_THAN       reduce using rule 5 (statement -> expression SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 5 (statement -> expression SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 5 (statement -> expression SEMICOLON .)
    AND             reduce using rule 5 (statement -> expression SEMICOLON .)
    OR              reduce using rule 5 (statement -> expression SEMICOLON .)
    COLON           reduce using rule 5 (statement -> expression SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 5 (statement -> expression SEMICOLON .)
    CASE            reduce using rule 5 (statement -> expression SEMICOLON .)


state 62

    (76) expression -> expression PLUS . term
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    term                           shift and go to state 120
    factor                         shift and go to state 46

state 63

    (77) expression -> expression MINUS . term
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    term                           shift and go to state 121
    factor                         shift and go to state 46

state 64

    (6) statement -> declaration SEMICOLON .

    LBRACE          reduce using rule 6 (statement -> declaration SEMICOLON .)
    CONTINUE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    BREAK           reduce using rule 6 (statement -> declaration SEMICOLON .)
    LIST_TYPE       reduce using rule 6 (statement -> declaration SEMICOLON .)
    MAP_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    SET_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    ID              reduce using rule 6 (statement -> declaration SEMICOLON .)
    IMPORT          reduce using rule 6 (statement -> declaration SEMICOLON .)
    IF              reduce using rule 6 (statement -> declaration SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> declaration SEMICOLON .)
    FOR             reduce using rule 6 (statement -> declaration SEMICOLON .)
    PRINT           reduce using rule 6 (statement -> declaration SEMICOLON .)
    CLASS           reduce using rule 6 (statement -> declaration SEMICOLON .)
    ENUM            reduce using rule 6 (statement -> declaration SEMICOLON .)
    TRY             reduce using rule 6 (statement -> declaration SEMICOLON .)
    SWITCH          reduce using rule 6 (statement -> declaration SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> declaration SEMICOLON .)
    CONST           reduce using rule 6 (statement -> declaration SEMICOLON .)
    FINAL           reduce using rule 6 (statement -> declaration SEMICOLON .)
    LATE            reduce using rule 6 (statement -> declaration SEMICOLON .)
    INT_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    STRING_TYPE     reduce using rule 6 (statement -> declaration SEMICOLON .)
    NUM_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 6 (statement -> declaration SEMICOLON .)
    BOOL_TYPE       reduce using rule 6 (statement -> declaration SEMICOLON .)
    VAR             reduce using rule 6 (statement -> declaration SEMICOLON .)
    VOID            reduce using rule 6 (statement -> declaration SEMICOLON .)
    MINUS           reduce using rule 6 (statement -> declaration SEMICOLON .)
    INT             reduce using rule 6 (statement -> declaration SEMICOLON .)
    DOUBLE          reduce using rule 6 (statement -> declaration SEMICOLON .)
    LPARENTHESIS    reduce using rule 6 (statement -> declaration SEMICOLON .)
    $end            reduce using rule 6 (statement -> declaration SEMICOLON .)
    RBRACE          reduce using rule 6 (statement -> declaration SEMICOLON .)
    TIMES           reduce using rule 6 (statement -> declaration SEMICOLON .)
    DIVIDE          reduce using rule 6 (statement -> declaration SEMICOLON .)
    MODULE          reduce using rule 6 (statement -> declaration SEMICOLON .)
    SEMICOLON       reduce using rule 6 (statement -> declaration SEMICOLON .)
    PLUS            reduce using rule 6 (statement -> declaration SEMICOLON .)
    RPARENTHESIS    reduce using rule 6 (statement -> declaration SEMICOLON .)
    COMMA           reduce using rule 6 (statement -> declaration SEMICOLON .)
    RBRACKET        reduce using rule 6 (statement -> declaration SEMICOLON .)
    EQUALS          reduce using rule 6 (statement -> declaration SEMICOLON .)
    NOT_EQUALS      reduce using rule 6 (statement -> declaration SEMICOLON .)
    GREATER_THAN    reduce using rule 6 (statement -> declaration SEMICOLON .)
    LESS_THAN       reduce using rule 6 (statement -> declaration SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 6 (statement -> declaration SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 6 (statement -> declaration SEMICOLON .)
    AND             reduce using rule 6 (statement -> declaration SEMICOLON .)
    OR              reduce using rule 6 (statement -> declaration SEMICOLON .)
    COLON           reduce using rule 6 (statement -> declaration SEMICOLON .)
    ELSE            reduce using rule 6 (statement -> declaration SEMICOLON .)
    DEFAULT         reduce using rule 6 (statement -> declaration SEMICOLON .)
    CASE            reduce using rule 6 (statement -> declaration SEMICOLON .)


state 65

    (32) declaration -> declaration ASSIGN_OPERATOR . LESS_THAN varType GREATER_THAN list_literal
    (38) assignation -> declaration ASSIGN_OPERATOR . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    LESS_THAN       shift and go to state 122
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    declaration                    shift and go to state 117
    varType                        shift and go to state 30
    variable                       shift and go to state 123
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 66

    (120) function -> declaration LPARENTHESIS . parameters RPARENTHESIS LBRACE statements RBRACE
    (122) function -> declaration LPARENTHESIS . parameters RPARENTHESIS ARROW expression SEMICOLON
    (123) parameters -> . parameters COMMA parameter
    (124) parameters -> . parameter
    (125) parameters -> . empty
    (126) parameter -> . declaration
    (127) parameter -> . variable
    (143) empty -> .
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    RPARENTHESIS    reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    LPARENTHESIS    shift and go to state 118
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58
    MINUS           shift and go to state 26

    declaration                    shift and go to state 124
    parameters                     shift and go to state 125
    expression                     shift and go to state 116
    parameter                      shift and go to state 126
    empty                          shift and go to state 127
    variable                       shift and go to state 128
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 129
    declaration_modifier           shift and go to state 32
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    term                           shift and go to state 25
    factor                         shift and go to state 46

state 67

    (7) statement -> assignation SEMICOLON .

    LBRACE          reduce using rule 7 (statement -> assignation SEMICOLON .)
    CONTINUE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    BREAK           reduce using rule 7 (statement -> assignation SEMICOLON .)
    LIST_TYPE       reduce using rule 7 (statement -> assignation SEMICOLON .)
    MAP_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    SET_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    ID              reduce using rule 7 (statement -> assignation SEMICOLON .)
    IMPORT          reduce using rule 7 (statement -> assignation SEMICOLON .)
    IF              reduce using rule 7 (statement -> assignation SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> assignation SEMICOLON .)
    FOR             reduce using rule 7 (statement -> assignation SEMICOLON .)
    PRINT           reduce using rule 7 (statement -> assignation SEMICOLON .)
    CLASS           reduce using rule 7 (statement -> assignation SEMICOLON .)
    ENUM            reduce using rule 7 (statement -> assignation SEMICOLON .)
    TRY             reduce using rule 7 (statement -> assignation SEMICOLON .)
    SWITCH          reduce using rule 7 (statement -> assignation SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> assignation SEMICOLON .)
    CONST           reduce using rule 7 (statement -> assignation SEMICOLON .)
    FINAL           reduce using rule 7 (statement -> assignation SEMICOLON .)
    LATE            reduce using rule 7 (statement -> assignation SEMICOLON .)
    INT_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    STRING_TYPE     reduce using rule 7 (statement -> assignation SEMICOLON .)
    NUM_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 7 (statement -> assignation SEMICOLON .)
    BOOL_TYPE       reduce using rule 7 (statement -> assignation SEMICOLON .)
    VAR             reduce using rule 7 (statement -> assignation SEMICOLON .)
    VOID            reduce using rule 7 (statement -> assignation SEMICOLON .)
    MINUS           reduce using rule 7 (statement -> assignation SEMICOLON .)
    INT             reduce using rule 7 (statement -> assignation SEMICOLON .)
    DOUBLE          reduce using rule 7 (statement -> assignation SEMICOLON .)
    LPARENTHESIS    reduce using rule 7 (statement -> assignation SEMICOLON .)
    $end            reduce using rule 7 (statement -> assignation SEMICOLON .)
    RBRACE          reduce using rule 7 (statement -> assignation SEMICOLON .)
    TIMES           reduce using rule 7 (statement -> assignation SEMICOLON .)
    DIVIDE          reduce using rule 7 (statement -> assignation SEMICOLON .)
    MODULE          reduce using rule 7 (statement -> assignation SEMICOLON .)
    SEMICOLON       reduce using rule 7 (statement -> assignation SEMICOLON .)
    PLUS            reduce using rule 7 (statement -> assignation SEMICOLON .)
    RPARENTHESIS    reduce using rule 7 (statement -> assignation SEMICOLON .)
    COMMA           reduce using rule 7 (statement -> assignation SEMICOLON .)
    RBRACKET        reduce using rule 7 (statement -> assignation SEMICOLON .)
    EQUALS          reduce using rule 7 (statement -> assignation SEMICOLON .)
    NOT_EQUALS      reduce using rule 7 (statement -> assignation SEMICOLON .)
    GREATER_THAN    reduce using rule 7 (statement -> assignation SEMICOLON .)
    LESS_THAN       reduce using rule 7 (statement -> assignation SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 7 (statement -> assignation SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 7 (statement -> assignation SEMICOLON .)
    AND             reduce using rule 7 (statement -> assignation SEMICOLON .)
    OR              reduce using rule 7 (statement -> assignation SEMICOLON .)
    COLON           reduce using rule 7 (statement -> assignation SEMICOLON .)
    ELSE            reduce using rule 7 (statement -> assignation SEMICOLON .)
    DEFAULT         reduce using rule 7 (statement -> assignation SEMICOLON .)
    CASE            reduce using rule 7 (statement -> assignation SEMICOLON .)


state 68

    (8) statement -> increment SEMICOLON .

    LBRACE          reduce using rule 8 (statement -> increment SEMICOLON .)
    CONTINUE        reduce using rule 8 (statement -> increment SEMICOLON .)
    BREAK           reduce using rule 8 (statement -> increment SEMICOLON .)
    LIST_TYPE       reduce using rule 8 (statement -> increment SEMICOLON .)
    MAP_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    SET_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    ID              reduce using rule 8 (statement -> increment SEMICOLON .)
    IMPORT          reduce using rule 8 (statement -> increment SEMICOLON .)
    IF              reduce using rule 8 (statement -> increment SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> increment SEMICOLON .)
    FOR             reduce using rule 8 (statement -> increment SEMICOLON .)
    PRINT           reduce using rule 8 (statement -> increment SEMICOLON .)
    CLASS           reduce using rule 8 (statement -> increment SEMICOLON .)
    ENUM            reduce using rule 8 (statement -> increment SEMICOLON .)
    TRY             reduce using rule 8 (statement -> increment SEMICOLON .)
    SWITCH          reduce using rule 8 (statement -> increment SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> increment SEMICOLON .)
    CONST           reduce using rule 8 (statement -> increment SEMICOLON .)
    FINAL           reduce using rule 8 (statement -> increment SEMICOLON .)
    LATE            reduce using rule 8 (statement -> increment SEMICOLON .)
    INT_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    STRING_TYPE     reduce using rule 8 (statement -> increment SEMICOLON .)
    NUM_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 8 (statement -> increment SEMICOLON .)
    BOOL_TYPE       reduce using rule 8 (statement -> increment SEMICOLON .)
    VAR             reduce using rule 8 (statement -> increment SEMICOLON .)
    VOID            reduce using rule 8 (statement -> increment SEMICOLON .)
    MINUS           reduce using rule 8 (statement -> increment SEMICOLON .)
    INT             reduce using rule 8 (statement -> increment SEMICOLON .)
    DOUBLE          reduce using rule 8 (statement -> increment SEMICOLON .)
    LPARENTHESIS    reduce using rule 8 (statement -> increment SEMICOLON .)
    $end            reduce using rule 8 (statement -> increment SEMICOLON .)
    RBRACE          reduce using rule 8 (statement -> increment SEMICOLON .)
    TIMES           reduce using rule 8 (statement -> increment SEMICOLON .)
    DIVIDE          reduce using rule 8 (statement -> increment SEMICOLON .)
    MODULE          reduce using rule 8 (statement -> increment SEMICOLON .)
    SEMICOLON       reduce using rule 8 (statement -> increment SEMICOLON .)
    PLUS            reduce using rule 8 (statement -> increment SEMICOLON .)
    RPARENTHESIS    reduce using rule 8 (statement -> increment SEMICOLON .)
    COMMA           reduce using rule 8 (statement -> increment SEMICOLON .)
    RBRACKET        reduce using rule 8 (statement -> increment SEMICOLON .)
    EQUALS          reduce using rule 8 (statement -> increment SEMICOLON .)
    NOT_EQUALS      reduce using rule 8 (statement -> increment SEMICOLON .)
    GREATER_THAN    reduce using rule 8 (statement -> increment SEMICOLON .)
    LESS_THAN       reduce using rule 8 (statement -> increment SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 8 (statement -> increment SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 8 (statement -> increment SEMICOLON .)
    AND             reduce using rule 8 (statement -> increment SEMICOLON .)
    OR              reduce using rule 8 (statement -> increment SEMICOLON .)
    COLON           reduce using rule 8 (statement -> increment SEMICOLON .)
    ELSE            reduce using rule 8 (statement -> increment SEMICOLON .)
    DEFAULT         reduce using rule 8 (statement -> increment SEMICOLON .)
    CASE            reduce using rule 8 (statement -> increment SEMICOLON .)


state 69

    (9) statement -> decrement SEMICOLON .

    LBRACE          reduce using rule 9 (statement -> decrement SEMICOLON .)
    CONTINUE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    BREAK           reduce using rule 9 (statement -> decrement SEMICOLON .)
    LIST_TYPE       reduce using rule 9 (statement -> decrement SEMICOLON .)
    MAP_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    SET_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    ID              reduce using rule 9 (statement -> decrement SEMICOLON .)
    IMPORT          reduce using rule 9 (statement -> decrement SEMICOLON .)
    IF              reduce using rule 9 (statement -> decrement SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> decrement SEMICOLON .)
    FOR             reduce using rule 9 (statement -> decrement SEMICOLON .)
    PRINT           reduce using rule 9 (statement -> decrement SEMICOLON .)
    CLASS           reduce using rule 9 (statement -> decrement SEMICOLON .)
    ENUM            reduce using rule 9 (statement -> decrement SEMICOLON .)
    TRY             reduce using rule 9 (statement -> decrement SEMICOLON .)
    SWITCH          reduce using rule 9 (statement -> decrement SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> decrement SEMICOLON .)
    CONST           reduce using rule 9 (statement -> decrement SEMICOLON .)
    FINAL           reduce using rule 9 (statement -> decrement SEMICOLON .)
    LATE            reduce using rule 9 (statement -> decrement SEMICOLON .)
    INT_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    STRING_TYPE     reduce using rule 9 (statement -> decrement SEMICOLON .)
    NUM_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 9 (statement -> decrement SEMICOLON .)
    BOOL_TYPE       reduce using rule 9 (statement -> decrement SEMICOLON .)
    VAR             reduce using rule 9 (statement -> decrement SEMICOLON .)
    VOID            reduce using rule 9 (statement -> decrement SEMICOLON .)
    MINUS           reduce using rule 9 (statement -> decrement SEMICOLON .)
    INT             reduce using rule 9 (statement -> decrement SEMICOLON .)
    DOUBLE          reduce using rule 9 (statement -> decrement SEMICOLON .)
    LPARENTHESIS    reduce using rule 9 (statement -> decrement SEMICOLON .)
    $end            reduce using rule 9 (statement -> decrement SEMICOLON .)
    RBRACE          reduce using rule 9 (statement -> decrement SEMICOLON .)
    TIMES           reduce using rule 9 (statement -> decrement SEMICOLON .)
    DIVIDE          reduce using rule 9 (statement -> decrement SEMICOLON .)
    MODULE          reduce using rule 9 (statement -> decrement SEMICOLON .)
    SEMICOLON       reduce using rule 9 (statement -> decrement SEMICOLON .)
    PLUS            reduce using rule 9 (statement -> decrement SEMICOLON .)
    RPARENTHESIS    reduce using rule 9 (statement -> decrement SEMICOLON .)
    COMMA           reduce using rule 9 (statement -> decrement SEMICOLON .)
    RBRACKET        reduce using rule 9 (statement -> decrement SEMICOLON .)
    EQUALS          reduce using rule 9 (statement -> decrement SEMICOLON .)
    NOT_EQUALS      reduce using rule 9 (statement -> decrement SEMICOLON .)
    GREATER_THAN    reduce using rule 9 (statement -> decrement SEMICOLON .)
    LESS_THAN       reduce using rule 9 (statement -> decrement SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 9 (statement -> decrement SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 9 (statement -> decrement SEMICOLON .)
    AND             reduce using rule 9 (statement -> decrement SEMICOLON .)
    OR              reduce using rule 9 (statement -> decrement SEMICOLON .)
    COLON           reduce using rule 9 (statement -> decrement SEMICOLON .)
    ELSE            reduce using rule 9 (statement -> decrement SEMICOLON .)
    DEFAULT         reduce using rule 9 (statement -> decrement SEMICOLON .)
    CASE            reduce using rule 9 (statement -> decrement SEMICOLON .)


state 70

    (22) statement -> return SEMICOLON .

    LBRACE          reduce using rule 22 (statement -> return SEMICOLON .)
    CONTINUE        reduce using rule 22 (statement -> return SEMICOLON .)
    BREAK           reduce using rule 22 (statement -> return SEMICOLON .)
    LIST_TYPE       reduce using rule 22 (statement -> return SEMICOLON .)
    MAP_TYPE        reduce using rule 22 (statement -> return SEMICOLON .)
    SET_TYPE        reduce using rule 22 (statement -> return SEMICOLON .)
    ID              reduce using rule 22 (statement -> return SEMICOLON .)
    IMPORT          reduce using rule 22 (statement -> return SEMICOLON .)
    IF              reduce using rule 22 (statement -> return SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> return SEMICOLON .)
    FOR             reduce using rule 22 (statement -> return SEMICOLON .)
    PRINT           reduce using rule 22 (statement -> return SEMICOLON .)
    CLASS           reduce using rule 22 (statement -> return SEMICOLON .)
    ENUM            reduce using rule 22 (statement -> return SEMICOLON .)
    TRY             reduce using rule 22 (statement -> return SEMICOLON .)
    SWITCH          reduce using rule 22 (statement -> return SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> return SEMICOLON .)
    CONST           reduce using rule 22 (statement -> return SEMICOLON .)
    FINAL           reduce using rule 22 (statement -> return SEMICOLON .)
    LATE            reduce using rule 22 (statement -> return SEMICOLON .)
    INT_TYPE        reduce using rule 22 (statement -> return SEMICOLON .)
    STRING_TYPE     reduce using rule 22 (statement -> return SEMICOLON .)
    NUM_TYPE        reduce using rule 22 (statement -> return SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 22 (statement -> return SEMICOLON .)
    BOOL_TYPE       reduce using rule 22 (statement -> return SEMICOLON .)
    VAR             reduce using rule 22 (statement -> return SEMICOLON .)
    VOID            reduce using rule 22 (statement -> return SEMICOLON .)
    MINUS           reduce using rule 22 (statement -> return SEMICOLON .)
    INT             reduce using rule 22 (statement -> return SEMICOLON .)
    DOUBLE          reduce using rule 22 (statement -> return SEMICOLON .)
    LPARENTHESIS    reduce using rule 22 (statement -> return SEMICOLON .)
    $end            reduce using rule 22 (statement -> return SEMICOLON .)
    RBRACE          reduce using rule 22 (statement -> return SEMICOLON .)
    TIMES           reduce using rule 22 (statement -> return SEMICOLON .)
    DIVIDE          reduce using rule 22 (statement -> return SEMICOLON .)
    MODULE          reduce using rule 22 (statement -> return SEMICOLON .)
    SEMICOLON       reduce using rule 22 (statement -> return SEMICOLON .)
    PLUS            reduce using rule 22 (statement -> return SEMICOLON .)
    RPARENTHESIS    reduce using rule 22 (statement -> return SEMICOLON .)
    COMMA           reduce using rule 22 (statement -> return SEMICOLON .)
    RBRACKET        reduce using rule 22 (statement -> return SEMICOLON .)
    EQUALS          reduce using rule 22 (statement -> return SEMICOLON .)
    NOT_EQUALS      reduce using rule 22 (statement -> return SEMICOLON .)
    GREATER_THAN    reduce using rule 22 (statement -> return SEMICOLON .)
    LESS_THAN       reduce using rule 22 (statement -> return SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 22 (statement -> return SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 22 (statement -> return SEMICOLON .)
    AND             reduce using rule 22 (statement -> return SEMICOLON .)
    OR              reduce using rule 22 (statement -> return SEMICOLON .)
    COLON           reduce using rule 22 (statement -> return SEMICOLON .)
    ELSE            reduce using rule 22 (statement -> return SEMICOLON .)
    DEFAULT         reduce using rule 22 (statement -> return SEMICOLON .)
    CASE            reduce using rule 22 (statement -> return SEMICOLON .)


state 71

    (23) statement -> CONTINUE SEMICOLON .

    LBRACE          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    LIST_TYPE       reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    MAP_TYPE        reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    SET_TYPE        reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    IMPORT          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    PRINT           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    FINAL           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    LATE            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    INT_TYPE        reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    STRING_TYPE     reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    NUM_TYPE        reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    BOOL_TYPE       reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    LPARENTHESIS    reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    TIMES           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    DIVIDE          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    MODULE          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    RPARENTHESIS    reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    COMMA           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    RBRACKET        reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    EQUALS          reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    NOT_EQUALS      reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    GREATER_THAN    reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    LESS_THAN       reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    AND             reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    OR              reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    COLON           reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 23 (statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 23 (statement -> CONTINUE SEMICOLON .)


state 72

    (24) statement -> BREAK SEMICOLON .

    LBRACE          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 24 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    LIST_TYPE       reduce using rule 24 (statement -> BREAK SEMICOLON .)
    MAP_TYPE        reduce using rule 24 (statement -> BREAK SEMICOLON .)
    SET_TYPE        reduce using rule 24 (statement -> BREAK SEMICOLON .)
    ID              reduce using rule 24 (statement -> BREAK SEMICOLON .)
    IMPORT          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 24 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 24 (statement -> BREAK SEMICOLON .)
    PRINT           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 24 (statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 24 (statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    FINAL           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    LATE            reduce using rule 24 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 24 (statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    LPARENTHESIS    reduce using rule 24 (statement -> BREAK SEMICOLON .)
    INT_TYPE        reduce using rule 24 (statement -> BREAK SEMICOLON .)
    STRING_TYPE     reduce using rule 24 (statement -> BREAK SEMICOLON .)
    NUM_TYPE        reduce using rule 24 (statement -> BREAK SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 24 (statement -> BREAK SEMICOLON .)
    BOOL_TYPE       reduce using rule 24 (statement -> BREAK SEMICOLON .)
    VAR             reduce using rule 24 (statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 24 (statement -> BREAK SEMICOLON .)
    $end            reduce using rule 24 (statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    TIMES           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    DIVIDE          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    MODULE          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 24 (statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 24 (statement -> BREAK SEMICOLON .)
    RPARENTHESIS    reduce using rule 24 (statement -> BREAK SEMICOLON .)
    COMMA           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    RBRACKET        reduce using rule 24 (statement -> BREAK SEMICOLON .)
    EQUALS          reduce using rule 24 (statement -> BREAK SEMICOLON .)
    NOT_EQUALS      reduce using rule 24 (statement -> BREAK SEMICOLON .)
    GREATER_THAN    reduce using rule 24 (statement -> BREAK SEMICOLON .)
    LESS_THAN       reduce using rule 24 (statement -> BREAK SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 24 (statement -> BREAK SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 24 (statement -> BREAK SEMICOLON .)
    AND             reduce using rule 24 (statement -> BREAK SEMICOLON .)
    OR              reduce using rule 24 (statement -> BREAK SEMICOLON .)
    COLON           reduce using rule 24 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 24 (statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 24 (statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 24 (statement -> BREAK SEMICOLON .)


state 73

    (79) term -> term TIMES . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    factor                         shift and go to state 132

state 74

    (80) term -> term DIVIDE . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    factor                         shift and go to state 130

state 75

    (81) term -> term MODULE . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    factor                         shift and go to state 131

state 76

    (83) factor -> MINUS factor .

    TIMES           reduce using rule 83 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 83 (factor -> MINUS factor .)
    MODULE          reduce using rule 83 (factor -> MINUS factor .)
    SEMICOLON       reduce using rule 83 (factor -> MINUS factor .)
    PLUS            reduce using rule 83 (factor -> MINUS factor .)
    MINUS           reduce using rule 83 (factor -> MINUS factor .)
    RPARENTHESIS    reduce using rule 83 (factor -> MINUS factor .)
    COMMA           reduce using rule 83 (factor -> MINUS factor .)
    RBRACKET        reduce using rule 83 (factor -> MINUS factor .)
    EQUALS          reduce using rule 83 (factor -> MINUS factor .)
    NOT_EQUALS      reduce using rule 83 (factor -> MINUS factor .)
    GREATER_THAN    reduce using rule 83 (factor -> MINUS factor .)
    LESS_THAN       reduce using rule 83 (factor -> MINUS factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 83 (factor -> MINUS factor .)
    LESS_THAN_OR_EQUALS reduce using rule 83 (factor -> MINUS factor .)
    AND             reduce using rule 83 (factor -> MINUS factor .)
    OR              reduce using rule 83 (factor -> MINUS factor .)
    RBRACE          reduce using rule 83 (factor -> MINUS factor .)
    COLON           reduce using rule 83 (factor -> MINUS factor .)


state 77

    (86) factor -> ID .
    (88) factor -> ID . LBRACKET expression RBRACKET
    (89) factor -> ID . DOT function statement
    (90) factor -> ID . DOT function
    (91) factor -> ID . DOT ID

    TIMES           reduce using rule 86 (factor -> ID .)
    DIVIDE          reduce using rule 86 (factor -> ID .)
    MODULE          reduce using rule 86 (factor -> ID .)
    SEMICOLON       reduce using rule 86 (factor -> ID .)
    PLUS            reduce using rule 86 (factor -> ID .)
    MINUS           reduce using rule 86 (factor -> ID .)
    RPARENTHESIS    reduce using rule 86 (factor -> ID .)
    COMMA           reduce using rule 86 (factor -> ID .)
    RBRACKET        reduce using rule 86 (factor -> ID .)
    EQUALS          reduce using rule 86 (factor -> ID .)
    NOT_EQUALS      reduce using rule 86 (factor -> ID .)
    GREATER_THAN    reduce using rule 86 (factor -> ID .)
    LESS_THAN       reduce using rule 86 (factor -> ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 86 (factor -> ID .)
    LESS_THAN_OR_EQUALS reduce using rule 86 (factor -> ID .)
    AND             reduce using rule 86 (factor -> ID .)
    OR              reduce using rule 86 (factor -> ID .)
    RBRACE          reduce using rule 86 (factor -> ID .)
    COLON           reduce using rule 86 (factor -> ID .)
    LBRACKET        shift and go to state 89
    DOT             shift and go to state 88


state 78

    (30) declaration -> LIST_TYPE LESS_THAN . varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 132
    MAP_TYPE        shift and go to state 134
    SET_TYPE        shift and go to state 135
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    varType                        shift and go to state 133

state 79

    (29) declaration_without_modifier -> varType ID .

    SEMICOLON       reduce using rule 29 (declaration_without_modifier -> varType ID .)
    ASSIGN_OPERATOR reduce using rule 29 (declaration_without_modifier -> varType ID .)
    LPARENTHESIS    reduce using rule 29 (declaration_without_modifier -> varType ID .)
    RPARENTHESIS    reduce using rule 29 (declaration_without_modifier -> varType ID .)
    COMMA           reduce using rule 29 (declaration_without_modifier -> varType ID .)


state 80

    (39) assignation -> ID ASSIGN_OPERATOR . variable
    (130) input -> ID ASSIGN_OPERATOR . STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    STDIN           shift and go to state 137
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 136
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration                    shift and go to state 116
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 81

    (40) assignation -> ID PLUS_EQUALS . expression
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    expression                     shift and go to state 138
    term                           shift and go to state 25
    factor                         shift and go to state 46

state 82

    (41) assignation -> ID MINUS_EQUALS . expression
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    expression                     shift and go to state 139
    term                           shift and go to state 25
    factor                         shift and go to state 46

state 83

    (42) assignation -> ID TIMES_EQUALS . expression
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    expression                     shift and go to state 140
    term                           shift and go to state 25
    factor                         shift and go to state 46

state 84

    (43) assignation -> ID DIVIDE_EQUALS . expression
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    expression                     shift and go to state 141
    term                           shift and go to state 25
    factor                         shift and go to state 46

state 85

    (110) increment -> ID INCREMENT .

    SEMICOLON       reduce using rule 110 (increment -> ID INCREMENT .)
    RPARENTHESIS    reduce using rule 110 (increment -> ID INCREMENT .)


state 86

    (111) decrement -> ID DECREMENT .

    SEMICOLON       reduce using rule 111 (decrement -> ID DECREMENT .)
    RPARENTHESIS    reduce using rule 111 (decrement -> ID DECREMENT .)


state 87

    (121) function -> ID LPARENTHESIS . parameters RPARENTHESIS
    (123) parameters -> . parameters COMMA parameter
    (124) parameters -> . parameter
    (125) parameters -> . empty
    (126) parameter -> . declaration
    (127) parameter -> . variable
    (143) empty -> .
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    RPARENTHESIS    reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    LPARENTHESIS    shift and go to state 118
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58
    MINUS           shift and go to state 26

    parameters                     shift and go to state 142
    parameter                      shift and go to state 126
    empty                          shift and go to state 127
    declaration                    shift and go to state 124
    variable                       shift and go to state 128
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 129
    declaration_modifier           shift and go to state 32
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    term                           shift and go to state 25
    factor                         shift and go to state 46

state 88

    (89) factor -> ID DOT . function statement
    (90) factor -> ID DOT . function
    (91) factor -> ID DOT . ID
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    ID              shift and go to state 143
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    function                       shift and go to state 144
    declaration                    shift and go to state 117
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration                    shift and go to state 116
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32

state 89

    (88) factor -> ID LBRACKET . expression RBRACKET
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    expression                     shift and go to state 145
    term                           shift and go to state 25
    factor                         shift and go to state 46

state 90

    (31) declaration -> declaration_modifier LIST_TYPE . LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (52) varType -> LIST_TYPE .

    LESS_THAN       shift and go to state 146
    ID              reduce using rule 52 (varType -> LIST_TYPE .)


state 91

    (27) declaration_with_modifier -> declaration_modifier varType . ID

    ID              shift and go to state 147


state 92

    (28) declaration_with_modifier -> declaration_modifier ID .

    SEMICOLON       reduce using rule 28 (declaration_with_modifier -> declaration_modifier ID .)
    ASSIGN_OPERATOR reduce using rule 28 (declaration_with_modifier -> declaration_modifier ID .)
    LPARENTHESIS    reduce using rule 28 (declaration_with_modifier -> declaration_modifier ID .)
    RPARENTHESIS    reduce using rule 28 (declaration_with_modifier -> declaration_modifier ID .)
    COMMA           reduce using rule 28 (declaration_with_modifier -> declaration_modifier ID .)


state 93

    (34) declaration -> declaration_modifier MAP_TYPE . LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (53) varType -> MAP_TYPE .

    LESS_THAN       shift and go to state 148
    ID              reduce using rule 53 (varType -> MAP_TYPE .)


state 94

    (36) declaration -> declaration_modifier SET_TYPE . LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (54) varType -> SET_TYPE .

    LESS_THAN       shift and go to state 149
    ID              reduce using rule 54 (varType -> SET_TYPE .)


state 95

    (33) declaration -> MAP_TYPE LESS_THAN . varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 132
    MAP_TYPE        shift and go to state 134
    SET_TYPE        shift and go to state 135
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    varType                        shift and go to state 150

state 96

    (35) declaration -> SET_TYPE LESS_THAN . varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 132
    MAP_TYPE        shift and go to state 134
    SET_TYPE        shift and go to state 135
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    varType                        shift and go to state 151

state 97

    (142) import -> IMPORT STRING . SEMICOLON

    SEMICOLON       shift and go to state 152


state 98

    (87) factor -> LPARENTHESIS expression . RPARENTHESIS
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    RPARENTHESIS    shift and go to state 153
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 99

    (102) if -> IF LPARENTHESIS . booleanExpression RPARENTHESIS statement
    (103) if -> IF LPARENTHESIS . booleanExpression RPARENTHESIS statement ELSE statement
    (92) booleanExpression -> . variable EQUALS variable
    (93) booleanExpression -> . variable NOT_EQUALS variable
    (94) booleanExpression -> . variable GREATER_THAN variable
    (95) booleanExpression -> . variable LESS_THAN variable
    (96) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (97) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (98) booleanExpression -> . booleanExpression AND booleanExpression
    (99) booleanExpression -> . booleanExpression OR booleanExpression
    (100) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (101) booleanExpression -> . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    LPARENTHESIS    shift and go to state 154
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    booleanExpression              shift and go to state 155
    variable                       shift and go to state 156
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 100

    (104) while -> WHILE LPARENTHESIS . booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (92) booleanExpression -> . variable EQUALS variable
    (93) booleanExpression -> . variable NOT_EQUALS variable
    (94) booleanExpression -> . variable GREATER_THAN variable
    (95) booleanExpression -> . variable LESS_THAN variable
    (96) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (97) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (98) booleanExpression -> . booleanExpression AND booleanExpression
    (99) booleanExpression -> . booleanExpression OR booleanExpression
    (100) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (101) booleanExpression -> . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    LPARENTHESIS    shift and go to state 154
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    booleanExpression              shift and go to state 157
    variable                       shift and go to state 156
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration                    shift and go to state 116
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 101

    (105) for -> FOR LPARENTHESIS . assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> FOR LPARENTHESIS . assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> FOR LPARENTHESIS . varType ID IN ID RPARENTHESIS for_in_block
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE

    ID              shift and go to state 160
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 162
    MAP_TYPE        shift and go to state 163
    SET_TYPE        shift and go to state 164
    VAR             shift and go to state 57
    VOID            shift and go to state 58
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49

    assignation                    shift and go to state 158
    varType                        shift and go to state 159
    declaration                    shift and go to state 161
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32

state 102

    (129) print -> PRINT LPARENTHESIS . variable RPARENTHESIS SEMICOLON
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 165
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 103

    (131) class_def -> CLASS ID . LBRACE class_members RBRACE

    LBRACE          shift and go to state 166


state 104

    (136) enum -> ENUM ID . LBRACE enum_values RBRACE

    LBRACE          shift and go to state 167


state 105

    (112) try -> TRY LBRACE . statements RBRACE FINALLY LBRACE statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RBRACE          reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statements                     shift and go to state 168
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 106

    (113) switch -> SWITCH LPARENTHESIS . variable RPARENTHESIS LBRACE cases default_case RBRACE
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 169
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 107

    (140) return -> RETURN variable .

    SEMICOLON       reduce using rule 140 (return -> RETURN variable .)


state 108

    (67) variable -> INT .
    (84) factor -> INT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for COMMA resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for EQUALS resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for AND resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for OR resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for COLON resolved using rule 67 (variable -> INT .)
    SEMICOLON       reduce using rule 67 (variable -> INT .)
    RPARENTHESIS    reduce using rule 67 (variable -> INT .)
    COMMA           reduce using rule 67 (variable -> INT .)
    EQUALS          reduce using rule 67 (variable -> INT .)
    NOT_EQUALS      reduce using rule 67 (variable -> INT .)
    GREATER_THAN    reduce using rule 67 (variable -> INT .)
    LESS_THAN       reduce using rule 67 (variable -> INT .)
    GREATER_THAN_OR_EQUALS reduce using rule 67 (variable -> INT .)
    LESS_THAN_OR_EQUALS reduce using rule 67 (variable -> INT .)
    AND             reduce using rule 67 (variable -> INT .)
    OR              reduce using rule 67 (variable -> INT .)
    RBRACE          reduce using rule 67 (variable -> INT .)
    RBRACKET        reduce using rule 67 (variable -> INT .)
    COLON           reduce using rule 67 (variable -> INT .)
    TIMES           reduce using rule 84 (factor -> INT .)
    DIVIDE          reduce using rule 84 (factor -> INT .)
    MODULE          reduce using rule 84 (factor -> INT .)
    PLUS            reduce using rule 84 (factor -> INT .)
    MINUS           reduce using rule 84 (factor -> INT .)

  ! SEMICOLON       [ reduce using rule 84 (factor -> INT .) ]
  ! RPARENTHESIS    [ reduce using rule 84 (factor -> INT .) ]
  ! COMMA           [ reduce using rule 84 (factor -> INT .) ]
  ! EQUALS          [ reduce using rule 84 (factor -> INT .) ]
  ! NOT_EQUALS      [ reduce using rule 84 (factor -> INT .) ]
  ! GREATER_THAN    [ reduce using rule 84 (factor -> INT .) ]
  ! LESS_THAN       [ reduce using rule 84 (factor -> INT .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 84 (factor -> INT .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 84 (factor -> INT .) ]
  ! AND             [ reduce using rule 84 (factor -> INT .) ]
  ! OR              [ reduce using rule 84 (factor -> INT .) ]
  ! RBRACE          [ reduce using rule 84 (factor -> INT .) ]
  ! RBRACKET        [ reduce using rule 84 (factor -> INT .) ]
  ! COLON           [ reduce using rule 84 (factor -> INT .) ]


state 109

    (68) variable -> DOUBLE .
    (85) factor -> DOUBLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for EQUALS resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for AND resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for OR resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for COLON resolved using rule 68 (variable -> DOUBLE .)
    SEMICOLON       reduce using rule 68 (variable -> DOUBLE .)
    RPARENTHESIS    reduce using rule 68 (variable -> DOUBLE .)
    COMMA           reduce using rule 68 (variable -> DOUBLE .)
    EQUALS          reduce using rule 68 (variable -> DOUBLE .)
    NOT_EQUALS      reduce using rule 68 (variable -> DOUBLE .)
    GREATER_THAN    reduce using rule 68 (variable -> DOUBLE .)
    LESS_THAN       reduce using rule 68 (variable -> DOUBLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 68 (variable -> DOUBLE .)
    LESS_THAN_OR_EQUALS reduce using rule 68 (variable -> DOUBLE .)
    AND             reduce using rule 68 (variable -> DOUBLE .)
    OR              reduce using rule 68 (variable -> DOUBLE .)
    RBRACE          reduce using rule 68 (variable -> DOUBLE .)
    RBRACKET        reduce using rule 68 (variable -> DOUBLE .)
    COLON           reduce using rule 68 (variable -> DOUBLE .)
    TIMES           reduce using rule 85 (factor -> DOUBLE .)
    DIVIDE          reduce using rule 85 (factor -> DOUBLE .)
    MODULE          reduce using rule 85 (factor -> DOUBLE .)
    PLUS            reduce using rule 85 (factor -> DOUBLE .)
    MINUS           reduce using rule 85 (factor -> DOUBLE .)

  ! SEMICOLON       [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! RPARENTHESIS    [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! COMMA           [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! EQUALS          [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! NOT_EQUALS      [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! GREATER_THAN    [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! LESS_THAN       [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! AND             [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! OR              [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! RBRACE          [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! RBRACKET        [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! COLON           [ reduce using rule 85 (factor -> DOUBLE .) ]


state 110

    (69) variable -> STRING .

    SEMICOLON       reduce using rule 69 (variable -> STRING .)
    RPARENTHESIS    reduce using rule 69 (variable -> STRING .)
    COMMA           reduce using rule 69 (variable -> STRING .)
    EQUALS          reduce using rule 69 (variable -> STRING .)
    NOT_EQUALS      reduce using rule 69 (variable -> STRING .)
    GREATER_THAN    reduce using rule 69 (variable -> STRING .)
    LESS_THAN       reduce using rule 69 (variable -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 69 (variable -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 69 (variable -> STRING .)
    AND             reduce using rule 69 (variable -> STRING .)
    OR              reduce using rule 69 (variable -> STRING .)
    RBRACE          reduce using rule 69 (variable -> STRING .)
    RBRACKET        reduce using rule 69 (variable -> STRING .)
    COLON           reduce using rule 69 (variable -> STRING .)


state 111

    (70) variable -> BOOL .

    SEMICOLON       reduce using rule 70 (variable -> BOOL .)
    RPARENTHESIS    reduce using rule 70 (variable -> BOOL .)
    COMMA           reduce using rule 70 (variable -> BOOL .)
    EQUALS          reduce using rule 70 (variable -> BOOL .)
    NOT_EQUALS      reduce using rule 70 (variable -> BOOL .)
    GREATER_THAN    reduce using rule 70 (variable -> BOOL .)
    LESS_THAN       reduce using rule 70 (variable -> BOOL .)
    GREATER_THAN_OR_EQUALS reduce using rule 70 (variable -> BOOL .)
    LESS_THAN_OR_EQUALS reduce using rule 70 (variable -> BOOL .)
    AND             reduce using rule 70 (variable -> BOOL .)
    OR              reduce using rule 70 (variable -> BOOL .)
    RBRACE          reduce using rule 70 (variable -> BOOL .)
    RBRACKET        reduce using rule 70 (variable -> BOOL .)
    COLON           reduce using rule 70 (variable -> BOOL .)


state 112

    (71) variable -> NULL .

    SEMICOLON       reduce using rule 71 (variable -> NULL .)
    RPARENTHESIS    reduce using rule 71 (variable -> NULL .)
    COMMA           reduce using rule 71 (variable -> NULL .)
    EQUALS          reduce using rule 71 (variable -> NULL .)
    NOT_EQUALS      reduce using rule 71 (variable -> NULL .)
    GREATER_THAN    reduce using rule 71 (variable -> NULL .)
    LESS_THAN       reduce using rule 71 (variable -> NULL .)
    GREATER_THAN_OR_EQUALS reduce using rule 71 (variable -> NULL .)
    LESS_THAN_OR_EQUALS reduce using rule 71 (variable -> NULL .)
    AND             reduce using rule 71 (variable -> NULL .)
    OR              reduce using rule 71 (variable -> NULL .)
    RBRACE          reduce using rule 71 (variable -> NULL .)
    RBRACKET        reduce using rule 71 (variable -> NULL .)
    COLON           reduce using rule 71 (variable -> NULL .)


state 113

    (72) variable -> ID .
    (121) function -> ID . LPARENTHESIS parameters RPARENTHESIS
    (86) factor -> ID .
    (88) factor -> ID . LBRACKET expression RBRACKET
    (89) factor -> ID . DOT function statement
    (90) factor -> ID . DOT function
    (91) factor -> ID . DOT ID

  ! reduce/reduce conflict for SEMICOLON resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for EQUALS resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for RBRACE resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 72 (variable -> ID .)
    SEMICOLON       reduce using rule 72 (variable -> ID .)
    RPARENTHESIS    reduce using rule 72 (variable -> ID .)
    COMMA           reduce using rule 72 (variable -> ID .)
    EQUALS          reduce using rule 72 (variable -> ID .)
    NOT_EQUALS      reduce using rule 72 (variable -> ID .)
    GREATER_THAN    reduce using rule 72 (variable -> ID .)
    LESS_THAN       reduce using rule 72 (variable -> ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 72 (variable -> ID .)
    LESS_THAN_OR_EQUALS reduce using rule 72 (variable -> ID .)
    AND             reduce using rule 72 (variable -> ID .)
    OR              reduce using rule 72 (variable -> ID .)
    RBRACE          reduce using rule 72 (variable -> ID .)
    RBRACKET        reduce using rule 72 (variable -> ID .)
    COLON           reduce using rule 72 (variable -> ID .)
    LPARENTHESIS    shift and go to state 87
    TIMES           reduce using rule 86 (factor -> ID .)
    DIVIDE          reduce using rule 86 (factor -> ID .)
    MODULE          reduce using rule 86 (factor -> ID .)
    PLUS            reduce using rule 86 (factor -> ID .)
    MINUS           reduce using rule 86 (factor -> ID .)
    LBRACKET        shift and go to state 89
    DOT             shift and go to state 88

  ! SEMICOLON       [ reduce using rule 86 (factor -> ID .) ]
  ! RPARENTHESIS    [ reduce using rule 86 (factor -> ID .) ]
  ! COMMA           [ reduce using rule 86 (factor -> ID .) ]
  ! EQUALS          [ reduce using rule 86 (factor -> ID .) ]
  ! NOT_EQUALS      [ reduce using rule 86 (factor -> ID .) ]
  ! GREATER_THAN    [ reduce using rule 86 (factor -> ID .) ]
  ! LESS_THAN       [ reduce using rule 86 (factor -> ID .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 86 (factor -> ID .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 86 (factor -> ID .) ]
  ! AND             [ reduce using rule 86 (factor -> ID .) ]
  ! OR              [ reduce using rule 86 (factor -> ID .) ]
  ! RBRACE          [ reduce using rule 86 (factor -> ID .) ]
  ! RBRACKET        [ reduce using rule 86 (factor -> ID .) ]
  ! COLON           [ reduce using rule 86 (factor -> ID .) ]


state 114

    (73) variable -> function .

    SEMICOLON       reduce using rule 73 (variable -> function .)
    RPARENTHESIS    reduce using rule 73 (variable -> function .)
    COMMA           reduce using rule 73 (variable -> function .)
    EQUALS          reduce using rule 73 (variable -> function .)
    NOT_EQUALS      reduce using rule 73 (variable -> function .)
    GREATER_THAN    reduce using rule 73 (variable -> function .)
    LESS_THAN       reduce using rule 73 (variable -> function .)
    GREATER_THAN_OR_EQUALS reduce using rule 73 (variable -> function .)
    LESS_THAN_OR_EQUALS reduce using rule 73 (variable -> function .)
    AND             reduce using rule 73 (variable -> function .)
    OR              reduce using rule 73 (variable -> function .)
    RBRACE          reduce using rule 73 (variable -> function .)
    RBRACKET        reduce using rule 73 (variable -> function .)
    COLON           reduce using rule 73 (variable -> function .)


state 115

    (74) variable -> lambda .

    SEMICOLON       reduce using rule 74 (variable -> lambda .)
    RPARENTHESIS    reduce using rule 74 (variable -> lambda .)
    COMMA           reduce using rule 74 (variable -> lambda .)
    EQUALS          reduce using rule 74 (variable -> lambda .)
    NOT_EQUALS      reduce using rule 74 (variable -> lambda .)
    GREATER_THAN    reduce using rule 74 (variable -> lambda .)
    LESS_THAN       reduce using rule 74 (variable -> lambda .)
    GREATER_THAN_OR_EQUALS reduce using rule 74 (variable -> lambda .)
    LESS_THAN_OR_EQUALS reduce using rule 74 (variable -> lambda .)
    AND             reduce using rule 74 (variable -> lambda .)
    OR              reduce using rule 74 (variable -> lambda .)
    RBRACE          reduce using rule 74 (variable -> lambda .)
    RBRACKET        reduce using rule 74 (variable -> lambda .)
    COLON           reduce using rule 74 (variable -> lambda .)


state 116

    (75) variable -> expression .
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 75 (variable -> expression .)
    RPARENTHESIS    reduce using rule 75 (variable -> expression .)
    COMMA           reduce using rule 75 (variable -> expression .)
    EQUALS          reduce using rule 75 (variable -> expression .)
    NOT_EQUALS      reduce using rule 75 (variable -> expression .)
    GREATER_THAN    reduce using rule 75 (variable -> expression .)
    LESS_THAN       reduce using rule 75 (variable -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 75 (variable -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 75 (variable -> expression .)
    AND             reduce using rule 75 (variable -> expression .)
    OR              reduce using rule 75 (variable -> expression .)
    RBRACE          reduce using rule 75 (variable -> expression .)
    RBRACKET        reduce using rule 75 (variable -> expression .)
    COLON           reduce using rule 75 (variable -> expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 116

    (117) function -> declaration . LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (32) declaration -> declaration . ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal

    LPARENTHESIS    shift and go to state 66
    ASSIGN_OPERATOR shift and go to state 170


state 117

    (120) function -> declaration . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (122) function -> declaration . LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (32) declaration -> declaration . ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal

    LPARENTHESIS    shift and go to state 66
    ASSIGN_OPERATOR shift and go to state 170


state 118

    (128) lambda -> LPARENTHESIS . parameters RPARENTHESIS LBRACE statements RBRACE
    (87) factor -> LPARENTHESIS . expression RPARENTHESIS
    (123) parameters -> . parameters COMMA parameter
    (124) parameters -> . parameter
    (125) parameters -> . empty
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (126) parameter -> . declaration
    (127) parameter -> . variable
    (143) empty -> .
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    RPARENTHESIS    reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 174
    MINUS           shift and go to state 26
    LPARENTHESIS    shift and go to state 171
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    parameters                     shift and go to state 172
    expression                     shift and go to state 173
    parameter                      shift and go to state 126
    empty                          shift and go to state 127
    term                           shift and go to state 25
    declaration                    shift and go to state 124
    variable                       shift and go to state 128
    factor                         shift and go to state 46
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    function                       shift and go to state 114
    lambda                         shift and go to state 115

state 119

    (4) statement -> LBRACE statements RBRACE .

    LBRACE          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    BREAK           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    ID              reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    IMPORT          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    IF              reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    FOR             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    CLASS           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    ENUM            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    TRY             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    SWITCH          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    CONST           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    FINAL           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    LATE            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    VAR             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    VOID            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    MINUS           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    INT             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    $end            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    TIMES           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    DIVIDE          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    MODULE          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    PLUS            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    RPARENTHESIS    reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    COMMA           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    RBRACKET        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    EQUALS          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    NOT_EQUALS      reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    GREATER_THAN    reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    LESS_THAN       reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    AND             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    OR              reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    COLON           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    CASE            reduce using rule 4 (statement -> LBRACE statements RBRACE .)


state 120

    (76) expression -> expression PLUS term .
    (79) term -> term . TIMES factor
    (80) term -> term . DIVIDE factor
    (81) term -> term . MODULE factor

    SEMICOLON       reduce using rule 76 (expression -> expression PLUS term .)
    PLUS            reduce using rule 76 (expression -> expression PLUS term .)
    MINUS           reduce using rule 76 (expression -> expression PLUS term .)
    RPARENTHESIS    reduce using rule 76 (expression -> expression PLUS term .)
    COMMA           reduce using rule 76 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 76 (expression -> expression PLUS term .)
    EQUALS          reduce using rule 76 (expression -> expression PLUS term .)
    NOT_EQUALS      reduce using rule 76 (expression -> expression PLUS term .)
    GREATER_THAN    reduce using rule 76 (expression -> expression PLUS term .)
    LESS_THAN       reduce using rule 76 (expression -> expression PLUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 76 (expression -> expression PLUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 76 (expression -> expression PLUS term .)
    AND             reduce using rule 76 (expression -> expression PLUS term .)
    OR              reduce using rule 76 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 76 (expression -> expression PLUS term .)
    COLON           reduce using rule 76 (expression -> expression PLUS term .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    MODULE          shift and go to state 75


state 121

    (77) expression -> expression MINUS term .
    (79) term -> term . TIMES factor
    (80) term -> term . DIVIDE factor
    (81) term -> term . MODULE factor

    SEMICOLON       reduce using rule 77 (expression -> expression MINUS term .)
    PLUS            reduce using rule 77 (expression -> expression MINUS term .)
    MINUS           reduce using rule 77 (expression -> expression MINUS term .)
    RPARENTHESIS    reduce using rule 77 (expression -> expression MINUS term .)
    COMMA           reduce using rule 77 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 77 (expression -> expression MINUS term .)
    EQUALS          reduce using rule 77 (expression -> expression MINUS term .)
    NOT_EQUALS      reduce using rule 77 (expression -> expression MINUS term .)
    GREATER_THAN    reduce using rule 77 (expression -> expression MINUS term .)
    LESS_THAN       reduce using rule 77 (expression -> expression MINUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 77 (expression -> expression MINUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 77 (expression -> expression MINUS term .)
    AND             reduce using rule 77 (expression -> expression MINUS term .)
    OR              reduce using rule 77 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 77 (expression -> expression MINUS term .)
    COLON           reduce using rule 77 (expression -> expression MINUS term .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    MODULE          shift and go to state 75


state 122

    (32) declaration -> declaration ASSIGN_OPERATOR LESS_THAN . varType GREATER_THAN list_literal
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 132
    MAP_TYPE        shift and go to state 134
    SET_TYPE        shift and go to state 135
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    varType                        shift and go to state 175

state 123

    (38) assignation -> declaration ASSIGN_OPERATOR variable .

    SEMICOLON       reduce using rule 38 (assignation -> declaration ASSIGN_OPERATOR variable .)


state 124

    (126) parameter -> declaration .
    (32) declaration -> declaration . ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (120) function -> declaration . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (122) function -> declaration . LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON

    RPARENTHESIS    reduce using rule 126 (parameter -> declaration .)
    COMMA           reduce using rule 126 (parameter -> declaration .)
    ASSIGN_OPERATOR shift and go to state 170
    LPARENTHESIS    shift and go to state 66


state 127

    (120) function -> declaration LPARENTHESIS parameters . RPARENTHESIS LBRACE statements RBRACE
    (122) function -> declaration LPARENTHESIS parameters . RPARENTHESIS ARROW expression SEMICOLON
    (123) parameters -> parameters . COMMA parameter

    RPARENTHESIS    shift and go to state 176
    COMMA           shift and go to state 177


state 128

    (124) parameters -> parameter .

    RPARENTHESIS    reduce using rule 124 (parameters -> parameter .)
    COMMA           reduce using rule 124 (parameters -> parameter .)


state 129

    (29) declaration_without_modifier -> varType . ID
    (115) function -> varType . ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE

    ID              shift and go to state 174


state 130

    (125) parameters -> empty .

    RPARENTHESIS    reduce using rule 125 (parameters -> empty .)
    COMMA           reduce using rule 125 (parameters -> empty .)


state 131

    (127) parameter -> variable .

    RPARENTHESIS    reduce using rule 127 (parameter -> variable .)
    COMMA           reduce using rule 127 (parameter -> variable .)


state 132

    (79) term -> term TIMES factor .

    TIMES           reduce using rule 79 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 79 (term -> term TIMES factor .)
    MODULE          reduce using rule 79 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 79 (term -> term TIMES factor .)
    PLUS            reduce using rule 79 (term -> term TIMES factor .)
    MINUS           reduce using rule 79 (term -> term TIMES factor .)
    RPARENTHESIS    reduce using rule 79 (term -> term TIMES factor .)
    COMMA           reduce using rule 79 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 79 (term -> term TIMES factor .)
    EQUALS          reduce using rule 79 (term -> term TIMES factor .)
    NOT_EQUALS      reduce using rule 79 (term -> term TIMES factor .)
    GREATER_THAN    reduce using rule 79 (term -> term TIMES factor .)
    LESS_THAN       reduce using rule 79 (term -> term TIMES factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 79 (term -> term TIMES factor .)
    LESS_THAN_OR_EQUALS reduce using rule 79 (term -> term TIMES factor .)
    AND             reduce using rule 79 (term -> term TIMES factor .)
    OR              reduce using rule 79 (term -> term TIMES factor .)
    RBRACE          reduce using rule 79 (term -> term TIMES factor .)
    COLON           reduce using rule 79 (term -> term TIMES factor .)


state 133

    (80) term -> term DIVIDE factor .

    TIMES           reduce using rule 80 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 80 (term -> term DIVIDE factor .)
    MODULE          reduce using rule 80 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 80 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 80 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 80 (term -> term DIVIDE factor .)
    RPARENTHESIS    reduce using rule 80 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 80 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 80 (term -> term DIVIDE factor .)
    EQUALS          reduce using rule 80 (term -> term DIVIDE factor .)
    NOT_EQUALS      reduce using rule 80 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 80 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 80 (term -> term DIVIDE factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 80 (term -> term DIVIDE factor .)
    LESS_THAN_OR_EQUALS reduce using rule 80 (term -> term DIVIDE factor .)
    AND             reduce using rule 80 (term -> term DIVIDE factor .)
    OR              reduce using rule 80 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 80 (term -> term DIVIDE factor .)
    COLON           reduce using rule 80 (term -> term DIVIDE factor .)


state 134

    (81) term -> term MODULE factor .

    TIMES           reduce using rule 81 (term -> term MODULE factor .)
    DIVIDE          reduce using rule 81 (term -> term MODULE factor .)
    MODULE          reduce using rule 81 (term -> term MODULE factor .)
    SEMICOLON       reduce using rule 81 (term -> term MODULE factor .)
    PLUS            reduce using rule 81 (term -> term MODULE factor .)
    MINUS           reduce using rule 81 (term -> term MODULE factor .)
    RPARENTHESIS    reduce using rule 81 (term -> term MODULE factor .)
    COMMA           reduce using rule 81 (term -> term MODULE factor .)
    RBRACKET        reduce using rule 81 (term -> term MODULE factor .)
    EQUALS          reduce using rule 81 (term -> term MODULE factor .)
    NOT_EQUALS      reduce using rule 81 (term -> term MODULE factor .)
    GREATER_THAN    reduce using rule 81 (term -> term MODULE factor .)
    LESS_THAN       reduce using rule 81 (term -> term MODULE factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 81 (term -> term MODULE factor .)
    LESS_THAN_OR_EQUALS reduce using rule 81 (term -> term MODULE factor .)
    AND             reduce using rule 81 (term -> term MODULE factor .)
    OR              reduce using rule 81 (term -> term MODULE factor .)
    RBRACE          reduce using rule 81 (term -> term MODULE factor .)
    COLON           reduce using rule 81 (term -> term MODULE factor .)


state 135

    (52) varType -> LIST_TYPE .

    GREATER_THAN    reduce using rule 52 (varType -> LIST_TYPE .)
    COMMA           reduce using rule 52 (varType -> LIST_TYPE .)


state 136

    (115) function -> varType ID LPARENTHESIS . parameters RPARENTHESIS LBRACE statements RBRACE
    (118) parameters -> . parameters COMMA parameter
    (119) parameters -> . parameter
    (120) parameters -> . empty
    (121) parameter -> . declaration
    (122) parameter -> . variable
    (138) empty -> .
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (64) variable -> . INT
    (65) variable -> . DOUBLE
    (66) variable -> . STRING
    (67) variable -> . BOOL
    (68) variable -> . NULL
    (69) variable -> . ID
    (70) variable -> . function
    (71) variable -> . lambda
    (72) variable -> . expression
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (41) declaration_modifier -> . CONST
    (42) declaration_modifier -> . FINAL
    (43) declaration_modifier -> . LATE
    (115) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (116) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (117) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (123) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (44) varType -> . INT_TYPE
    (45) varType -> . STRING_TYPE
    (46) varType -> . NUM_TYPE
    (47) varType -> . DOUBLE_TYPE
    (48) varType -> . BOOL_TYPE
    (49) varType -> . LIST_TYPE
    (50) varType -> . MAP_TYPE
    (51) varType -> . SET_TYPE
    (52) varType -> . VAR
    (53) varType -> . VOID
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . term MODULE factor
    (79) term -> . factor
    (80) factor -> . MINUS factor
    (81) factor -> . INT
    (82) factor -> . DOUBLE
    (83) factor -> . ID
    (84) factor -> . LPARENTHESIS expression RPARENTHESIS
    (85) factor -> . ID LBRACKET expression RBRACKET
    (86) factor -> . ID DOT function statement
    (87) factor -> . ID DOT function
    (88) factor -> . ID DOT ID

    RPARENTHESIS    reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    INT             shift and go to state 106
    DOUBLE          shift and go to state 107
    STRING          shift and go to state 108
    BOOL            shift and go to state 109
    NULL            shift and go to state 110
    ID              shift and go to state 111
    CONST           shift and go to state 46
    FINAL           shift and go to state 47
    LATE            shift and go to state 48
    LPARENTHESIS    shift and go to state 115
    INT_TYPE        shift and go to state 49
    STRING_TYPE     shift and go to state 50
    NUM_TYPE        shift and go to state 51
    DOUBLE_TYPE     shift and go to state 52
    BOOL_TYPE       shift and go to state 53
    SET_TYPE        shift and go to state 54
    VAR             shift and go to state 55
    VOID            shift and go to state 56
    MINUS           shift and go to state 26

    varType                        shift and go to state 129
    parameters                     shift and go to state 176
    parameter                      shift and go to state 126
    empty                          shift and go to state 127
    declaration                    shift and go to state 124
    variable                       shift and go to state 128
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32
    function                       shift and go to state 112
    lambda                         shift and go to state 113
    expression                     shift and go to state 114
    term                           shift and go to state 25
    factor                         shift and go to state 45

state 137

    (30) declaration -> LIST_TYPE LESS_THAN varType . GREATER_THAN ID ASSIGN_OPERATOR list_literal

    GREATER_THAN    shift and go to state 178


state 138

    (53) varType -> MAP_TYPE .

    GREATER_THAN    reduce using rule 53 (varType -> MAP_TYPE .)
    COMMA           reduce using rule 53 (varType -> MAP_TYPE .)


state 139

    (54) varType -> SET_TYPE .

    GREATER_THAN    reduce using rule 54 (varType -> SET_TYPE .)
    COMMA           reduce using rule 54 (varType -> SET_TYPE .)


state 140

    (39) assignation -> ID ASSIGN_OPERATOR variable .

    SEMICOLON       reduce using rule 39 (assignation -> ID ASSIGN_OPERATOR variable .)


state 141

    (130) input -> ID ASSIGN_OPERATOR STDIN . DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON

    DOT             shift and go to state 179


state 142

    (40) assignation -> ID PLUS_EQUALS expression .
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 40 (assignation -> ID PLUS_EQUALS expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 143

    (41) assignation -> ID MINUS_EQUALS expression .
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 41 (assignation -> ID MINUS_EQUALS expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 144

    (42) assignation -> ID TIMES_EQUALS expression .
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 42 (assignation -> ID TIMES_EQUALS expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 145

    (43) assignation -> ID DIVIDE_EQUALS expression .
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 43 (assignation -> ID DIVIDE_EQUALS expression .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 142

    (121) function -> ID LPARENTHESIS parameters . RPARENTHESIS
    (123) parameters -> parameters . COMMA parameter

    RPARENTHESIS    shift and go to state 180
    COMMA           shift and go to state 177


state 143

    (91) factor -> ID DOT ID .
    (121) function -> ID . LPARENTHESIS parameters RPARENTHESIS

    TIMES           reduce using rule 91 (factor -> ID DOT ID .)
    DIVIDE          reduce using rule 91 (factor -> ID DOT ID .)
    MODULE          reduce using rule 91 (factor -> ID DOT ID .)
    SEMICOLON       reduce using rule 91 (factor -> ID DOT ID .)
    PLUS            reduce using rule 91 (factor -> ID DOT ID .)
    MINUS           reduce using rule 91 (factor -> ID DOT ID .)
    RPARENTHESIS    reduce using rule 91 (factor -> ID DOT ID .)
    COMMA           reduce using rule 91 (factor -> ID DOT ID .)
    RBRACKET        reduce using rule 91 (factor -> ID DOT ID .)
    EQUALS          reduce using rule 91 (factor -> ID DOT ID .)
    NOT_EQUALS      reduce using rule 91 (factor -> ID DOT ID .)
    GREATER_THAN    reduce using rule 91 (factor -> ID DOT ID .)
    LESS_THAN       reduce using rule 91 (factor -> ID DOT ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 91 (factor -> ID DOT ID .)
    LESS_THAN_OR_EQUALS reduce using rule 91 (factor -> ID DOT ID .)
    AND             reduce using rule 91 (factor -> ID DOT ID .)
    OR              reduce using rule 91 (factor -> ID DOT ID .)
    RBRACE          reduce using rule 91 (factor -> ID DOT ID .)
    COLON           reduce using rule 91 (factor -> ID DOT ID .)
    LPARENTHESIS    shift and go to state 87


state 144

    (89) factor -> ID DOT function . statement
    (90) factor -> ID DOT function .
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! reduce/reduce conflict for TIMES resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for MODULE resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for PLUS resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for MINUS resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for COMMA resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for EQUALS resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for AND resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for OR resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for RBRACE resolved using rule 90 (factor -> ID DOT function .)
  ! reduce/reduce conflict for COLON resolved using rule 90 (factor -> ID DOT function .)
  ! shift/reduce conflict for MINUS resolved as shift
    TIMES           reduce using rule 90 (factor -> ID DOT function .)
    DIVIDE          reduce using rule 90 (factor -> ID DOT function .)
    MODULE          reduce using rule 90 (factor -> ID DOT function .)
    SEMICOLON       reduce using rule 90 (factor -> ID DOT function .)
    PLUS            reduce using rule 90 (factor -> ID DOT function .)
    RPARENTHESIS    reduce using rule 90 (factor -> ID DOT function .)
    COMMA           reduce using rule 90 (factor -> ID DOT function .)
    RBRACKET        reduce using rule 90 (factor -> ID DOT function .)
    EQUALS          reduce using rule 90 (factor -> ID DOT function .)
    NOT_EQUALS      reduce using rule 90 (factor -> ID DOT function .)
    GREATER_THAN    reduce using rule 90 (factor -> ID DOT function .)
    LESS_THAN       reduce using rule 90 (factor -> ID DOT function .)
    GREATER_THAN_OR_EQUALS reduce using rule 90 (factor -> ID DOT function .)
    LESS_THAN_OR_EQUALS reduce using rule 90 (factor -> ID DOT function .)
    AND             reduce using rule 90 (factor -> ID DOT function .)
    OR              reduce using rule 90 (factor -> ID DOT function .)
    RBRACE          reduce using rule 90 (factor -> ID DOT function .)
    COLON           reduce using rule 90 (factor -> ID DOT function .)
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! MINUS           [ reduce using rule 90 (factor -> ID DOT function .) ]
  ! TIMES           [ reduce using rule 143 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 143 (empty -> .) ]
  ! MODULE          [ reduce using rule 143 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 143 (empty -> .) ]
  ! PLUS            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! RPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! COMMA           [ reduce using rule 143 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 143 (empty -> .) ]
  ! EQUALS          [ reduce using rule 143 (empty -> .) ]
  ! NOT_EQUALS      [ reduce using rule 143 (empty -> .) ]
  ! GREATER_THAN    [ reduce using rule 143 (empty -> .) ]
  ! LESS_THAN       [ reduce using rule 143 (empty -> .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 143 (empty -> .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 143 (empty -> .) ]
  ! AND             [ reduce using rule 143 (empty -> .) ]
  ! OR              [ reduce using rule 143 (empty -> .) ]
  ! RBRACE          [ reduce using rule 143 (empty -> .) ]
  ! COLON           [ reduce using rule 143 (empty -> .) ]

    function                       shift and go to state 11
    statement                      shift and go to state 181
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 145

    (88) factor -> ID LBRACKET expression . RBRACKET
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    RBRACKET        shift and go to state 182
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 146

    (31) declaration -> declaration_modifier LIST_TYPE LESS_THAN . varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 132
    MAP_TYPE        shift and go to state 134
    SET_TYPE        shift and go to state 135
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    varType                        shift and go to state 183

state 151

    (27) declaration_with_modifier -> declaration_modifier varType ID .

    SEMICOLON       reduce using rule 27 (declaration_with_modifier -> declaration_modifier varType ID .)
    ASSIGN_OPERATOR reduce using rule 27 (declaration_with_modifier -> declaration_modifier varType ID .)
    LPARENTHESIS    reduce using rule 27 (declaration_with_modifier -> declaration_modifier varType ID .)
    RPARENTHESIS    reduce using rule 27 (declaration_with_modifier -> declaration_modifier varType ID .)
    COMMA           reduce using rule 27 (declaration_with_modifier -> declaration_modifier varType ID .)


state 152

    (34) declaration -> declaration_modifier MAP_TYPE LESS_THAN . varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 132
    MAP_TYPE        shift and go to state 134
    SET_TYPE        shift and go to state 135
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    varType                        shift and go to state 184

state 149

    (36) declaration -> declaration_modifier SET_TYPE LESS_THAN . varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 132
    MAP_TYPE        shift and go to state 134
    SET_TYPE        shift and go to state 135
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    varType                        shift and go to state 185

state 150

    (33) declaration -> MAP_TYPE LESS_THAN varType . COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal

    COMMA           shift and go to state 186


state 154

    (99) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS statement
    (100) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS statement ELSE statement
    (95) booleanExpression -> booleanExpression . AND booleanExpression
    (96) booleanExpression -> booleanExpression . OR booleanExpression

    RPARENTHESIS    shift and go to state 187
    AND             shift and go to state 188
    OR              shift and go to state 189


state 155

    (35) declaration -> SET_TYPE LESS_THAN varType . GREATER_THAN ID ASSIGN_OPERATOR set_literal

    GREATER_THAN    shift and go to state 187


state 156

    (142) import -> IMPORT STRING SEMICOLON .

    LBRACE          reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    CONTINUE        reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    BREAK           reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    LIST_TYPE       reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    MAP_TYPE        reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    SET_TYPE        reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    ID              reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    IMPORT          reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    IF              reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    WHILE           reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    FOR             reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    PRINT           reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    CLASS           reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    ENUM            reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    TRY             reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    SWITCH          reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    RETURN          reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    CONST           reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    FINAL           reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    LATE            reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    MINUS           reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    INT             reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    DOUBLE          reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    LPARENTHESIS    reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    INT_TYPE        reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    STRING_TYPE     reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    NUM_TYPE        reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    BOOL_TYPE       reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    VAR             reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    VOID            reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    $end            reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    RBRACE          reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    TIMES           reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    DIVIDE          reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    MODULE          reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    SEMICOLON       reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    PLUS            reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    RPARENTHESIS    reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    COMMA           reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    RBRACKET        reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    EQUALS          reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    NOT_EQUALS      reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    GREATER_THAN    reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    LESS_THAN       reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    AND             reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    OR              reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    COLON           reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    ELSE            reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    DEFAULT         reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)
    CASE            reduce using rule 142 (import -> IMPORT STRING SEMICOLON .)


state 157

    (87) factor -> LPARENTHESIS expression RPARENTHESIS .

    TIMES           reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    DIVIDE          reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    MODULE          reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    SEMICOLON       reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    PLUS            reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    MINUS           reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    COMMA           reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    RBRACKET        reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    EQUALS          reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    NOT_EQUALS      reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    GREATER_THAN    reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    LESS_THAN       reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    AND             reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    OR              reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    RBRACE          reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    COLON           reduce using rule 87 (factor -> LPARENTHESIS expression RPARENTHESIS .)


state 158

    (100) booleanExpression -> LPARENTHESIS . booleanExpression RPARENTHESIS
    (128) lambda -> LPARENTHESIS . parameters RPARENTHESIS LBRACE statements RBRACE
    (87) factor -> LPARENTHESIS . expression RPARENTHESIS
    (92) booleanExpression -> . variable EQUALS variable
    (93) booleanExpression -> . variable NOT_EQUALS variable
    (94) booleanExpression -> . variable GREATER_THAN variable
    (95) booleanExpression -> . variable LESS_THAN variable
    (96) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (97) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (98) booleanExpression -> . booleanExpression AND booleanExpression
    (99) booleanExpression -> . booleanExpression OR booleanExpression
    (100) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (101) booleanExpression -> . variable
    (123) parameters -> . parameters COMMA parameter
    (124) parameters -> . parameter
    (125) parameters -> . empty
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (126) parameter -> . declaration
    (127) parameter -> . variable
    (143) empty -> .
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    LPARENTHESIS    shift and go to state 154
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    RPARENTHESIS    reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    MINUS           shift and go to state 26
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    booleanExpression              shift and go to state 188
    parameters                     shift and go to state 172
    expression                     shift and go to state 173
    variable                       shift and go to state 189
    parameter                      shift and go to state 126
    empty                          shift and go to state 127
    term                           shift and go to state 25
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    declaration                    shift and go to state 190
    factor                         shift and go to state 46
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32

state 159

    (102) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS statement
    (103) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS statement ELSE statement
    (98) booleanExpression -> booleanExpression . AND booleanExpression
    (99) booleanExpression -> booleanExpression . OR booleanExpression

    RPARENTHESIS    shift and go to state 191
    AND             shift and go to state 192
    OR              shift and go to state 193


state 156

    (92) booleanExpression -> variable . EQUALS variable
    (93) booleanExpression -> variable . NOT_EQUALS variable
    (94) booleanExpression -> variable . GREATER_THAN variable
    (95) booleanExpression -> variable . LESS_THAN variable
    (96) booleanExpression -> variable . GREATER_THAN_OR_EQUALS variable
    (97) booleanExpression -> variable . LESS_THAN_OR_EQUALS variable
    (101) booleanExpression -> variable .

    EQUALS          shift and go to state 194
    NOT_EQUALS      shift and go to state 195
    GREATER_THAN    shift and go to state 196
    LESS_THAN       shift and go to state 197
    GREATER_THAN_OR_EQUALS shift and go to state 198
    LESS_THAN_OR_EQUALS shift and go to state 199
    RPARENTHESIS    reduce using rule 101 (booleanExpression -> variable .)
    AND             reduce using rule 101 (booleanExpression -> variable .)
    OR              reduce using rule 101 (booleanExpression -> variable .)
    SEMICOLON       reduce using rule 101 (booleanExpression -> variable .)
    RBRACE          reduce using rule 101 (booleanExpression -> variable .)
    COMMA           reduce using rule 101 (booleanExpression -> variable .)


state 157

    (104) while -> WHILE LPARENTHESIS booleanExpression . RPARENTHESIS LBRACE statements RBRACE
    (98) booleanExpression -> booleanExpression . AND booleanExpression
    (99) booleanExpression -> booleanExpression . OR booleanExpression

    RPARENTHESIS    shift and go to state 200
    AND             shift and go to state 192
    OR              shift and go to state 193


state 158

    (105) for -> FOR LPARENTHESIS assignation . SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> FOR LPARENTHESIS assignation . SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE

    SEMICOLON       shift and go to state 201


state 159

    (107) for -> FOR LPARENTHESIS varType . ID IN ID RPARENTHESIS for_in_block
    (29) declaration_without_modifier -> varType . ID

    ID              shift and go to state 202


state 160

    (39) assignation -> ID . ASSIGN_OPERATOR variable
    (40) assignation -> ID . PLUS_EQUALS expression
    (41) assignation -> ID . MINUS_EQUALS expression
    (42) assignation -> ID . TIMES_EQUALS expression
    (43) assignation -> ID . DIVIDE_EQUALS expression

    ASSIGN_OPERATOR shift and go to state 203
    PLUS_EQUALS     shift and go to state 81
    MINUS_EQUALS    shift and go to state 82
    TIMES_EQUALS    shift and go to state 83
    DIVIDE_EQUALS   shift and go to state 84


state 161

    (38) assignation -> declaration . ASSIGN_OPERATOR variable
    (32) declaration -> declaration . ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal

    ASSIGN_OPERATOR shift and go to state 204


state 163

    (131) enum -> ENUM ID LBRACE . enum_values RBRACE
    (132) enum_values -> . enum_values COMMA ID
    (133) enum_values -> . ID

    ID              shift and go to state 207

    enum_values                    shift and go to state 208

state 164

    (52) varType -> LIST_TYPE .
    (30) declaration -> LIST_TYPE . LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal

    ID              reduce using rule 52 (varType -> LIST_TYPE .)
    LESS_THAN       shift and go to state 78


state 163

    (53) varType -> MAP_TYPE .
    (33) declaration -> MAP_TYPE . LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal

    ID              reduce using rule 53 (varType -> MAP_TYPE .)
    LESS_THAN       shift and go to state 95


state 164

    (54) varType -> SET_TYPE .
    (35) declaration -> SET_TYPE . LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal

    ID              reduce using rule 54 (varType -> SET_TYPE .)
    LESS_THAN       shift and go to state 96


state 165

    (129) print -> PRINT LPARENTHESIS variable . RPARENTHESIS SEMICOLON

    RPARENTHESIS    shift and go to state 205


state 166

    (131) class_def -> CLASS ID LBRACE . class_members RBRACE
    (132) class_members -> . class_members class_member
    (133) class_members -> . class_member
    (134) class_member -> . varType ID SEMICOLON
    (135) class_member -> . function
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE

    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 162
    MAP_TYPE        shift and go to state 163
    SET_TYPE        shift and go to state 164
    VAR             shift and go to state 57
    VOID            shift and go to state 58
    ID              shift and go to state 206
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49

    class_members                  shift and go to state 207
    class_member                   shift and go to state 208
    varType                        shift and go to state 209
    function                       shift and go to state 210
    declaration                    shift and go to state 117
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32

state 167

    (136) enum -> ENUM ID LBRACE . enum_values RBRACE
    (137) enum_values -> . enum_values COMMA ID
    (138) enum_values -> . ID

    ID              shift and go to state 211

    enum_values                    shift and go to state 212

state 168

    (112) try -> TRY LBRACE statements . RBRACE FINALLY LBRACE statements RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    RBRACE          shift and go to state 213
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! RBRACE          [ reduce using rule 143 (empty -> .) ]
  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statement                      shift and go to state 59
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 169

    (113) switch -> SWITCH LPARENTHESIS variable . RPARENTHESIS LBRACE cases default_case RBRACE

    RPARENTHESIS    shift and go to state 214


state 170

    (32) declaration -> declaration ASSIGN_OPERATOR . LESS_THAN varType GREATER_THAN list_literal

    LESS_THAN       shift and go to state 122


state 171

    (87) factor -> LPARENTHESIS . expression RPARENTHESIS
    (128) lambda -> LPARENTHESIS . parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (123) parameters -> . parameters COMMA parameter
    (124) parameters -> . parameter
    (125) parameters -> . empty
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (126) parameter -> . declaration
    (127) parameter -> . variable
    (143) empty -> .
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    RPARENTHESIS    reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    MINUS           shift and go to state 26
    INT             shift and go to state 215
    DOUBLE          shift and go to state 216
    ID              shift and go to state 217
    LPARENTHESIS    shift and go to state 171
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    expression                     shift and go to state 173
    parameters                     shift and go to state 172
    term                           shift and go to state 25
    parameter                      shift and go to state 126
    empty                          shift and go to state 127
    factor                         shift and go to state 46
    declaration                    shift and go to state 124
    variable                       shift and go to state 128
    function                       shift and go to state 114
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 129
    declaration_modifier           shift and go to state 32
    lambda                         shift and go to state 115

state 172

    (128) lambda -> LPARENTHESIS parameters . RPARENTHESIS LBRACE statements RBRACE
    (123) parameters -> parameters . COMMA parameter

    RPARENTHESIS    shift and go to state 218
    COMMA           shift and go to state 177


state 173

    (87) factor -> LPARENTHESIS expression . RPARENTHESIS
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term
    (75) variable -> expression .

  ! shift/reduce conflict for RPARENTHESIS resolved as shift
    RPARENTHESIS    shift and go to state 153
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    COMMA           reduce using rule 75 (variable -> expression .)
    EQUALS          reduce using rule 75 (variable -> expression .)
    NOT_EQUALS      reduce using rule 75 (variable -> expression .)
    GREATER_THAN    reduce using rule 75 (variable -> expression .)
    LESS_THAN       reduce using rule 75 (variable -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 75 (variable -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 75 (variable -> expression .)
    AND             reduce using rule 75 (variable -> expression .)
    OR              reduce using rule 75 (variable -> expression .)

  ! RPARENTHESIS    [ reduce using rule 75 (variable -> expression .) ]


state 174

    (72) variable -> ID .
    (86) factor -> ID .
    (88) factor -> ID . LBRACKET expression RBRACKET
    (89) factor -> ID . DOT function statement
    (90) factor -> ID . DOT function
    (91) factor -> ID . DOT ID
    (121) function -> ID . LPARENTHESIS parameters RPARENTHESIS

  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 72 (variable -> ID .)
    RPARENTHESIS    reduce using rule 72 (variable -> ID .)
    COMMA           reduce using rule 72 (variable -> ID .)
    TIMES           reduce using rule 86 (factor -> ID .)
    DIVIDE          reduce using rule 86 (factor -> ID .)
    MODULE          reduce using rule 86 (factor -> ID .)
    PLUS            reduce using rule 86 (factor -> ID .)
    MINUS           reduce using rule 86 (factor -> ID .)
    LBRACKET        shift and go to state 89
    DOT             shift and go to state 88
    LPARENTHESIS    shift and go to state 87

  ! RPARENTHESIS    [ reduce using rule 86 (factor -> ID .) ]
  ! COMMA           [ reduce using rule 86 (factor -> ID .) ]


state 175

    (32) declaration -> declaration ASSIGN_OPERATOR LESS_THAN varType . GREATER_THAN list_literal

    GREATER_THAN    shift and go to state 219


state 180

    (120) function -> declaration LPARENTHESIS parameters RPARENTHESIS . LBRACE statements RBRACE
    (122) function -> declaration LPARENTHESIS parameters RPARENTHESIS . ARROW expression SEMICOLON

    LBRACE          shift and go to state 220
    ARROW           shift and go to state 221


state 181

    (123) parameters -> parameters COMMA . parameter
    (126) parameter -> . declaration
    (127) parameter -> . variable
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    LPARENTHESIS    shift and go to state 118
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58
    MINUS           shift and go to state 26

    parameter                      shift and go to state 222
    declaration                    shift and go to state 124
    variable                       shift and go to state 128
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    term                           shift and go to state 25
    factor                         shift and go to state 46

state 182

    (30) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN . ID ASSIGN_OPERATOR list_literal

    ID              shift and go to state 223


state 183

    (130) input -> ID ASSIGN_OPERATOR STDIN DOT . READ LPARENTHESIS RPARENTHESIS SEMICOLON

    READ            shift and go to state 224


state 180

    (121) function -> ID LPARENTHESIS parameters RPARENTHESIS .

    LBRACE          reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    CONTINUE        reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    BREAK           reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    LIST_TYPE       reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    MAP_TYPE        reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    SET_TYPE        reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    ID              reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    IMPORT          reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    IF              reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    WHILE           reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    FOR             reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    PRINT           reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    CLASS           reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    ENUM            reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    TRY             reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    SWITCH          reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    RETURN          reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    CONST           reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    FINAL           reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    LATE            reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    MINUS           reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    INT             reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    DOUBLE          reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    LPARENTHESIS    reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    INT_TYPE        reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    STRING_TYPE     reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    NUM_TYPE        reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    DOUBLE_TYPE     reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    BOOL_TYPE       reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    VAR             reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    VOID            reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    $end            reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    RBRACE          reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    SEMICOLON       reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    COMMA           reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    TIMES           reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    DIVIDE          reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    MODULE          reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    PLUS            reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    RBRACKET        reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    EQUALS          reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    NOT_EQUALS      reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    GREATER_THAN    reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    LESS_THAN       reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    AND             reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    OR              reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    COLON           reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    ELSE            reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    DEFAULT         reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)
    CASE            reduce using rule 121 (function -> ID LPARENTHESIS parameters RPARENTHESIS .)


state 184

    (97) booleanExpression -> LPARENTHESIS booleanExpression . RPARENTHESIS
    (95) booleanExpression -> booleanExpression . AND booleanExpression
    (96) booleanExpression -> booleanExpression . OR booleanExpression

    RPARENTHESIS    shift and go to state 224
    AND             shift and go to state 188
    OR              shift and go to state 189


state 185

    (89) factor -> ID DOT function statement .

    TIMES           reduce using rule 89 (factor -> ID DOT function statement .)
    DIVIDE          reduce using rule 89 (factor -> ID DOT function statement .)
    MODULE          reduce using rule 89 (factor -> ID DOT function statement .)
    SEMICOLON       reduce using rule 89 (factor -> ID DOT function statement .)
    PLUS            reduce using rule 89 (factor -> ID DOT function statement .)
    MINUS           reduce using rule 89 (factor -> ID DOT function statement .)
    RPARENTHESIS    reduce using rule 89 (factor -> ID DOT function statement .)
    COMMA           reduce using rule 89 (factor -> ID DOT function statement .)
    RBRACKET        reduce using rule 89 (factor -> ID DOT function statement .)
    EQUALS          reduce using rule 89 (factor -> ID DOT function statement .)
    NOT_EQUALS      reduce using rule 89 (factor -> ID DOT function statement .)
    GREATER_THAN    reduce using rule 89 (factor -> ID DOT function statement .)
    LESS_THAN       reduce using rule 89 (factor -> ID DOT function statement .)
    GREATER_THAN_OR_EQUALS reduce using rule 89 (factor -> ID DOT function statement .)
    LESS_THAN_OR_EQUALS reduce using rule 89 (factor -> ID DOT function statement .)
    AND             reduce using rule 89 (factor -> ID DOT function statement .)
    OR              reduce using rule 89 (factor -> ID DOT function statement .)
    RBRACE          reduce using rule 89 (factor -> ID DOT function statement .)
    COLON           reduce using rule 89 (factor -> ID DOT function statement .)


state 186

    (88) factor -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    MODULE          reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    RPARENTHESIS    reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    NOT_EQUALS      reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    GREATER_THAN    reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    LESS_THAN       reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    GREATER_THAN_OR_EQUALS reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    LESS_THAN_OR_EQUALS reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)
    COLON           reduce using rule 88 (factor -> ID LBRACKET expression RBRACKET .)


state 187

    (31) declaration -> declaration_modifier LIST_TYPE LESS_THAN varType . GREATER_THAN ID ASSIGN_OPERATOR list_literal

    GREATER_THAN    shift and go to state 225


state 184

    (34) declaration -> declaration_modifier MAP_TYPE LESS_THAN varType . COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal

    COMMA           shift and go to state 226


state 185

    (36) declaration -> declaration_modifier SET_TYPE LESS_THAN varType . GREATER_THAN ID ASSIGN_OPERATOR set_literal

    GREATER_THAN    shift and go to state 227


state 186

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA . varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 132
    MAP_TYPE        shift and go to state 134
    SET_TYPE        shift and go to state 135
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    varType                        shift and go to state 228

state 187

    (35) declaration -> SET_TYPE LESS_THAN varType GREATER_THAN . ID ASSIGN_OPERATOR set_literal

    ID              shift and go to state 229


state 188

    (100) booleanExpression -> LPARENTHESIS booleanExpression . RPARENTHESIS
    (98) booleanExpression -> booleanExpression . AND booleanExpression
    (99) booleanExpression -> booleanExpression . OR booleanExpression

    RPARENTHESIS    shift and go to state 230
    AND             shift and go to state 192
    OR              shift and go to state 193


state 189

    (92) booleanExpression -> variable . EQUALS variable
    (93) booleanExpression -> variable . NOT_EQUALS variable
    (94) booleanExpression -> variable . GREATER_THAN variable
    (95) booleanExpression -> variable . LESS_THAN variable
    (96) booleanExpression -> variable . GREATER_THAN_OR_EQUALS variable
    (97) booleanExpression -> variable . LESS_THAN_OR_EQUALS variable
    (101) booleanExpression -> variable .
    (127) parameter -> variable .

  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 101 (booleanExpression -> variable .)
    EQUALS          shift and go to state 194
    NOT_EQUALS      shift and go to state 195
    GREATER_THAN    shift and go to state 196
    LESS_THAN       shift and go to state 197
    GREATER_THAN_OR_EQUALS shift and go to state 198
    LESS_THAN_OR_EQUALS shift and go to state 199
    RPARENTHESIS    reduce using rule 101 (booleanExpression -> variable .)
    AND             reduce using rule 101 (booleanExpression -> variable .)
    OR              reduce using rule 101 (booleanExpression -> variable .)
    COMMA           reduce using rule 127 (parameter -> variable .)

  ! RPARENTHESIS    [ reduce using rule 127 (parameter -> variable .) ]


state 190

    (126) parameter -> declaration .
    (120) function -> declaration . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (122) function -> declaration . LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (32) declaration -> declaration . ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal

    RPARENTHESIS    reduce using rule 126 (parameter -> declaration .)
    COMMA           reduce using rule 126 (parameter -> declaration .)
    LPARENTHESIS    shift and go to state 66
    ASSIGN_OPERATOR shift and go to state 170


state 191

    (102) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS . statement
    (103) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS . statement ELSE statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    ELSE            reduce using rule 143 (empty -> .)
    $end            reduce using rule 143 (empty -> .)
    RBRACE          reduce using rule 143 (empty -> .)
    TIMES           reduce using rule 143 (empty -> .)
    DIVIDE          reduce using rule 143 (empty -> .)
    MODULE          reduce using rule 143 (empty -> .)
    SEMICOLON       reduce using rule 143 (empty -> .)
    PLUS            reduce using rule 143 (empty -> .)
    RPARENTHESIS    reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    RBRACKET        reduce using rule 143 (empty -> .)
    EQUALS          reduce using rule 143 (empty -> .)
    NOT_EQUALS      reduce using rule 143 (empty -> .)
    GREATER_THAN    reduce using rule 143 (empty -> .)
    LESS_THAN       reduce using rule 143 (empty -> .)
    GREATER_THAN_OR_EQUALS reduce using rule 143 (empty -> .)
    LESS_THAN_OR_EQUALS reduce using rule 143 (empty -> .)
    AND             reduce using rule 143 (empty -> .)
    OR              reduce using rule 143 (empty -> .)
    COLON           reduce using rule 143 (empty -> .)
    DEFAULT         reduce using rule 143 (empty -> .)
    CASE            reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statement                      shift and go to state 231
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 192

    (98) booleanExpression -> booleanExpression AND . booleanExpression
    (92) booleanExpression -> . variable EQUALS variable
    (93) booleanExpression -> . variable NOT_EQUALS variable
    (94) booleanExpression -> . variable GREATER_THAN variable
    (95) booleanExpression -> . variable LESS_THAN variable
    (96) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (97) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (98) booleanExpression -> . booleanExpression AND booleanExpression
    (99) booleanExpression -> . booleanExpression OR booleanExpression
    (100) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (101) booleanExpression -> . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    LPARENTHESIS    shift and go to state 154
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    booleanExpression              shift and go to state 232
    variable                       shift and go to state 156
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration                    shift and go to state 116
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 193

    (99) booleanExpression -> booleanExpression OR . booleanExpression
    (92) booleanExpression -> . variable EQUALS variable
    (93) booleanExpression -> . variable NOT_EQUALS variable
    (94) booleanExpression -> . variable GREATER_THAN variable
    (95) booleanExpression -> . variable LESS_THAN variable
    (96) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (97) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (98) booleanExpression -> . booleanExpression AND booleanExpression
    (99) booleanExpression -> . booleanExpression OR booleanExpression
    (100) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (101) booleanExpression -> . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    LPARENTHESIS    shift and go to state 154
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    booleanExpression              shift and go to state 233
    variable                       shift and go to state 156
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 194

    (92) booleanExpression -> variable EQUALS . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 234
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 200

    (93) booleanExpression -> variable NOT_EQUALS . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 235
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 196

    (94) booleanExpression -> variable GREATER_THAN . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 236
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 201

    (95) booleanExpression -> variable LESS_THAN . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 237
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 198

    (96) booleanExpression -> variable GREATER_THAN_OR_EQUALS . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 238
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 202

    (97) booleanExpression -> variable LESS_THAN_OR_EQUALS . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 239
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 203

    (104) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 240


state 204

    (105) for -> FOR LPARENTHESIS assignation SEMICOLON . booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> FOR LPARENTHESIS assignation SEMICOLON . booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (92) booleanExpression -> . variable EQUALS variable
    (93) booleanExpression -> . variable NOT_EQUALS variable
    (94) booleanExpression -> . variable GREATER_THAN variable
    (95) booleanExpression -> . variable LESS_THAN variable
    (96) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (97) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (98) booleanExpression -> . booleanExpression AND booleanExpression
    (99) booleanExpression -> . booleanExpression OR booleanExpression
    (100) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (101) booleanExpression -> . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    LPARENTHESIS    shift and go to state 154
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    booleanExpression              shift and go to state 241
    variable                       shift and go to state 156
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 205

    (129) class_member -> varType . ID SEMICOLON
    (115) function -> varType . ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (29) declaration_without_modifier -> varType . ID

    ID              shift and go to state 240


state 206

    (107) for -> FOR LPARENTHESIS varType ID . IN ID RPARENTHESIS for_in_block
    (29) declaration_without_modifier -> varType ID .

    IN              shift and go to state 242
    ASSIGN_OPERATOR reduce using rule 29 (declaration_without_modifier -> varType ID .)


state 207

    (39) assignation -> ID ASSIGN_OPERATOR . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 136
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 208

    (38) assignation -> declaration ASSIGN_OPERATOR . variable
    (32) declaration -> declaration ASSIGN_OPERATOR . LESS_THAN varType GREATER_THAN list_literal
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    LESS_THAN       shift and go to state 122
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    declaration                    shift and go to state 117
    variable                       shift and go to state 123
    varType                        shift and go to state 30
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 205

    (129) print -> PRINT LPARENTHESIS variable RPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 243


state 206

    (121) function -> ID . LPARENTHESIS parameters RPARENTHESIS

    LPARENTHESIS    shift and go to state 87


state 207

    (131) class_def -> CLASS ID LBRACE class_members . RBRACE
    (132) class_members -> class_members . class_member
    (134) class_member -> . varType ID SEMICOLON
    (135) class_member -> . function
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE

    RBRACE          shift and go to state 244
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 162
    MAP_TYPE        shift and go to state 163
    SET_TYPE        shift and go to state 164
    VAR             shift and go to state 57
    VOID            shift and go to state 58
    ID              shift and go to state 206
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49

    class_member                   shift and go to state 245
    varType                        shift and go to state 209
    function                       shift and go to state 210
    declaration                    shift and go to state 117
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32

state 208

    (133) class_members -> class_member .

    RBRACE          reduce using rule 133 (class_members -> class_member .)
    INT_TYPE        reduce using rule 133 (class_members -> class_member .)
    STRING_TYPE     reduce using rule 133 (class_members -> class_member .)
    NUM_TYPE        reduce using rule 133 (class_members -> class_member .)
    DOUBLE_TYPE     reduce using rule 133 (class_members -> class_member .)
    BOOL_TYPE       reduce using rule 133 (class_members -> class_member .)
    LIST_TYPE       reduce using rule 133 (class_members -> class_member .)
    MAP_TYPE        reduce using rule 133 (class_members -> class_member .)
    SET_TYPE        reduce using rule 133 (class_members -> class_member .)
    VAR             reduce using rule 133 (class_members -> class_member .)
    VOID            reduce using rule 133 (class_members -> class_member .)
    ID              reduce using rule 133 (class_members -> class_member .)
    CONST           reduce using rule 133 (class_members -> class_member .)
    FINAL           reduce using rule 133 (class_members -> class_member .)
    LATE            reduce using rule 133 (class_members -> class_member .)


state 209

    (134) class_member -> varType . ID SEMICOLON
    (29) declaration_without_modifier -> varType . ID

    ID              shift and go to state 246


state 210

    (135) class_member -> function .

    RBRACE          reduce using rule 135 (class_member -> function .)
    INT_TYPE        reduce using rule 135 (class_member -> function .)
    STRING_TYPE     reduce using rule 135 (class_member -> function .)
    NUM_TYPE        reduce using rule 135 (class_member -> function .)
    DOUBLE_TYPE     reduce using rule 135 (class_member -> function .)
    BOOL_TYPE       reduce using rule 135 (class_member -> function .)
    LIST_TYPE       reduce using rule 135 (class_member -> function .)
    MAP_TYPE        reduce using rule 135 (class_member -> function .)
    SET_TYPE        reduce using rule 135 (class_member -> function .)
    VAR             reduce using rule 135 (class_member -> function .)
    VOID            reduce using rule 135 (class_member -> function .)
    ID              reduce using rule 135 (class_member -> function .)
    CONST           reduce using rule 135 (class_member -> function .)
    FINAL           reduce using rule 135 (class_member -> function .)
    LATE            reduce using rule 135 (class_member -> function .)


state 211

    (138) enum_values -> ID .

    RBRACE          reduce using rule 138 (enum_values -> ID .)
    COMMA           reduce using rule 138 (enum_values -> ID .)


state 212

    (136) enum -> ENUM ID LBRACE enum_values . RBRACE
    (137) enum_values -> enum_values . COMMA ID

    RBRACE          shift and go to state 247
    COMMA           shift and go to state 248


state 213

    (112) try -> TRY LBRACE statements RBRACE . FINALLY LBRACE statements RBRACE

    FINALLY         shift and go to state 249


state 214

    (113) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS . LBRACE cases default_case RBRACE

    LBRACE          shift and go to state 250


state 215

    (84) factor -> INT .
    (67) variable -> INT .

  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 67 (variable -> INT .)
  ! reduce/reduce conflict for COMMA resolved using rule 67 (variable -> INT .)
    TIMES           reduce using rule 84 (factor -> INT .)
    DIVIDE          reduce using rule 84 (factor -> INT .)
    MODULE          reduce using rule 84 (factor -> INT .)
    PLUS            reduce using rule 84 (factor -> INT .)
    MINUS           reduce using rule 84 (factor -> INT .)
    RPARENTHESIS    reduce using rule 67 (variable -> INT .)
    COMMA           reduce using rule 67 (variable -> INT .)

  ! RPARENTHESIS    [ reduce using rule 84 (factor -> INT .) ]
  ! COMMA           [ reduce using rule 84 (factor -> INT .) ]


state 216

    (85) factor -> DOUBLE .
    (68) variable -> DOUBLE .

  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 68 (variable -> DOUBLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 68 (variable -> DOUBLE .)
    TIMES           reduce using rule 85 (factor -> DOUBLE .)
    DIVIDE          reduce using rule 85 (factor -> DOUBLE .)
    MODULE          reduce using rule 85 (factor -> DOUBLE .)
    PLUS            reduce using rule 85 (factor -> DOUBLE .)
    MINUS           reduce using rule 85 (factor -> DOUBLE .)
    RPARENTHESIS    reduce using rule 68 (variable -> DOUBLE .)
    COMMA           reduce using rule 68 (variable -> DOUBLE .)

  ! RPARENTHESIS    [ reduce using rule 85 (factor -> DOUBLE .) ]
  ! COMMA           [ reduce using rule 85 (factor -> DOUBLE .) ]


state 217

    (86) factor -> ID .
    (88) factor -> ID . LBRACKET expression RBRACKET
    (89) factor -> ID . DOT function statement
    (90) factor -> ID . DOT function
    (91) factor -> ID . DOT ID
    (72) variable -> ID .
    (121) function -> ID . LPARENTHESIS parameters RPARENTHESIS

  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 72 (variable -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 72 (variable -> ID .)
    TIMES           reduce using rule 86 (factor -> ID .)
    DIVIDE          reduce using rule 86 (factor -> ID .)
    MODULE          reduce using rule 86 (factor -> ID .)
    PLUS            reduce using rule 86 (factor -> ID .)
    MINUS           reduce using rule 86 (factor -> ID .)
    LBRACKET        shift and go to state 89
    DOT             shift and go to state 88
    RPARENTHESIS    reduce using rule 72 (variable -> ID .)
    COMMA           reduce using rule 72 (variable -> ID .)
    LPARENTHESIS    shift and go to state 87

  ! RPARENTHESIS    [ reduce using rule 86 (factor -> ID .) ]
  ! COMMA           [ reduce using rule 86 (factor -> ID .) ]


state 218

    (128) lambda -> LPARENTHESIS parameters RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 251


state 219

    (32) declaration -> declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN . list_literal
    (57) list_literal -> . LBRACKET list_elements RBRACKET

    LBRACKET        shift and go to state 253

    list_literal                   shift and go to state 252

state 223

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA varType . GREATER_THAN ID ASSIGN_OPERATOR map_literal

    GREATER_THAN    shift and go to state 254


state 224

    (120) function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RBRACE          reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    declaration                    shift and go to state 6
    statements                     shift and go to state 254
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 225

    (122) function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW . expression SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID

    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    ID              shift and go to state 77
    LPARENTHESIS    shift and go to state 36

    expression                     shift and go to state 255
    term                           shift and go to state 25
    factor                         shift and go to state 46

state 226

    (123) parameters -> parameters COMMA parameter .

    RPARENTHESIS    reduce using rule 123 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 123 (parameters -> parameters COMMA parameter .)


state 227

    (30) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID . ASSIGN_OPERATOR list_literal

    ASSIGN_OPERATOR shift and go to state 256


state 228

    (130) input -> ID ASSIGN_OPERATOR STDIN DOT READ . LPARENTHESIS RPARENTHESIS SEMICOLON

    LPARENTHESIS    shift and go to state 257


state 229

    (31) declaration -> declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN . ID ASSIGN_OPERATOR list_literal

    ID              shift and go to state 258


state 230

    (34) declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA . varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    LIST_TYPE       shift and go to state 132
    MAP_TYPE        shift and go to state 134
    SET_TYPE        shift and go to state 135
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    varType                        shift and go to state 259

state 231

    (36) declaration -> declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN . ID ASSIGN_OPERATOR set_literal

    ID              shift and go to state 260


state 232

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA varType . GREATER_THAN ID ASSIGN_OPERATOR map_literal

    GREATER_THAN    shift and go to state 261


state 233

    (35) declaration -> SET_TYPE LESS_THAN varType GREATER_THAN ID . ASSIGN_OPERATOR set_literal

    ASSIGN_OPERATOR shift and go to state 262


state 234

    (100) booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .

    RPARENTHESIS    reduce using rule 100 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)
    AND             reduce using rule 100 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)
    OR              reduce using rule 100 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)
    SEMICOLON       reduce using rule 100 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)
    RBRACE          reduce using rule 100 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)
    COMMA           reduce using rule 100 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)


state 231

    (102) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .
    (103) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement . ELSE statement

    LBRACE          reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    CONTINUE        reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    BREAK           reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    LIST_TYPE       reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    MAP_TYPE        reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    SET_TYPE        reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    ID              reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    IMPORT          reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    IF              reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    WHILE           reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    FOR             reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    PRINT           reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    CLASS           reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    ENUM            reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    TRY             reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    SWITCH          reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    RETURN          reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    CONST           reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    FINAL           reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    LATE            reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    MINUS           reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    INT             reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    DOUBLE          reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    LPARENTHESIS    reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    INT_TYPE        reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    STRING_TYPE     reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    NUM_TYPE        reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    DOUBLE_TYPE     reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    BOOL_TYPE       reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    VAR             reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    VOID            reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    $end            reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    RBRACE          reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    TIMES           reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    DIVIDE          reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    MODULE          reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    SEMICOLON       reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    PLUS            reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    RPARENTHESIS    reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    COMMA           reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    RBRACKET        reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    EQUALS          reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    NOT_EQUALS      reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    GREATER_THAN    reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    LESS_THAN       reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    GREATER_THAN_OR_EQUALS reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    LESS_THAN_OR_EQUALS reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    AND             reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    OR              reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    COLON           reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    DEFAULT         reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    CASE            reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    ELSE            shift and go to state 263

  ! ELSE            [ reduce using rule 102 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .) ]


state 235

    (102) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression . SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (103) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression . SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (95) booleanExpression -> booleanExpression . AND booleanExpression
    (96) booleanExpression -> booleanExpression . OR booleanExpression

    SEMICOLON       shift and go to state 257
    AND             shift and go to state 188
    OR              shift and go to state 189


state 236

    (98) booleanExpression -> booleanExpression AND booleanExpression .
    (98) booleanExpression -> booleanExpression . AND booleanExpression
    (99) booleanExpression -> booleanExpression . OR booleanExpression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPARENTHESIS    reduce using rule 98 (booleanExpression -> booleanExpression AND booleanExpression .)
    SEMICOLON       reduce using rule 98 (booleanExpression -> booleanExpression AND booleanExpression .)
    RBRACE          reduce using rule 98 (booleanExpression -> booleanExpression AND booleanExpression .)
    COMMA           reduce using rule 98 (booleanExpression -> booleanExpression AND booleanExpression .)
    AND             shift and go to state 192
    OR              shift and go to state 193

  ! AND             [ reduce using rule 98 (booleanExpression -> booleanExpression AND booleanExpression .) ]
  ! OR              [ reduce using rule 98 (booleanExpression -> booleanExpression AND booleanExpression .) ]


state 237

    (99) booleanExpression -> booleanExpression OR booleanExpression .
    (98) booleanExpression -> booleanExpression . AND booleanExpression
    (99) booleanExpression -> booleanExpression . OR booleanExpression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPARENTHESIS    reduce using rule 99 (booleanExpression -> booleanExpression OR booleanExpression .)
    SEMICOLON       reduce using rule 99 (booleanExpression -> booleanExpression OR booleanExpression .)
    RBRACE          reduce using rule 99 (booleanExpression -> booleanExpression OR booleanExpression .)
    COMMA           reduce using rule 99 (booleanExpression -> booleanExpression OR booleanExpression .)
    AND             shift and go to state 192
    OR              shift and go to state 193

  ! AND             [ reduce using rule 99 (booleanExpression -> booleanExpression OR booleanExpression .) ]
  ! OR              [ reduce using rule 99 (booleanExpression -> booleanExpression OR booleanExpression .) ]


state 238

    (92) booleanExpression -> variable EQUALS variable .

    RPARENTHESIS    reduce using rule 92 (booleanExpression -> variable EQUALS variable .)
    AND             reduce using rule 92 (booleanExpression -> variable EQUALS variable .)
    OR              reduce using rule 92 (booleanExpression -> variable EQUALS variable .)
    SEMICOLON       reduce using rule 92 (booleanExpression -> variable EQUALS variable .)
    RBRACE          reduce using rule 92 (booleanExpression -> variable EQUALS variable .)
    COMMA           reduce using rule 92 (booleanExpression -> variable EQUALS variable .)


state 239

    (93) booleanExpression -> variable NOT_EQUALS variable .

    RPARENTHESIS    reduce using rule 93 (booleanExpression -> variable NOT_EQUALS variable .)
    AND             reduce using rule 93 (booleanExpression -> variable NOT_EQUALS variable .)
    OR              reduce using rule 93 (booleanExpression -> variable NOT_EQUALS variable .)
    SEMICOLON       reduce using rule 93 (booleanExpression -> variable NOT_EQUALS variable .)
    RBRACE          reduce using rule 93 (booleanExpression -> variable NOT_EQUALS variable .)
    COMMA           reduce using rule 93 (booleanExpression -> variable NOT_EQUALS variable .)


state 240

    (94) booleanExpression -> variable GREATER_THAN variable .

    RPARENTHESIS    reduce using rule 94 (booleanExpression -> variable GREATER_THAN variable .)
    AND             reduce using rule 94 (booleanExpression -> variable GREATER_THAN variable .)
    OR              reduce using rule 94 (booleanExpression -> variable GREATER_THAN variable .)
    SEMICOLON       reduce using rule 94 (booleanExpression -> variable GREATER_THAN variable .)
    RBRACE          reduce using rule 94 (booleanExpression -> variable GREATER_THAN variable .)
    COMMA           reduce using rule 94 (booleanExpression -> variable GREATER_THAN variable .)


state 241

    (95) booleanExpression -> variable LESS_THAN variable .

    RPARENTHESIS    reduce using rule 95 (booleanExpression -> variable LESS_THAN variable .)
    AND             reduce using rule 95 (booleanExpression -> variable LESS_THAN variable .)
    OR              reduce using rule 95 (booleanExpression -> variable LESS_THAN variable .)
    SEMICOLON       reduce using rule 95 (booleanExpression -> variable LESS_THAN variable .)
    RBRACE          reduce using rule 95 (booleanExpression -> variable LESS_THAN variable .)
    COMMA           reduce using rule 95 (booleanExpression -> variable LESS_THAN variable .)


state 242

    (96) booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 96 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    AND             reduce using rule 96 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    OR              reduce using rule 96 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    SEMICOLON       reduce using rule 96 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    RBRACE          reduce using rule 96 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    COMMA           reduce using rule 96 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)


state 243

    (97) booleanExpression -> variable LESS_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 97 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    AND             reduce using rule 97 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    OR              reduce using rule 97 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    SEMICOLON       reduce using rule 97 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    RBRACE          reduce using rule 97 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    COMMA           reduce using rule 97 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)


state 244

    (104) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RBRACE          reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statements                     shift and go to state 264
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 241

    (105) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression . SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression . SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (98) booleanExpression -> booleanExpression . AND booleanExpression
    (99) booleanExpression -> booleanExpression . OR booleanExpression

    SEMICOLON       shift and go to state 265
    AND             shift and go to state 192
    OR              shift and go to state 193


state 242

    (107) for -> FOR LPARENTHESIS varType ID IN . ID RPARENTHESIS for_in_block

    ID              shift and go to state 266


state 246

    (129) print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .

    LBRACE          reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    LIST_TYPE       reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    MAP_TYPE        reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    SET_TYPE        reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    ID              reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    IMPORT          reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    IF              reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    ENUM            reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    TRY             reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    CONST           reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    LATE            reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    MINUS           reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    INT             reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    DOUBLE          reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    LPARENTHESIS    reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    INT_TYPE        reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    STRING_TYPE     reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    NUM_TYPE        reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    BOOL_TYPE       reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    VAR             reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    VOID            reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    $end            reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    RBRACE          reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    DIVIDE          reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    MODULE          reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    PLUS            reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    RPARENTHESIS    reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    RBRACKET        reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    EQUALS          reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    NOT_EQUALS      reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    GREATER_THAN    reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    LESS_THAN       reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    AND             reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    OR              reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    COLON           reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    DEFAULT         reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    CASE            reduce using rule 129 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)


state 247

    (131) class_def -> CLASS ID LBRACE class_members RBRACE .

    LBRACE          reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    CONTINUE        reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    BREAK           reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    LIST_TYPE       reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    MAP_TYPE        reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    SET_TYPE        reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    ID              reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    IMPORT          reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    IF              reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    WHILE           reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    FOR             reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    PRINT           reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    CLASS           reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    ENUM            reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    TRY             reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    SWITCH          reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    RETURN          reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    CONST           reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    FINAL           reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    LATE            reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    MINUS           reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    INT             reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    DOUBLE          reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    LPARENTHESIS    reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    INT_TYPE        reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    STRING_TYPE     reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    NUM_TYPE        reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    DOUBLE_TYPE     reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    BOOL_TYPE       reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    VAR             reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    VOID            reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    $end            reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    RBRACE          reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    TIMES           reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    DIVIDE          reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    MODULE          reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    SEMICOLON       reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    PLUS            reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    RPARENTHESIS    reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    COMMA           reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    RBRACKET        reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    EQUALS          reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    NOT_EQUALS      reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    GREATER_THAN    reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    LESS_THAN       reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    AND             reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    OR              reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    COLON           reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    ELSE            reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    DEFAULT         reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    CASE            reduce using rule 131 (class_def -> CLASS ID LBRACE class_members RBRACE .)


state 256

    (132) class_members -> class_members class_member .

    RBRACE          reduce using rule 132 (class_members -> class_members class_member .)
    INT_TYPE        reduce using rule 132 (class_members -> class_members class_member .)
    STRING_TYPE     reduce using rule 132 (class_members -> class_members class_member .)
    NUM_TYPE        reduce using rule 132 (class_members -> class_members class_member .)
    DOUBLE_TYPE     reduce using rule 132 (class_members -> class_members class_member .)
    BOOL_TYPE       reduce using rule 132 (class_members -> class_members class_member .)
    LIST_TYPE       reduce using rule 132 (class_members -> class_members class_member .)
    MAP_TYPE        reduce using rule 132 (class_members -> class_members class_member .)
    SET_TYPE        reduce using rule 132 (class_members -> class_members class_member .)
    VAR             reduce using rule 132 (class_members -> class_members class_member .)
    VOID            reduce using rule 132 (class_members -> class_members class_member .)
    ID              reduce using rule 132 (class_members -> class_members class_member .)
    CONST           reduce using rule 132 (class_members -> class_members class_member .)
    FINAL           reduce using rule 132 (class_members -> class_members class_member .)
    LATE            reduce using rule 132 (class_members -> class_members class_member .)


state 246

    (134) class_member -> varType ID . SEMICOLON
    (29) declaration_without_modifier -> varType ID .

    SEMICOLON       shift and go to state 267
    LPARENTHESIS    reduce using rule 29 (declaration_without_modifier -> varType ID .)
    ASSIGN_OPERATOR reduce using rule 29 (declaration_without_modifier -> varType ID .)


state 247

    (136) enum -> ENUM ID LBRACE enum_values RBRACE .

    LBRACE          reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    CONTINUE        reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    BREAK           reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    LIST_TYPE       reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    MAP_TYPE        reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    SET_TYPE        reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    ID              reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    IMPORT          reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    IF              reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    WHILE           reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    FOR             reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    PRINT           reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    CLASS           reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    ENUM            reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    TRY             reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    SWITCH          reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    RETURN          reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    CONST           reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    FINAL           reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    LATE            reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    MINUS           reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    INT             reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    DOUBLE          reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    LPARENTHESIS    reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    INT_TYPE        reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    STRING_TYPE     reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    NUM_TYPE        reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    DOUBLE_TYPE     reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    BOOL_TYPE       reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    VAR             reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    VOID            reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    $end            reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    RBRACE          reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    TIMES           reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    DIVIDE          reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    MODULE          reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    SEMICOLON       reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    PLUS            reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    RPARENTHESIS    reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    COMMA           reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    RBRACKET        reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    EQUALS          reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    NOT_EQUALS      reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    GREATER_THAN    reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    LESS_THAN       reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    AND             reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    OR              reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    COLON           reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    ELSE            reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    DEFAULT         reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    CASE            reduce using rule 136 (enum -> ENUM ID LBRACE enum_values RBRACE .)


state 248

    (137) enum_values -> enum_values COMMA . ID

    ID              shift and go to state 268


state 249

    (112) try -> TRY LBRACE statements RBRACE FINALLY . LBRACE statements RBRACE

    LBRACE          shift and go to state 269


state 250

    (113) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE . cases default_case RBRACE
    (114) cases -> . cases case
    (115) cases -> . case
    (116) case -> . CASE variable COLON statements BREAK
    (117) case -> . CASE variable COLON statements SEMICOLON
    (118) case -> . CASE variable COLON statements

    CASE            shift and go to state 272

    cases                          shift and go to state 270
    case                           shift and go to state 271

state 251

    (128) lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RBRACE          reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statements                     shift and go to state 273
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 252

    (32) declaration -> declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal .

    SEMICOLON       reduce using rule 32 (declaration -> declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal .)
    ASSIGN_OPERATOR reduce using rule 32 (declaration -> declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal .)
    LPARENTHESIS    reduce using rule 32 (declaration -> declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal .)
    RPARENTHESIS    reduce using rule 32 (declaration -> declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal .)
    COMMA           reduce using rule 32 (declaration -> declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal .)


state 253

    (57) list_literal -> LBRACKET . list_elements RBRACKET
    (58) list_elements -> . list_elements COMMA variable
    (59) list_elements -> . variable
    (60) list_elements -> . empty
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (143) empty -> .
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    RBRACKET        reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    list_elements                  shift and go to state 274
    variable                       shift and go to state 275
    empty                          shift and go to state 276
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 254

    (120) function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    RBRACE          shift and go to state 277
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! RBRACE          [ reduce using rule 143 (empty -> .) ]
  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    declaration                    shift and go to state 6
    statement                      shift and go to state 59
    expression                     shift and go to state 5
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 255

    (122) function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression . SEMICOLON
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 278
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63


state 256

    (30) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR . list_literal
    (57) list_literal -> . LBRACKET list_elements RBRACKET

    LBRACKET        shift and go to state 253

    list_literal                   shift and go to state 279

state 257

    (130) input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS . RPARENTHESIS SEMICOLON

    RPARENTHESIS    shift and go to state 280


state 258

    (31) declaration -> declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID . ASSIGN_OPERATOR list_literal

    ASSIGN_OPERATOR shift and go to state 281


state 259

    (34) declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType . GREATER_THAN ID ASSIGN_OPERATOR map_literal

    GREATER_THAN    shift and go to state 282


state 260

    (36) declaration -> declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID . ASSIGN_OPERATOR set_literal

    ASSIGN_OPERATOR shift and go to state 283


state 261

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN . ID ASSIGN_OPERATOR map_literal

    ID              shift and go to state 284


state 262

    (35) declaration -> SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR . set_literal
    (37) set_literal -> . LBRACE list_elements RBRACE

    LBRACE          shift and go to state 286

    set_literal                    shift and go to state 285

state 263

    (103) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    ELSE            reduce using rule 143 (empty -> .)
    $end            reduce using rule 143 (empty -> .)
    RBRACE          reduce using rule 143 (empty -> .)
    TIMES           reduce using rule 143 (empty -> .)
    DIVIDE          reduce using rule 143 (empty -> .)
    MODULE          reduce using rule 143 (empty -> .)
    SEMICOLON       reduce using rule 143 (empty -> .)
    PLUS            reduce using rule 143 (empty -> .)
    RPARENTHESIS    reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    RBRACKET        reduce using rule 143 (empty -> .)
    EQUALS          reduce using rule 143 (empty -> .)
    NOT_EQUALS      reduce using rule 143 (empty -> .)
    GREATER_THAN    reduce using rule 143 (empty -> .)
    LESS_THAN       reduce using rule 143 (empty -> .)
    GREATER_THAN_OR_EQUALS reduce using rule 143 (empty -> .)
    LESS_THAN_OR_EQUALS reduce using rule 143 (empty -> .)
    AND             reduce using rule 143 (empty -> .)
    OR              reduce using rule 143 (empty -> .)
    COLON           reduce using rule 143 (empty -> .)
    DEFAULT         reduce using rule 143 (empty -> .)
    CASE            reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statement                      shift and go to state 287
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 264

    (104) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    RBRACE          shift and go to state 288
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! RBRACE          [ reduce using rule 143 (empty -> .) ]
  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    varType                        shift and go to state 30
    statement                      shift and go to state 59
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 265

    (105) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON . increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON . decrement RPARENTHESIS LBRACE statements RBRACE
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT

    ID              shift and go to state 291

    increment                      shift and go to state 289
    decrement                      shift and go to state 290

state 266

    (107) for -> FOR LPARENTHESIS varType ID IN ID . RPARENTHESIS for_in_block

    LBRACE          reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CONTINUE        reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    BREAK           reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LIST_TYPE       reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    MAP_TYPE        reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ID              reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    IMPORT          reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    IF              reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    WHILE           reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    FOR             reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    PRINT           reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CLASS           reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ENUM            reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    TRY             reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    SWITCH          reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    RETURN          reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CONST           reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    FINAL           reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LATE            reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    INT_TYPE        reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    STRING_TYPE     reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    NUM_TYPE        reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DOUBLE_TYPE     reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    BOOL_TYPE       reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    SET_TYPE        reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    VAR             reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    VOID            reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    MINUS           reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    INT             reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DOUBLE          reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LPARENTHESIS    reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    $end            reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    RBRACE          reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    TIMES           reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DIVIDE          reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    MODULE          reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    SEMICOLON       reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    PLUS            reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    RPARENTHESIS    reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    COMMA           reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    RBRACKET        reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    EQUALS          reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    NOT_EQUALS      reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    GREATER_THAN    reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LESS_THAN       reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    GREATER_THAN_OR_EQUALS reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LESS_THAN_OR_EQUALS reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    AND             reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    OR              reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    COLON           reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ELSE            reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DEFAULT         reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CASE            reduce using rule 100 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)


state 267

    (134) class_member -> varType ID SEMICOLON .

    RBRACE          reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    INT_TYPE        reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    STRING_TYPE     reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    NUM_TYPE        reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    BOOL_TYPE       reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    LIST_TYPE       reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    MAP_TYPE        reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    SET_TYPE        reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    VAR             reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    VOID            reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    ID              reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    CONST           reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    FINAL           reduce using rule 134 (class_member -> varType ID SEMICOLON .)
    LATE            reduce using rule 134 (class_member -> varType ID SEMICOLON .)


state 268

    (137) enum_values -> enum_values COMMA ID .

    RBRACE          reduce using rule 137 (enum_values -> enum_values COMMA ID .)
    COMMA           reduce using rule 137 (enum_values -> enum_values COMMA ID .)


state 269

    (112) try -> TRY LBRACE statements RBRACE FINALLY LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RBRACE          reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statements                     shift and go to state 293
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 270

    (113) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases . default_case RBRACE
    (114) cases -> cases . case
    (119) default_case -> . DEFAULT COLON statements
    (116) case -> . CASE variable COLON statements BREAK
    (117) case -> . CASE variable COLON statements SEMICOLON
    (118) case -> . CASE variable COLON statements

    DEFAULT         shift and go to state 296
    CASE            shift and go to state 272

    default_case                   shift and go to state 294
    case                           shift and go to state 295

state 271

    (115) cases -> case .

    DEFAULT         reduce using rule 115 (cases -> case .)
    CASE            reduce using rule 115 (cases -> case .)


state 272

    (116) case -> CASE . variable COLON statements BREAK
    (117) case -> CASE . variable COLON statements SEMICOLON
    (118) case -> CASE . variable COLON statements
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 297
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 273

    (128) lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    RBRACE          shift and go to state 298
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! RBRACE          [ reduce using rule 143 (empty -> .) ]
  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statement                      shift and go to state 59
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 274

    (57) list_literal -> LBRACKET list_elements . RBRACKET
    (58) list_elements -> list_elements . COMMA variable

    RBRACKET        shift and go to state 299
    COMMA           shift and go to state 300


state 275

    (59) list_elements -> variable .

    RBRACKET        reduce using rule 59 (list_elements -> variable .)
    COMMA           reduce using rule 59 (list_elements -> variable .)
    RBRACE          reduce using rule 59 (list_elements -> variable .)


state 276

    (60) list_elements -> empty .

    RBRACKET        reduce using rule 60 (list_elements -> empty .)
    COMMA           reduce using rule 60 (list_elements -> empty .)
    RBRACE          reduce using rule 60 (list_elements -> empty .)


state 277

    (120) function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RETURN          reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LATE            reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    MINUS           reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RPARENTHESIS    reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    COMMA           reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    TIMES           reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    DIVIDE          reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    MODULE          reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    PLUS            reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RBRACKET        reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    EQUALS          reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    NOT_EQUALS      reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN    reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN       reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    AND             reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    OR              reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    COLON           reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    CASE            reduce using rule 120 (function -> declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)


state 278

    (122) function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .

    LBRACE          reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    CONTINUE        reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    BREAK           reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    LIST_TYPE       reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    MAP_TYPE        reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    SET_TYPE        reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    ID              reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    IMPORT          reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    IF              reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    WHILE           reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    FOR             reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    PRINT           reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    CLASS           reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    ENUM            reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    TRY             reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    SWITCH          reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    RETURN          reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    CONST           reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    FINAL           reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    LATE            reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    MINUS           reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    INT             reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    DOUBLE          reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    LPARENTHESIS    reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    INT_TYPE        reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    STRING_TYPE     reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    NUM_TYPE        reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    VAR             reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    VOID            reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    $end            reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    RBRACE          reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    SEMICOLON       reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    RPARENTHESIS    reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    COMMA           reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    TIMES           reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    DIVIDE          reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    MODULE          reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    PLUS            reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    RBRACKET        reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    EQUALS          reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    NOT_EQUALS      reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    GREATER_THAN    reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    LESS_THAN       reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    AND             reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    OR              reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    COLON           reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    ELSE            reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    DEFAULT         reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    CASE            reduce using rule 122 (function -> declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)


state 279

    (30) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .

    SEMICOLON       reduce using rule 30 (declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)
    ASSIGN_OPERATOR reduce using rule 30 (declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)
    LPARENTHESIS    reduce using rule 30 (declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)
    RPARENTHESIS    reduce using rule 30 (declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)
    COMMA           reduce using rule 30 (declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)


state 280

    (130) input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 301


state 281

    (31) declaration -> declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR . list_literal
    (57) list_literal -> . LBRACKET list_elements RBRACKET

    LBRACKET        shift and go to state 253

    list_literal                   shift and go to state 302

state 282

    (34) declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN . ID ASSIGN_OPERATOR map_literal

    ID              shift and go to state 303


state 283

    (36) declaration -> declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR . set_literal
    (37) set_literal -> . LBRACE list_elements RBRACE

    LBRACE          shift and go to state 286

    set_literal                    shift and go to state 304

state 284

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID . ASSIGN_OPERATOR map_literal

    ASSIGN_OPERATOR shift and go to state 305


state 285

    (35) declaration -> SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .

    SEMICOLON       reduce using rule 35 (declaration -> SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .)
    ASSIGN_OPERATOR reduce using rule 35 (declaration -> SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .)
    LPARENTHESIS    reduce using rule 35 (declaration -> SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .)
    RPARENTHESIS    reduce using rule 35 (declaration -> SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .)
    COMMA           reduce using rule 35 (declaration -> SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .)


state 286

    (37) set_literal -> LBRACE . list_elements RBRACE
    (58) list_elements -> . list_elements COMMA variable
    (59) list_elements -> . variable
    (60) list_elements -> . empty
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (143) empty -> .
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    RBRACE          reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    list_elements                  shift and go to state 306
    variable                       shift and go to state 275
    empty                          shift and go to state 276
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 287

    (103) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .

    LBRACE          reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CONTINUE        reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    BREAK           reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LIST_TYPE       reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    MAP_TYPE        reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    SET_TYPE        reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ID              reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    IMPORT          reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    IF              reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    WHILE           reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    FOR             reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    PRINT           reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CLASS           reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ENUM            reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    TRY             reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    SWITCH          reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    RETURN          reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CONST           reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    FINAL           reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LATE            reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    MINUS           reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    INT             reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DOUBLE          reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LPARENTHESIS    reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    INT_TYPE        reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    STRING_TYPE     reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    NUM_TYPE        reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DOUBLE_TYPE     reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    BOOL_TYPE       reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    VAR             reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    VOID            reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    $end            reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    RBRACE          reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    TIMES           reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DIVIDE          reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    MODULE          reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    SEMICOLON       reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    PLUS            reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    RPARENTHESIS    reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    COMMA           reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    RBRACKET        reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    EQUALS          reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    NOT_EQUALS      reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    GREATER_THAN    reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LESS_THAN       reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    GREATER_THAN_OR_EQUALS reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LESS_THAN_OR_EQUALS reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    AND             reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    OR              reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    COLON           reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ELSE            reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DEFAULT         reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CASE            reduce using rule 103 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)


state 288

    (104) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    RETURN          reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    LATE            reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    MINUS           reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    TIMES           reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    DIVIDE          reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    MODULE          reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    PLUS            reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    RPARENTHESIS    reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    COMMA           reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    RBRACKET        reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    EQUALS          reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    NOT_EQUALS      reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN    reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN       reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    AND             reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    OR              reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    COLON           reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    CASE            reduce using rule 104 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)


state 289

    (105) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment . RPARENTHESIS LBRACE statements RBRACE

    RPARENTHESIS    shift and go to state 307


state 290

    (106) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement . RPARENTHESIS LBRACE statements RBRACE

    RPARENTHESIS    shift and go to state 308


state 291

    (110) increment -> ID . INCREMENT
    (111) decrement -> ID . DECREMENT

    INCREMENT       shift and go to state 85
    DECREMENT       shift and go to state 86


state 292

    (107) for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS . for_in_block
    (108) for_in_block -> . LBRACE for_in_scope statements RBRACE

    LBRACE          shift and go to state 310

    for_in_block                   shift and go to state 309

state 293

    (112) try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    RBRACE          shift and go to state 311
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! RBRACE          [ reduce using rule 143 (empty -> .) ]
  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statement                      shift and go to state 59
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 294

    (113) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case . RBRACE

    RBRACE          shift and go to state 312


state 295

    (114) cases -> cases case .

    DEFAULT         reduce using rule 114 (cases -> cases case .)
    CASE            reduce using rule 114 (cases -> cases case .)


state 296

    (119) default_case -> DEFAULT . COLON statements

    COLON           shift and go to state 313


state 302

    (116) case -> CASE variable . COLON statements BREAK
    (117) case -> CASE variable . COLON statements SEMICOLON
    (118) case -> CASE variable . COLON statements

    COLON           shift and go to state 314


state 303

    (128) lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .

    SEMICOLON       reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RPARENTHESIS    reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    COMMA           reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    EQUALS          reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    NOT_EQUALS      reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN    reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN       reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    AND             reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    OR              reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RBRACKET        reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    COLON           reduce using rule 128 (lambda -> LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)

    map_literal                    shift and go to state 311

state 304

    (57) list_literal -> LBRACKET list_elements RBRACKET .

    SEMICOLON       reduce using rule 57 (list_literal -> LBRACKET list_elements RBRACKET .)
    ASSIGN_OPERATOR reduce using rule 57 (list_literal -> LBRACKET list_elements RBRACKET .)
    LPARENTHESIS    reduce using rule 57 (list_literal -> LBRACKET list_elements RBRACKET .)
    RPARENTHESIS    reduce using rule 57 (list_literal -> LBRACKET list_elements RBRACKET .)
    COMMA           reduce using rule 57 (list_literal -> LBRACKET list_elements RBRACKET .)


state 305

    (58) list_elements -> list_elements COMMA . variable
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 315
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 301

    (130) input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .

    LBRACE          reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    LIST_TYPE       reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    MAP_TYPE        reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    SET_TYPE        reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    ID              reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    IMPORT          reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    IF              reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    ENUM            reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    TRY             reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    CONST           reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    LATE            reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    MINUS           reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    INT             reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    DOUBLE          reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    LPARENTHESIS    reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    INT_TYPE        reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    STRING_TYPE     reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    NUM_TYPE        reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    BOOL_TYPE       reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    VAR             reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    VOID            reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    $end            reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    RBRACE          reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    TIMES           reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    DIVIDE          reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    MODULE          reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    PLUS            reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    RPARENTHESIS    reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    COMMA           reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    RBRACKET        reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    EQUALS          reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    NOT_EQUALS      reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    GREATER_THAN    reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    LESS_THAN       reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    GREATER_THAN_OR_EQUALS reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    LESS_THAN_OR_EQUALS reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    AND             reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    OR              reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    COLON           reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    DEFAULT         reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    CASE            reduce using rule 130 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)


state 307

    (31) declaration -> declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .

    SEMICOLON       reduce using rule 31 (declaration -> declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)
    ASSIGN_OPERATOR reduce using rule 31 (declaration -> declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)
    LPARENTHESIS    reduce using rule 31 (declaration -> declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)
    RPARENTHESIS    reduce using rule 31 (declaration -> declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)
    COMMA           reduce using rule 31 (declaration -> declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)


state 303

    (34) declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID . ASSIGN_OPERATOR map_literal

    ASSIGN_OPERATOR shift and go to state 316


state 304

    (36) declaration -> declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .

    SEMICOLON       reduce using rule 36 (declaration -> declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .)
    ASSIGN_OPERATOR reduce using rule 36 (declaration -> declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .)
    LPARENTHESIS    reduce using rule 36 (declaration -> declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .)
    RPARENTHESIS    reduce using rule 36 (declaration -> declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .)
    COMMA           reduce using rule 36 (declaration -> declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal .)


state 305

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR . map_literal
    (61) map_literal -> . LBRACE map_elements RBRACE

    LBRACE          shift and go to state 318

    map_literal                    shift and go to state 317

state 306

    (37) set_literal -> LBRACE list_elements . RBRACE
    (58) list_elements -> list_elements . COMMA variable

    RBRACE          shift and go to state 319
    COMMA           shift and go to state 300


state 307

    (105) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 320


state 308

    (106) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 321


state 309

    (107) for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .

    LBRACE          reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    CONTINUE        reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    BREAK           reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    LIST_TYPE       reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    MAP_TYPE        reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    SET_TYPE        reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    ID              reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    IMPORT          reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    IF              reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    WHILE           reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    FOR             reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    PRINT           reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    CLASS           reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    ENUM            reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    TRY             reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    SWITCH          reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    RETURN          reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    CONST           reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    FINAL           reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    LATE            reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    MINUS           reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    INT             reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    DOUBLE          reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    LPARENTHESIS    reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    INT_TYPE        reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    STRING_TYPE     reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    NUM_TYPE        reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    DOUBLE_TYPE     reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    BOOL_TYPE       reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    VAR             reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    VOID            reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    $end            reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    RBRACE          reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    TIMES           reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    DIVIDE          reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    MODULE          reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    SEMICOLON       reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    PLUS            reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    RPARENTHESIS    reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    COMMA           reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    RBRACKET        reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    EQUALS          reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    NOT_EQUALS      reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    GREATER_THAN    reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    LESS_THAN       reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    GREATER_THAN_OR_EQUALS reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    LESS_THAN_OR_EQUALS reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    AND             reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    OR              reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    COLON           reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    ELSE            reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    DEFAULT         reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)
    CASE            reduce using rule 107 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block .)


state 310

    (108) for_in_block -> LBRACE . for_in_scope statements RBRACE
    (109) for_in_scope -> .

    LBRACE          reduce using rule 109 (for_in_scope -> .)
    CONTINUE        reduce using rule 109 (for_in_scope -> .)
    BREAK           reduce using rule 109 (for_in_scope -> .)
    LIST_TYPE       reduce using rule 109 (for_in_scope -> .)
    MAP_TYPE        reduce using rule 109 (for_in_scope -> .)
    SET_TYPE        reduce using rule 109 (for_in_scope -> .)
    ID              reduce using rule 109 (for_in_scope -> .)
    IMPORT          reduce using rule 109 (for_in_scope -> .)
    IF              reduce using rule 109 (for_in_scope -> .)
    WHILE           reduce using rule 109 (for_in_scope -> .)
    FOR             reduce using rule 109 (for_in_scope -> .)
    PRINT           reduce using rule 109 (for_in_scope -> .)
    CLASS           reduce using rule 109 (for_in_scope -> .)
    ENUM            reduce using rule 109 (for_in_scope -> .)
    TRY             reduce using rule 109 (for_in_scope -> .)
    SWITCH          reduce using rule 109 (for_in_scope -> .)
    RETURN          reduce using rule 109 (for_in_scope -> .)
    CONST           reduce using rule 109 (for_in_scope -> .)
    FINAL           reduce using rule 109 (for_in_scope -> .)
    LATE            reduce using rule 109 (for_in_scope -> .)
    MINUS           reduce using rule 109 (for_in_scope -> .)
    INT             reduce using rule 109 (for_in_scope -> .)
    DOUBLE          reduce using rule 109 (for_in_scope -> .)
    LPARENTHESIS    reduce using rule 109 (for_in_scope -> .)
    INT_TYPE        reduce using rule 109 (for_in_scope -> .)
    STRING_TYPE     reduce using rule 109 (for_in_scope -> .)
    NUM_TYPE        reduce using rule 109 (for_in_scope -> .)
    DOUBLE_TYPE     reduce using rule 109 (for_in_scope -> .)
    BOOL_TYPE       reduce using rule 109 (for_in_scope -> .)
    VAR             reduce using rule 109 (for_in_scope -> .)
    VOID            reduce using rule 109 (for_in_scope -> .)
    RBRACE          reduce using rule 109 (for_in_scope -> .)

    for_in_scope                   shift and go to state 322

state 311

    (112) try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .

    LBRACE          reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    BREAK           reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    ID              reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    IMPORT          reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    IF              reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    WHILE           reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    FOR             reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    PRINT           reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    CLASS           reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    ENUM            reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    TRY             reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    SWITCH          reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    RETURN          reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    CONST           reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    FINAL           reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    LATE            reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    MINUS           reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    INT             reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    VAR             reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    VOID            reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    $end            reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    RBRACE          reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    TIMES           reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    DIVIDE          reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    MODULE          reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    PLUS            reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    RPARENTHESIS    reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    COMMA           reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    RBRACKET        reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    EQUALS          reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    NOT_EQUALS      reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    GREATER_THAN    reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    LESS_THAN       reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    AND             reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    OR              reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    COLON           reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    ELSE            reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    CASE            reduce using rule 112 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)


state 312

    (113) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .

    LBRACE          reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    CONTINUE        reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    BREAK           reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    LIST_TYPE       reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    MAP_TYPE        reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    SET_TYPE        reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    ID              reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    IMPORT          reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    IF              reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    WHILE           reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    FOR             reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    PRINT           reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    CLASS           reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    ENUM            reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    TRY             reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    SWITCH          reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    RETURN          reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    CONST           reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    FINAL           reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    LATE            reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    MINUS           reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    INT             reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    DOUBLE          reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    LPARENTHESIS    reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    INT_TYPE        reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    STRING_TYPE     reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    NUM_TYPE        reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    DOUBLE_TYPE     reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    BOOL_TYPE       reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    VAR             reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    VOID            reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    $end            reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    RBRACE          reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    TIMES           reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    DIVIDE          reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    MODULE          reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    SEMICOLON       reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    PLUS            reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    RPARENTHESIS    reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    COMMA           reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    RBRACKET        reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    EQUALS          reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    NOT_EQUALS      reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    GREATER_THAN    reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    LESS_THAN       reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    AND             reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    OR              reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    COLON           reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    ELSE            reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    DEFAULT         reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    CASE            reduce using rule 113 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)


state 313

    (119) default_case -> DEFAULT COLON . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RBRACE          reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statements                     shift and go to state 323
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 314

    (116) case -> CASE variable COLON . statements BREAK
    (117) case -> CASE variable COLON . statements SEMICOLON
    (118) case -> CASE variable COLON . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    SEMICOLON       reduce using rule 143 (empty -> .)
    DEFAULT         reduce using rule 143 (empty -> .)
    CASE            reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statements                     shift and go to state 324
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 315

    (58) list_elements -> list_elements COMMA variable .

    RBRACKET        reduce using rule 58 (list_elements -> list_elements COMMA variable .)
    COMMA           reduce using rule 58 (list_elements -> list_elements COMMA variable .)
    RBRACE          reduce using rule 58 (list_elements -> list_elements COMMA variable .)


state 316

    (34) declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR . map_literal
    (61) map_literal -> . LBRACE map_elements RBRACE

    LBRACE          shift and go to state 318

    map_literal                    shift and go to state 325

state 317

    (33) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .

    SEMICOLON       reduce using rule 33 (declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)
    ASSIGN_OPERATOR reduce using rule 33 (declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)
    LPARENTHESIS    reduce using rule 33 (declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)
    RPARENTHESIS    reduce using rule 33 (declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)
    COMMA           reduce using rule 33 (declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)


state 318

    (61) map_literal -> LBRACE . map_elements RBRACE
    (62) map_elements -> . map_elements COMMA map_pair
    (63) map_elements -> . map_pair
    (64) map_elements -> . empty
    (65) map_pair -> . variable COLON variable
    (66) map_pair -> . variable COLON booleanExpression
    (143) empty -> .
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    RBRACE          reduce using rule 143 (empty -> .)
    COMMA           reduce using rule 143 (empty -> .)
    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    map_elements                   shift and go to state 326
    map_pair                       shift and go to state 327
    empty                          shift and go to state 328
    variable                       shift and go to state 329
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 319

    (37) set_literal -> LBRACE list_elements RBRACE .

    SEMICOLON       reduce using rule 37 (set_literal -> LBRACE list_elements RBRACE .)
    ASSIGN_OPERATOR reduce using rule 37 (set_literal -> LBRACE list_elements RBRACE .)
    LPARENTHESIS    reduce using rule 37 (set_literal -> LBRACE list_elements RBRACE .)
    RPARENTHESIS    reduce using rule 37 (set_literal -> LBRACE list_elements RBRACE .)
    COMMA           reduce using rule 37 (set_literal -> LBRACE list_elements RBRACE .)


state 320

    (105) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RBRACE          reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    statements                     shift and go to state 330
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 321

    (106) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RBRACE          reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    assignation                    shift and go to state 7
    decrement                      shift and go to state 9
    statements                     shift and go to state 331
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    increment                      shift and go to state 8
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 322

    (108) for_in_block -> LBRACE for_in_scope . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RBRACE          reduce using rule 143 (empty -> .)
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statements                     shift and go to state 332
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 323

    (119) default_case -> DEFAULT COLON statements .
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! reduce/reduce conflict for RBRACE resolved using rule 119 (default_case -> DEFAULT COLON statements .)
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    RBRACE          reduce using rule 119 (default_case -> DEFAULT COLON statements .)
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]
  ! RBRACE          [ reduce using rule 143 (empty -> .) ]

    statement                      shift and go to state 59
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 324

    (116) case -> CASE variable COLON statements . BREAK
    (117) case -> CASE variable COLON statements . SEMICOLON
    (118) case -> CASE variable COLON statements .
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! reduce/reduce conflict for DEFAULT resolved using rule 118 (case -> CASE variable COLON statements .)
  ! reduce/reduce conflict for CASE resolved using rule 118 (case -> CASE variable COLON statements .)
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    BREAK           shift and go to state 333
    SEMICOLON       shift and go to state 334
    DEFAULT         reduce using rule 118 (case -> CASE variable COLON statements .)
    CASE            reduce using rule 118 (case -> CASE variable COLON statements .)
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 143 (empty -> .) ]
  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 143 (empty -> .) ]
  ! CASE            [ reduce using rule 143 (empty -> .) ]

    statement                      shift and go to state 59
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 325

    (34) declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .

    SEMICOLON       reduce using rule 34 (declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)
    ASSIGN_OPERATOR reduce using rule 34 (declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)
    LPARENTHESIS    reduce using rule 34 (declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)
    RPARENTHESIS    reduce using rule 34 (declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)
    COMMA           reduce using rule 34 (declaration -> declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)


state 326

    (61) map_literal -> LBRACE map_elements . RBRACE
    (62) map_elements -> map_elements . COMMA map_pair

    RBRACE          shift and go to state 335
    COMMA           shift and go to state 336


state 327

    (63) map_elements -> map_pair .

    RBRACE          reduce using rule 63 (map_elements -> map_pair .)
    COMMA           reduce using rule 63 (map_elements -> map_pair .)


state 328

    (64) map_elements -> empty .

    RBRACE          reduce using rule 64 (map_elements -> empty .)
    COMMA           reduce using rule 64 (map_elements -> empty .)


state 329

    (65) map_pair -> variable . COLON variable
    (66) map_pair -> variable . COLON booleanExpression

    COLON           shift and go to state 337

  ! RBRACE          [ reduce using rule 138 (empty -> .) ]
  ! LBRACE          [ reduce using rule 138 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 138 (empty -> .) ]
  ! BREAK           [ reduce using rule 138 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 138 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 138 (empty -> .) ]
  ! ID              [ reduce using rule 138 (empty -> .) ]
  ! IMPORT          [ reduce using rule 138 (empty -> .) ]
  ! IF              [ reduce using rule 138 (empty -> .) ]
  ! WHILE           [ reduce using rule 138 (empty -> .) ]
  ! FOR             [ reduce using rule 138 (empty -> .) ]
  ! PRINT           [ reduce using rule 138 (empty -> .) ]
  ! CLASS           [ reduce using rule 138 (empty -> .) ]
  ! ENUM            [ reduce using rule 138 (empty -> .) ]
  ! TRY             [ reduce using rule 138 (empty -> .) ]
  ! SWITCH          [ reduce using rule 138 (empty -> .) ]
  ! RETURN          [ reduce using rule 138 (empty -> .) ]
  ! CONST           [ reduce using rule 138 (empty -> .) ]
  ! FINAL           [ reduce using rule 138 (empty -> .) ]
  ! LATE            [ reduce using rule 138 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 138 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 138 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 138 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 138 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 138 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 138 (empty -> .) ]
  ! VAR             [ reduce using rule 138 (empty -> .) ]
  ! VOID            [ reduce using rule 138 (empty -> .) ]
  ! MINUS           [ reduce using rule 138 (empty -> .) ]
  ! INT             [ reduce using rule 138 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 138 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 138 (empty -> .) ]

state 330

    (105) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    RBRACE          shift and go to state 338
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! RBRACE          [ reduce using rule 143 (empty -> .) ]
  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    statement                      shift and go to state 59
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 331

    (106) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    RBRACE          shift and go to state 339
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! RBRACE          [ reduce using rule 143 (empty -> .) ]
  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    assignation                    shift and go to state 7
    decrement                      shift and go to state 9
    statement                      shift and go to state 59
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    increment                      shift and go to state 8
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 332

    (108) for_in_block -> LBRACE for_in_scope statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (22) statement -> . return SEMICOLON
    (23) statement -> . CONTINUE SEMICOLON
    (24) statement -> . BREAK SEMICOLON
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (38) assignation -> . declaration ASSIGN_OPERATOR variable
    (39) assignation -> . ID ASSIGN_OPERATOR variable
    (40) assignation -> . ID PLUS_EQUALS expression
    (41) assignation -> . ID MINUS_EQUALS expression
    (42) assignation -> . ID TIMES_EQUALS expression
    (43) assignation -> . ID DIVIDE_EQUALS expression
    (110) increment -> . ID INCREMENT
    (111) decrement -> . ID DECREMENT
    (142) import -> . IMPORT STRING SEMICOLON
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (102) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (103) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (104) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (105) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (106) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (107) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS for_in_block
    (129) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (130) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (131) class_def -> . CLASS ID LBRACE class_members RBRACE
    (136) enum -> . ENUM ID LBRACE enum_values RBRACE
    (112) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (113) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (143) empty -> .
    (140) return -> . RETURN variable
    (141) return -> . RETURN
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for LATE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
    RBRACE          shift and go to state 340
    LBRACE          shift and go to state 4
    CONTINUE        shift and go to state 23
    BREAK           shift and go to state 24
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    ID              shift and go to state 31
    IMPORT          shift and go to state 35
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    PRINT           shift and go to state 40
    CLASS           shift and go to state 41
    ENUM            shift and go to state 42
    TRY             shift and go to state 43
    SWITCH          shift and go to state 44
    RETURN          shift and go to state 45
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT             shift and go to state 50
    DOUBLE          shift and go to state 51
    LPARENTHESIS    shift and go to state 36
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

  ! RBRACE          [ reduce using rule 143 (empty -> .) ]
  ! LBRACE          [ reduce using rule 143 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 143 (empty -> .) ]
  ! BREAK           [ reduce using rule 143 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! ID              [ reduce using rule 143 (empty -> .) ]
  ! IMPORT          [ reduce using rule 143 (empty -> .) ]
  ! IF              [ reduce using rule 143 (empty -> .) ]
  ! WHILE           [ reduce using rule 143 (empty -> .) ]
  ! FOR             [ reduce using rule 143 (empty -> .) ]
  ! PRINT           [ reduce using rule 143 (empty -> .) ]
  ! CLASS           [ reduce using rule 143 (empty -> .) ]
  ! ENUM            [ reduce using rule 143 (empty -> .) ]
  ! TRY             [ reduce using rule 143 (empty -> .) ]
  ! SWITCH          [ reduce using rule 143 (empty -> .) ]
  ! RETURN          [ reduce using rule 143 (empty -> .) ]
  ! CONST           [ reduce using rule 143 (empty -> .) ]
  ! FINAL           [ reduce using rule 143 (empty -> .) ]
  ! LATE            [ reduce using rule 143 (empty -> .) ]
  ! MINUS           [ reduce using rule 143 (empty -> .) ]
  ! INT             [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 143 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 143 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 143 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 143 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 143 (empty -> .) ]
  ! VAR             [ reduce using rule 143 (empty -> .) ]
  ! VOID            [ reduce using rule 143 (empty -> .) ]

    statement                      shift and go to state 59
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    return                         shift and go to state 22
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 333

    (116) case -> CASE variable COLON statements BREAK .
    (24) statement -> BREAK . SEMICOLON

    DEFAULT         reduce using rule 116 (case -> CASE variable COLON statements BREAK .)
    CASE            reduce using rule 116 (case -> CASE variable COLON statements BREAK .)
    SEMICOLON       shift and go to state 72


state 334

    (117) case -> CASE variable COLON statements SEMICOLON .

    DEFAULT         reduce using rule 117 (case -> CASE variable COLON statements SEMICOLON .)
    CASE            reduce using rule 117 (case -> CASE variable COLON statements SEMICOLON .)


state 335

    (61) map_literal -> LBRACE map_elements RBRACE .

    SEMICOLON       reduce using rule 61 (map_literal -> LBRACE map_elements RBRACE .)
    ASSIGN_OPERATOR reduce using rule 61 (map_literal -> LBRACE map_elements RBRACE .)
    LPARENTHESIS    reduce using rule 61 (map_literal -> LBRACE map_elements RBRACE .)
    RPARENTHESIS    reduce using rule 61 (map_literal -> LBRACE map_elements RBRACE .)
    COMMA           reduce using rule 61 (map_literal -> LBRACE map_elements RBRACE .)


state 336

    (62) map_elements -> map_elements COMMA . map_pair
    (65) map_pair -> . variable COLON variable
    (66) map_pair -> . variable COLON booleanExpression
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 118
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    map_pair                       shift and go to state 341
    variable                       shift and go to state 329
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration                    shift and go to state 116
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 337

    (65) map_pair -> variable COLON . variable
    (66) map_pair -> variable COLON . booleanExpression
    (67) variable -> . INT
    (68) variable -> . DOUBLE
    (69) variable -> . STRING
    (70) variable -> . BOOL
    (71) variable -> . NULL
    (72) variable -> . ID
    (73) variable -> . function
    (74) variable -> . lambda
    (75) variable -> . expression
    (92) booleanExpression -> . variable EQUALS variable
    (93) booleanExpression -> . variable NOT_EQUALS variable
    (94) booleanExpression -> . variable GREATER_THAN variable
    (95) booleanExpression -> . variable LESS_THAN variable
    (96) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (97) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (98) booleanExpression -> . booleanExpression AND booleanExpression
    (99) booleanExpression -> . booleanExpression OR booleanExpression
    (100) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (101) booleanExpression -> . variable
    (120) function -> . declaration LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (121) function -> . ID LPARENTHESIS parameters RPARENTHESIS
    (122) function -> . declaration LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (128) lambda -> . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (25) declaration -> . declaration_with_modifier
    (26) declaration -> . declaration_without_modifier
    (30) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (31) declaration -> . declaration_modifier LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (32) declaration -> . declaration ASSIGN_OPERATOR LESS_THAN varType GREATER_THAN list_literal
    (33) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (34) declaration -> . declaration_modifier MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (35) declaration -> . SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (36) declaration -> . declaration_modifier SET_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR set_literal
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . term MODULE factor
    (82) term -> . factor
    (27) declaration_with_modifier -> . declaration_modifier varType ID
    (28) declaration_with_modifier -> . declaration_modifier ID
    (29) declaration_without_modifier -> . varType ID
    (44) declaration_modifier -> . CONST
    (45) declaration_modifier -> . FINAL
    (46) declaration_modifier -> . LATE
    (83) factor -> . MINUS factor
    (84) factor -> . INT
    (85) factor -> . DOUBLE
    (86) factor -> . ID
    (87) factor -> . LPARENTHESIS expression RPARENTHESIS
    (88) factor -> . ID LBRACKET expression RBRACKET
    (89) factor -> . ID DOT function statement
    (90) factor -> . ID DOT function
    (91) factor -> . ID DOT ID
    (47) varType -> . INT_TYPE
    (48) varType -> . STRING_TYPE
    (49) varType -> . NUM_TYPE
    (50) varType -> . DOUBLE_TYPE
    (51) varType -> . BOOL_TYPE
    (52) varType -> . LIST_TYPE
    (53) varType -> . MAP_TYPE
    (54) varType -> . SET_TYPE
    (55) varType -> . VAR
    (56) varType -> . VOID

    INT             shift and go to state 108
    DOUBLE          shift and go to state 109
    STRING          shift and go to state 110
    BOOL            shift and go to state 111
    NULL            shift and go to state 112
    ID              shift and go to state 113
    LPARENTHESIS    shift and go to state 154
    LIST_TYPE       shift and go to state 29
    MAP_TYPE        shift and go to state 33
    SET_TYPE        shift and go to state 34
    CONST           shift and go to state 47
    FINAL           shift and go to state 48
    LATE            shift and go to state 49
    MINUS           shift and go to state 26
    INT_TYPE        shift and go to state 52
    STRING_TYPE     shift and go to state 53
    NUM_TYPE        shift and go to state 54
    DOUBLE_TYPE     shift and go to state 55
    BOOL_TYPE       shift and go to state 56
    VAR             shift and go to state 57
    VOID            shift and go to state 58

    variable                       shift and go to state 342
    booleanExpression              shift and go to state 343
    function                       shift and go to state 114
    lambda                         shift and go to state 115
    expression                     shift and go to state 116
    declaration                    shift and go to state 117
    term                           shift and go to state 25
    declaration_with_modifier      shift and go to state 27
    declaration_without_modifier   shift and go to state 28
    varType                        shift and go to state 30
    declaration_modifier           shift and go to state 32
    factor                         shift and go to state 46

state 338

    (105) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    RETURN          reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    LATE            reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    MINUS           reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    TIMES           reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    DIVIDE          reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    MODULE          reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    PLUS            reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    RPARENTHESIS    reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    COMMA           reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    RBRACKET        reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    EQUALS          reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    NOT_EQUALS      reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN    reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN       reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    AND             reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    OR              reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    COLON           reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    CASE            reduce using rule 105 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)


state 339

    (106) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    CONTINUE        reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    RETURN          reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    LATE            reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    MINUS           reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    TIMES           reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    DIVIDE          reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    MODULE          reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    SEMICOLON       reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    PLUS            reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    RPARENTHESIS    reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    COMMA           reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    RBRACKET        reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    EQUALS          reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    NOT_EQUALS      reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN    reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN       reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    AND             reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    OR              reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    COLON           reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    DEFAULT         reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    CASE            reduce using rule 106 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)


state 340

    (108) for_in_block -> LBRACE for_in_scope statements RBRACE .

    LBRACE          reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    CONTINUE        reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    BREAK           reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    LIST_TYPE       reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    MAP_TYPE        reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    SET_TYPE        reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    ID              reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    IMPORT          reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    IF              reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    WHILE           reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    FOR             reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    PRINT           reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    CLASS           reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    ENUM            reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    TRY             reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    SWITCH          reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    RETURN          reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    CONST           reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    FINAL           reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    LATE            reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    MINUS           reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    INT             reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    DOUBLE          reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    LPARENTHESIS    reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    INT_TYPE        reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    STRING_TYPE     reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    NUM_TYPE        reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    BOOL_TYPE       reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    VAR             reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    VOID            reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    $end            reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    RBRACE          reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    TIMES           reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    DIVIDE          reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    MODULE          reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    SEMICOLON       reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    PLUS            reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    RPARENTHESIS    reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    COMMA           reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    RBRACKET        reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    EQUALS          reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    NOT_EQUALS      reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    GREATER_THAN    reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    LESS_THAN       reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    AND             reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    OR              reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    COLON           reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    ELSE            reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    DEFAULT         reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)
    CASE            reduce using rule 108 (for_in_block -> LBRACE for_in_scope statements RBRACE .)


state 341

    (62) map_elements -> map_elements COMMA map_pair .

    RBRACE          reduce using rule 62 (map_elements -> map_elements COMMA map_pair .)
    COMMA           reduce using rule 62 (map_elements -> map_elements COMMA map_pair .)


state 342

    (65) map_pair -> variable COLON variable .
    (92) booleanExpression -> variable . EQUALS variable
    (93) booleanExpression -> variable . NOT_EQUALS variable
    (94) booleanExpression -> variable . GREATER_THAN variable
    (95) booleanExpression -> variable . LESS_THAN variable
    (96) booleanExpression -> variable . GREATER_THAN_OR_EQUALS variable
    (97) booleanExpression -> variable . LESS_THAN_OR_EQUALS variable
    (101) booleanExpression -> variable .

  ! reduce/reduce conflict for RBRACE resolved using rule 65 (map_pair -> variable COLON variable .)
  ! reduce/reduce conflict for COMMA resolved using rule 65 (map_pair -> variable COLON variable .)
    RBRACE          reduce using rule 65 (map_pair -> variable COLON variable .)
    COMMA           reduce using rule 65 (map_pair -> variable COLON variable .)
    EQUALS          shift and go to state 194
    NOT_EQUALS      shift and go to state 195
    GREATER_THAN    shift and go to state 196
    LESS_THAN       shift and go to state 197
    GREATER_THAN_OR_EQUALS shift and go to state 198
    LESS_THAN_OR_EQUALS shift and go to state 199
    AND             reduce using rule 101 (booleanExpression -> variable .)
    OR              reduce using rule 101 (booleanExpression -> variable .)

  ! RBRACE          [ reduce using rule 101 (booleanExpression -> variable .) ]
  ! COMMA           [ reduce using rule 101 (booleanExpression -> variable .) ]


state 343

    (66) map_pair -> variable COLON booleanExpression .
    (98) booleanExpression -> booleanExpression . AND booleanExpression
    (99) booleanExpression -> booleanExpression . OR booleanExpression

    RBRACE          reduce using rule 66 (map_pair -> variable COLON booleanExpression .)
    COMMA           reduce using rule 66 (map_pair -> variable COLON booleanExpression .)
    AND             shift and go to state 192
    OR              shift and go to state 193

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACE in state 0 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 0 resolved as shift
WARNING: shift/reduce conflict for LATE in state 0 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 2 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 2 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 2 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 2 resolved as shift
WARNING: shift/reduce conflict for TRY in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 2 resolved as shift
WARNING: shift/reduce conflict for CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 2 resolved as shift
WARNING: shift/reduce conflict for LATE in state 2 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for VOID in state 2 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 2 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 2 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 4 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 4 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 4 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 4 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 4 resolved as shift
WARNING: shift/reduce conflict for TRY in state 4 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 4 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 4 resolved as shift
WARNING: shift/reduce conflict for CONST in state 4 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 4 resolved as shift
WARNING: shift/reduce conflict for LATE in state 4 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for VAR in state 4 resolved as shift
WARNING: shift/reduce conflict for VOID in state 4 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for INT in state 4 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 4 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 4 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 60 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 60 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 60 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 60 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 60 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 60 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 60 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 60 resolved as shift
WARNING: shift/reduce conflict for IF in state 60 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 60 resolved as shift
WARNING: shift/reduce conflict for FOR in state 60 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 60 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 60 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 60 resolved as shift
WARNING: shift/reduce conflict for TRY in state 60 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 60 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 60 resolved as shift
WARNING: shift/reduce conflict for CONST in state 60 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 60 resolved as shift
WARNING: shift/reduce conflict for LATE in state 60 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 60 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 60 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 60 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 60 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 60 resolved as shift
WARNING: shift/reduce conflict for VAR in state 60 resolved as shift
WARNING: shift/reduce conflict for VOID in state 60 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 105 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 105 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 105 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 105 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 105 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 105 resolved as shift
WARNING: shift/reduce conflict for IF in state 105 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 105 resolved as shift
WARNING: shift/reduce conflict for FOR in state 105 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 105 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 105 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 105 resolved as shift
WARNING: shift/reduce conflict for TRY in state 105 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 105 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 105 resolved as shift
WARNING: shift/reduce conflict for CONST in state 105 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 105 resolved as shift
WARNING: shift/reduce conflict for LATE in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for INT in state 105 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 105 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 105 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 105 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 105 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 105 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 105 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 105 resolved as shift
WARNING: shift/reduce conflict for VAR in state 105 resolved as shift
WARNING: shift/reduce conflict for VOID in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 144 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 168 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 168 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 168 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 168 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 168 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 168 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 168 resolved as shift
WARNING: shift/reduce conflict for ID in state 168 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 168 resolved as shift
WARNING: shift/reduce conflict for IF in state 168 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 168 resolved as shift
WARNING: shift/reduce conflict for FOR in state 168 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 168 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 168 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 168 resolved as shift
WARNING: shift/reduce conflict for TRY in state 168 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 168 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 168 resolved as shift
WARNING: shift/reduce conflict for CONST in state 168 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 168 resolved as shift
WARNING: shift/reduce conflict for LATE in state 168 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 168 resolved as shift
WARNING: shift/reduce conflict for INT in state 168 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 168 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 168 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 168 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 168 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 168 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 168 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 168 resolved as shift
WARNING: shift/reduce conflict for VAR in state 168 resolved as shift
WARNING: shift/reduce conflict for VOID in state 168 resolved as shift
WARNING: shift/reduce conflict for RPARENTHESIS in state 173 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 191 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 191 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 191 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 191 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 191 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 191 resolved as shift
WARNING: shift/reduce conflict for ID in state 191 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 191 resolved as shift
WARNING: shift/reduce conflict for IF in state 191 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 191 resolved as shift
WARNING: shift/reduce conflict for FOR in state 191 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 191 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 191 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 191 resolved as shift
WARNING: shift/reduce conflict for TRY in state 191 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 191 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 191 resolved as shift
WARNING: shift/reduce conflict for CONST in state 191 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 191 resolved as shift
WARNING: shift/reduce conflict for LATE in state 191 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 191 resolved as shift
WARNING: shift/reduce conflict for INT in state 191 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 191 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 191 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 191 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 191 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 191 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 191 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 191 resolved as shift
WARNING: shift/reduce conflict for VAR in state 191 resolved as shift
WARNING: shift/reduce conflict for VOID in state 191 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 220 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 220 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 220 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for ID in state 220 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 220 resolved as shift
WARNING: shift/reduce conflict for IF in state 220 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 220 resolved as shift
WARNING: shift/reduce conflict for FOR in state 220 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 220 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 220 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 220 resolved as shift
WARNING: shift/reduce conflict for TRY in state 220 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 220 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 220 resolved as shift
WARNING: shift/reduce conflict for CONST in state 220 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 220 resolved as shift
WARNING: shift/reduce conflict for LATE in state 220 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 220 resolved as shift
WARNING: shift/reduce conflict for INT in state 220 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 220 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 220 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 220 resolved as shift
WARNING: shift/reduce conflict for VAR in state 220 resolved as shift
WARNING: shift/reduce conflict for VOID in state 220 resolved as shift
WARNING: shift/reduce conflict for AND in state 232 resolved as shift
WARNING: shift/reduce conflict for OR in state 232 resolved as shift
WARNING: shift/reduce conflict for AND in state 233 resolved as shift
WARNING: shift/reduce conflict for OR in state 233 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 240 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 240 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 240 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for ID in state 240 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 240 resolved as shift
WARNING: shift/reduce conflict for IF in state 240 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 240 resolved as shift
WARNING: shift/reduce conflict for FOR in state 240 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 240 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 240 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 240 resolved as shift
WARNING: shift/reduce conflict for TRY in state 240 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 240 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 240 resolved as shift
WARNING: shift/reduce conflict for CONST in state 240 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 240 resolved as shift
WARNING: shift/reduce conflict for LATE in state 240 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 240 resolved as shift
WARNING: shift/reduce conflict for INT in state 240 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 240 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 240 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for VAR in state 240 resolved as shift
WARNING: shift/reduce conflict for VOID in state 240 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 251 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 251 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 251 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 251 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 251 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 251 resolved as shift
WARNING: shift/reduce conflict for ID in state 251 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 251 resolved as shift
WARNING: shift/reduce conflict for IF in state 251 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 251 resolved as shift
WARNING: shift/reduce conflict for FOR in state 251 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 251 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 251 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 251 resolved as shift
WARNING: shift/reduce conflict for TRY in state 251 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 251 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 251 resolved as shift
WARNING: shift/reduce conflict for CONST in state 251 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 251 resolved as shift
WARNING: shift/reduce conflict for LATE in state 251 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 251 resolved as shift
WARNING: shift/reduce conflict for INT in state 251 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 251 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 251 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 251 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 251 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 251 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 251 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 251 resolved as shift
WARNING: shift/reduce conflict for VAR in state 251 resolved as shift
WARNING: shift/reduce conflict for VOID in state 251 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 254 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 254 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 254 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 254 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 254 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 254 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 254 resolved as shift
WARNING: shift/reduce conflict for ID in state 254 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 254 resolved as shift
WARNING: shift/reduce conflict for IF in state 254 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 254 resolved as shift
WARNING: shift/reduce conflict for FOR in state 254 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 254 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 254 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 254 resolved as shift
WARNING: shift/reduce conflict for TRY in state 254 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 254 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 254 resolved as shift
WARNING: shift/reduce conflict for CONST in state 254 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 254 resolved as shift
WARNING: shift/reduce conflict for LATE in state 254 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 254 resolved as shift
WARNING: shift/reduce conflict for INT in state 254 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 254 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 254 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 254 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 254 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 254 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 254 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 254 resolved as shift
WARNING: shift/reduce conflict for VAR in state 254 resolved as shift
WARNING: shift/reduce conflict for VOID in state 254 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 263 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 263 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 263 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for ID in state 263 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 263 resolved as shift
WARNING: shift/reduce conflict for IF in state 263 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 263 resolved as shift
WARNING: shift/reduce conflict for FOR in state 263 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 263 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 263 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 263 resolved as shift
WARNING: shift/reduce conflict for TRY in state 263 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 263 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 263 resolved as shift
WARNING: shift/reduce conflict for CONST in state 263 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 263 resolved as shift
WARNING: shift/reduce conflict for LATE in state 263 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 263 resolved as shift
WARNING: shift/reduce conflict for INT in state 263 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 263 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 263 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 263 resolved as shift
WARNING: shift/reduce conflict for VAR in state 263 resolved as shift
WARNING: shift/reduce conflict for VOID in state 263 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 264 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 264 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 264 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 264 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for ID in state 264 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 264 resolved as shift
WARNING: shift/reduce conflict for IF in state 264 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 264 resolved as shift
WARNING: shift/reduce conflict for FOR in state 264 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 264 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 264 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 264 resolved as shift
WARNING: shift/reduce conflict for TRY in state 264 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 264 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 264 resolved as shift
WARNING: shift/reduce conflict for CONST in state 264 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 264 resolved as shift
WARNING: shift/reduce conflict for LATE in state 264 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 264 resolved as shift
WARNING: shift/reduce conflict for INT in state 264 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 264 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 264 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 264 resolved as shift
WARNING: shift/reduce conflict for VAR in state 264 resolved as shift
WARNING: shift/reduce conflict for VOID in state 264 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 269 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 269 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 269 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 269 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 269 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 269 resolved as shift
WARNING: shift/reduce conflict for ID in state 269 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 269 resolved as shift
WARNING: shift/reduce conflict for IF in state 269 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 269 resolved as shift
WARNING: shift/reduce conflict for FOR in state 269 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 269 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 269 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 269 resolved as shift
WARNING: shift/reduce conflict for TRY in state 269 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 269 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 269 resolved as shift
WARNING: shift/reduce conflict for CONST in state 269 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 269 resolved as shift
WARNING: shift/reduce conflict for LATE in state 269 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 269 resolved as shift
WARNING: shift/reduce conflict for INT in state 269 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 269 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 269 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 269 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 269 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 269 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 269 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 269 resolved as shift
WARNING: shift/reduce conflict for VAR in state 269 resolved as shift
WARNING: shift/reduce conflict for VOID in state 269 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 273 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 273 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 273 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 273 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for ID in state 273 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 273 resolved as shift
WARNING: shift/reduce conflict for IF in state 273 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 273 resolved as shift
WARNING: shift/reduce conflict for FOR in state 273 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 273 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 273 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 273 resolved as shift
WARNING: shift/reduce conflict for TRY in state 273 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 273 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 273 resolved as shift
WARNING: shift/reduce conflict for CONST in state 273 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 273 resolved as shift
WARNING: shift/reduce conflict for LATE in state 273 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 273 resolved as shift
WARNING: shift/reduce conflict for INT in state 273 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 273 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 273 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 273 resolved as shift
WARNING: shift/reduce conflict for VAR in state 273 resolved as shift
WARNING: shift/reduce conflict for VOID in state 273 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 293 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 293 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 293 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 293 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 293 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 293 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 293 resolved as shift
WARNING: shift/reduce conflict for ID in state 293 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 293 resolved as shift
WARNING: shift/reduce conflict for IF in state 293 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 293 resolved as shift
WARNING: shift/reduce conflict for FOR in state 293 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 293 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 293 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 293 resolved as shift
WARNING: shift/reduce conflict for TRY in state 293 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 293 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 293 resolved as shift
WARNING: shift/reduce conflict for CONST in state 293 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 293 resolved as shift
WARNING: shift/reduce conflict for LATE in state 293 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 293 resolved as shift
WARNING: shift/reduce conflict for INT in state 293 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 293 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 293 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 293 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 293 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 293 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 293 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 293 resolved as shift
WARNING: shift/reduce conflict for VAR in state 293 resolved as shift
WARNING: shift/reduce conflict for VOID in state 293 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 313 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 313 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 313 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 313 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 313 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 313 resolved as shift
WARNING: shift/reduce conflict for ID in state 313 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 313 resolved as shift
WARNING: shift/reduce conflict for IF in state 313 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 313 resolved as shift
WARNING: shift/reduce conflict for FOR in state 313 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 313 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 313 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 313 resolved as shift
WARNING: shift/reduce conflict for TRY in state 313 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 313 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 313 resolved as shift
WARNING: shift/reduce conflict for CONST in state 313 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 313 resolved as shift
WARNING: shift/reduce conflict for LATE in state 313 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 313 resolved as shift
WARNING: shift/reduce conflict for INT in state 313 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 313 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 313 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 313 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 313 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 313 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 313 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 313 resolved as shift
WARNING: shift/reduce conflict for VAR in state 313 resolved as shift
WARNING: shift/reduce conflict for VOID in state 313 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 314 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 314 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 314 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 314 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 314 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 314 resolved as shift
WARNING: shift/reduce conflict for ID in state 314 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 314 resolved as shift
WARNING: shift/reduce conflict for IF in state 314 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 314 resolved as shift
WARNING: shift/reduce conflict for FOR in state 314 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 314 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 314 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 314 resolved as shift
WARNING: shift/reduce conflict for TRY in state 314 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 314 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 314 resolved as shift
WARNING: shift/reduce conflict for CONST in state 314 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 314 resolved as shift
WARNING: shift/reduce conflict for LATE in state 314 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 314 resolved as shift
WARNING: shift/reduce conflict for INT in state 314 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 314 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 314 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 314 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 314 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 314 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 314 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 314 resolved as shift
WARNING: shift/reduce conflict for VAR in state 314 resolved as shift
WARNING: shift/reduce conflict for VOID in state 314 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 320 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 320 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 320 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 320 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 320 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 320 resolved as shift
WARNING: shift/reduce conflict for ID in state 320 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 320 resolved as shift
WARNING: shift/reduce conflict for IF in state 320 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 320 resolved as shift
WARNING: shift/reduce conflict for FOR in state 320 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 320 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 320 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 320 resolved as shift
WARNING: shift/reduce conflict for TRY in state 320 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 320 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 320 resolved as shift
WARNING: shift/reduce conflict for CONST in state 320 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 320 resolved as shift
WARNING: shift/reduce conflict for LATE in state 320 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 320 resolved as shift
WARNING: shift/reduce conflict for INT in state 320 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 320 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 320 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 320 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 320 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 320 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 320 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 320 resolved as shift
WARNING: shift/reduce conflict for VAR in state 320 resolved as shift
WARNING: shift/reduce conflict for VOID in state 320 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 321 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 321 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 321 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 321 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 321 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 321 resolved as shift
WARNING: shift/reduce conflict for ID in state 321 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 321 resolved as shift
WARNING: shift/reduce conflict for IF in state 321 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 321 resolved as shift
WARNING: shift/reduce conflict for FOR in state 321 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 321 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 321 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 321 resolved as shift
WARNING: shift/reduce conflict for TRY in state 321 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 321 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 321 resolved as shift
WARNING: shift/reduce conflict for CONST in state 321 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 321 resolved as shift
WARNING: shift/reduce conflict for LATE in state 321 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 321 resolved as shift
WARNING: shift/reduce conflict for INT in state 321 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 321 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 321 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 321 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 321 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 321 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 321 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 321 resolved as shift
WARNING: shift/reduce conflict for VAR in state 321 resolved as shift
WARNING: shift/reduce conflict for VOID in state 321 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 322 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 322 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 322 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 322 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 322 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 322 resolved as shift
WARNING: shift/reduce conflict for ID in state 322 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 322 resolved as shift
WARNING: shift/reduce conflict for IF in state 322 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 322 resolved as shift
WARNING: shift/reduce conflict for FOR in state 322 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 322 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 322 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 322 resolved as shift
WARNING: shift/reduce conflict for TRY in state 322 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 322 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 322 resolved as shift
WARNING: shift/reduce conflict for CONST in state 322 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 322 resolved as shift
WARNING: shift/reduce conflict for LATE in state 322 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 322 resolved as shift
WARNING: shift/reduce conflict for INT in state 322 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 322 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 322 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 322 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 322 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 322 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 322 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 322 resolved as shift
WARNING: shift/reduce conflict for VAR in state 322 resolved as shift
WARNING: shift/reduce conflict for VOID in state 322 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 323 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 323 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 323 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 323 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 323 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 323 resolved as shift
WARNING: shift/reduce conflict for ID in state 323 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 323 resolved as shift
WARNING: shift/reduce conflict for IF in state 323 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 323 resolved as shift
WARNING: shift/reduce conflict for FOR in state 323 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 323 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 323 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 323 resolved as shift
WARNING: shift/reduce conflict for TRY in state 323 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 323 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 323 resolved as shift
WARNING: shift/reduce conflict for CONST in state 323 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 323 resolved as shift
WARNING: shift/reduce conflict for LATE in state 323 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 323 resolved as shift
WARNING: shift/reduce conflict for INT in state 323 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 323 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 323 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 323 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 323 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 323 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 323 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 323 resolved as shift
WARNING: shift/reduce conflict for VAR in state 323 resolved as shift
WARNING: shift/reduce conflict for VOID in state 323 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 324 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 324 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 324 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 324 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 324 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 324 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 324 resolved as shift
WARNING: shift/reduce conflict for ID in state 324 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 324 resolved as shift
WARNING: shift/reduce conflict for IF in state 324 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 324 resolved as shift
WARNING: shift/reduce conflict for FOR in state 324 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 324 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 324 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 324 resolved as shift
WARNING: shift/reduce conflict for TRY in state 324 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 324 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 324 resolved as shift
WARNING: shift/reduce conflict for CONST in state 324 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 324 resolved as shift
WARNING: shift/reduce conflict for LATE in state 324 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 324 resolved as shift
WARNING: shift/reduce conflict for INT in state 324 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 324 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 324 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 324 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 324 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 324 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 324 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 324 resolved as shift
WARNING: shift/reduce conflict for VAR in state 324 resolved as shift
WARNING: shift/reduce conflict for VOID in state 324 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 330 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 330 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 330 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 330 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 330 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 330 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 330 resolved as shift
WARNING: shift/reduce conflict for ID in state 330 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 330 resolved as shift
WARNING: shift/reduce conflict for IF in state 330 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 330 resolved as shift
WARNING: shift/reduce conflict for FOR in state 330 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 330 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 330 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 330 resolved as shift
WARNING: shift/reduce conflict for TRY in state 330 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 330 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 330 resolved as shift
WARNING: shift/reduce conflict for CONST in state 330 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 330 resolved as shift
WARNING: shift/reduce conflict for LATE in state 330 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 330 resolved as shift
WARNING: shift/reduce conflict for INT in state 330 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 330 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 330 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 330 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 330 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 330 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 330 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 330 resolved as shift
WARNING: shift/reduce conflict for VAR in state 330 resolved as shift
WARNING: shift/reduce conflict for VOID in state 330 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 331 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 331 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 331 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 331 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 331 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 331 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 331 resolved as shift
WARNING: shift/reduce conflict for ID in state 331 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 331 resolved as shift
WARNING: shift/reduce conflict for IF in state 331 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 331 resolved as shift
WARNING: shift/reduce conflict for FOR in state 331 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 331 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 331 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 331 resolved as shift
WARNING: shift/reduce conflict for TRY in state 331 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 331 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 331 resolved as shift
WARNING: shift/reduce conflict for CONST in state 331 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 331 resolved as shift
WARNING: shift/reduce conflict for LATE in state 331 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 331 resolved as shift
WARNING: shift/reduce conflict for INT in state 331 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 331 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 331 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 331 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 331 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 331 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 331 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 331 resolved as shift
WARNING: shift/reduce conflict for VAR in state 331 resolved as shift
WARNING: shift/reduce conflict for VOID in state 331 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 332 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 332 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 332 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 332 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 332 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 332 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 332 resolved as shift
WARNING: shift/reduce conflict for ID in state 332 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 332 resolved as shift
WARNING: shift/reduce conflict for IF in state 332 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 332 resolved as shift
WARNING: shift/reduce conflict for FOR in state 332 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 332 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 332 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 332 resolved as shift
WARNING: shift/reduce conflict for TRY in state 332 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 332 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 332 resolved as shift
WARNING: shift/reduce conflict for CONST in state 332 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 332 resolved as shift
WARNING: shift/reduce conflict for LATE in state 332 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 332 resolved as shift
WARNING: shift/reduce conflict for INT in state 332 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 332 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 332 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 332 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 332 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 332 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 332 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 332 resolved as shift
WARNING: shift/reduce conflict for VAR in state 332 resolved as shift
WARNING: shift/reduce conflict for VOID in state 332 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> statements)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 108 resolved using rule (variable -> INT)
WARNING: rejected rule (factor -> INT) in state 108
WARNING: reduce/reduce conflict in state 109 resolved using rule (variable -> DOUBLE)
WARNING: rejected rule (factor -> DOUBLE) in state 109
WARNING: reduce/reduce conflict in state 113 resolved using rule (variable -> ID)
WARNING: rejected rule (factor -> ID) in state 113
WARNING: reduce/reduce conflict in state 144 resolved using rule (factor -> ID DOT function)
WARNING: rejected rule (empty -> <empty>) in state 144
WARNING: reduce/reduce conflict in state 174 resolved using rule (variable -> ID)
WARNING: rejected rule (factor -> ID) in state 174
WARNING: reduce/reduce conflict in state 189 resolved using rule (booleanExpression -> variable)
WARNING: rejected rule (parameter -> variable) in state 189
WARNING: reduce/reduce conflict in state 215 resolved using rule (variable -> INT)
WARNING: rejected rule (factor -> INT) in state 215
WARNING: reduce/reduce conflict in state 216 resolved using rule (variable -> DOUBLE)
WARNING: rejected rule (factor -> DOUBLE) in state 216
WARNING: reduce/reduce conflict in state 217 resolved using rule (variable -> ID)
WARNING: rejected rule (factor -> ID) in state 217
WARNING: reduce/reduce conflict in state 323 resolved using rule (default_case -> DEFAULT COLON statements)
WARNING: rejected rule (empty -> <empty>) in state 323
WARNING: reduce/reduce conflict in state 324 resolved using rule (case -> CASE variable COLON statements)
WARNING: rejected rule (empty -> <empty>) in state 324
WARNING: reduce/reduce conflict in state 342 resolved using rule (map_pair -> variable COLON variable)
WARNING: rejected rule (booleanExpression -> variable) in state 342

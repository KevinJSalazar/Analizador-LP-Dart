Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    BREAK
    COLON
    COMMENT_BLOCK
    COMMENT_LINE
    CONTINUE
    DEFAULT
    DIVIDE
    DOT
    ENUM
    EXPORT
    FINALLY
    IMPORT
    LATE
    LBRACKET
    MINUS
    NOT
    OR
    RBRACKET
    RETURN
    STATIC
    TIMES
    TYPEDEF

Grammar

Rule 0     S' -> statement
Rule 1     statement -> declaration
Rule 2     statement -> assignation
Rule 3     statement -> function
Rule 4     statement -> if
Rule 5     statement -> while
Rule 6     statement -> for
Rule 7     assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON
Rule 8     declaration -> varType ID SEMICOLON
Rule 9     variable -> INT
Rule 10    variable -> DOUBLE
Rule 11    variable -> STRING
Rule 12    variable -> BOOL
Rule 13    variable -> NULL
Rule 14    variable -> ID
Rule 15    varType -> INT_TYPE
Rule 16    varType -> STRING_TYPE
Rule 17    varType -> NUM_TYPE
Rule 18    varType -> DOUBLE_TYPE
Rule 19    varType -> BOOL_TYPE
Rule 20    varType -> LIST_TYPE
Rule 21    varType -> MAP_TYPE
Rule 22    varType -> VAR
Rule 23    varType -> CONST
Rule 24    varType -> FINAL
Rule 25    varType -> VOID
Rule 26    booleanExpression -> variable EQUALS variable
Rule 27    booleanExpression -> variable NOT_EQUALS variable
Rule 28    booleanExpression -> variable GREATER_THAN variable
Rule 29    booleanExpression -> variable LESS_THAN variable
Rule 30    booleanExpression -> variable GREATER_THAN_OR_EQUALS variable
Rule 31    booleanExpression -> variable LESS_THAN_OR_EQUALS variable
Rule 32    if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
Rule 33    if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE
Rule 34    if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
Rule 35    while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
Rule 36    while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
Rule 37    for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE
Rule 38    for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE
Rule 39    increment -> ID PLUS PLUS
Rule 40    function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
Rule 41    parameter -> varType ID
Rule 42    parametersList -> parameter
Rule 43    parametersList -> parameter COMMA parametersList
Rule 44    parameters -> parametersList
Rule 45    parameters -> empty
Rule 46    empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
ASSIGN_OPERATOR      : 7
BOOL                 : 12
BOOL_TYPE            : 19
BREAK                : 
COLON                : 
COMMA                : 43
COMMENT_BLOCK        : 
COMMENT_LINE         : 
CONST                : 23
CONTINUE             : 
DEFAULT              : 
DIVIDE               : 
DOT                  : 
DOUBLE               : 10
DOUBLE_TYPE          : 18
ELSE                 : 33
ENUM                 : 
EQUALS               : 26
EXPORT               : 
FINAL                : 24
FINALLY              : 
FOR                  : 37 38
GREATER_THAN         : 28
GREATER_THAN_OR_EQUALS : 30
ID                   : 7 8 14 39 40 41
IF                   : 32 33 34
IMPORT               : 
INT                  : 9
INT_TYPE             : 15
LATE                 : 
LBRACE               : 32 33 33 34 35 36 37 38 40
LBRACKET             : 
LESS_THAN            : 29
LESS_THAN_OR_EQUALS  : 31
LIST_TYPE            : 20
LPARENTHESIS         : 32 33 34 35 36 37 38 40
MAP_TYPE             : 21
MINUS                : 
NOT                  : 
NOT_EQUALS           : 27
NULL                 : 13
NUM_TYPE             : 17
OR                   : 
PLUS                 : 39 39
RBRACE               : 32 33 33 34 35 36 37 38 40
RBRACKET             : 
RETURN               : 
RPARENTHESIS         : 32 33 34 35 36 37 38 40
SEMICOLON            : 7 8 37 38
STATIC               : 
STRING               : 11
STRING_TYPE          : 16
TIMES                : 
TYPEDEF              : 
VAR                  : 22
VOID                 : 25
WHILE                : 35 36
error                : 

Nonterminals, with rules where they appear

assignation          : 2 37 38
booleanExpression    : 32 33 34 35 36 37 38
declaration          : 1
empty                : 45
for                  : 6
function             : 3
if                   : 4
increment            : 37 38
parameter            : 42 43
parameters           : 40
parametersList       : 43 44
statement            : 32 33 33 35 37 40 0
varType              : 7 8 40 41
variable             : 7 26 26 27 27 28 28 29 29 30 30 31 31
while                : 5

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . declaration
    (2) statement -> . assignation
    (3) statement -> . function
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (8) declaration -> . varType ID SEMICOLON
    (7) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (40) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (32) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (33) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (34) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (35) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (36) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (37) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE
    (38) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE
    (15) varType -> . INT_TYPE
    (16) varType -> . STRING_TYPE
    (17) varType -> . NUM_TYPE
    (18) varType -> . DOUBLE_TYPE
    (19) varType -> . BOOL_TYPE
    (20) varType -> . LIST_TYPE
    (21) varType -> . MAP_TYPE
    (22) varType -> . VAR
    (23) varType -> . CONST
    (24) varType -> . FINAL
    (25) varType -> . VOID

    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    INT_TYPE        shift and go to state 12
    STRING_TYPE     shift and go to state 13
    NUM_TYPE        shift and go to state 14
    DOUBLE_TYPE     shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    LIST_TYPE       shift and go to state 17
    MAP_TYPE        shift and go to state 18
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    FINAL           shift and go to state 21
    VOID            shift and go to state 22

    statement                      shift and go to state 1
    declaration                    shift and go to state 2
    assignation                    shift and go to state 3
    function                       shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    varType                        shift and go to state 8

state 1

    (0) S' -> statement .



state 2

    (1) statement -> declaration .

    $end            reduce using rule 1 (statement -> declaration .)
    RBRACE          reduce using rule 1 (statement -> declaration .)


state 3

    (2) statement -> assignation .

    $end            reduce using rule 2 (statement -> assignation .)
    RBRACE          reduce using rule 2 (statement -> assignation .)


state 4

    (3) statement -> function .

    $end            reduce using rule 3 (statement -> function .)
    RBRACE          reduce using rule 3 (statement -> function .)


state 5

    (4) statement -> if .

    $end            reduce using rule 4 (statement -> if .)
    RBRACE          reduce using rule 4 (statement -> if .)


state 6

    (5) statement -> while .

    $end            reduce using rule 5 (statement -> while .)
    RBRACE          reduce using rule 5 (statement -> while .)


state 7

    (6) statement -> for .

    $end            reduce using rule 6 (statement -> for .)
    RBRACE          reduce using rule 6 (statement -> for .)


state 8

    (8) declaration -> varType . ID SEMICOLON
    (7) assignation -> varType . ID ASSIGN_OPERATOR variable SEMICOLON
    (40) function -> varType . ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE

    ID              shift and go to state 23


state 9

    (32) if -> IF . LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (33) if -> IF . LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (34) if -> IF . LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE

    LPARENTHESIS    shift and go to state 24


state 10

    (35) while -> WHILE . LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (36) while -> WHILE . LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE

    LPARENTHESIS    shift and go to state 25


state 11

    (37) for -> FOR . LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE
    (38) for -> FOR . LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE

    LPARENTHESIS    shift and go to state 26


state 12

    (15) varType -> INT_TYPE .

    ID              reduce using rule 15 (varType -> INT_TYPE .)


state 13

    (16) varType -> STRING_TYPE .

    ID              reduce using rule 16 (varType -> STRING_TYPE .)


state 14

    (17) varType -> NUM_TYPE .

    ID              reduce using rule 17 (varType -> NUM_TYPE .)


state 15

    (18) varType -> DOUBLE_TYPE .

    ID              reduce using rule 18 (varType -> DOUBLE_TYPE .)


state 16

    (19) varType -> BOOL_TYPE .

    ID              reduce using rule 19 (varType -> BOOL_TYPE .)


state 17

    (20) varType -> LIST_TYPE .

    ID              reduce using rule 20 (varType -> LIST_TYPE .)


state 18

    (21) varType -> MAP_TYPE .

    ID              reduce using rule 21 (varType -> MAP_TYPE .)


state 19

    (22) varType -> VAR .

    ID              reduce using rule 22 (varType -> VAR .)


state 20

    (23) varType -> CONST .

    ID              reduce using rule 23 (varType -> CONST .)


state 21

    (24) varType -> FINAL .

    ID              reduce using rule 24 (varType -> FINAL .)


state 22

    (25) varType -> VOID .

    ID              reduce using rule 25 (varType -> VOID .)


state 23

    (8) declaration -> varType ID . SEMICOLON
    (7) assignation -> varType ID . ASSIGN_OPERATOR variable SEMICOLON
    (40) function -> varType ID . LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE

    SEMICOLON       shift and go to state 27
    ASSIGN_OPERATOR shift and go to state 28
    LPARENTHESIS    shift and go to state 29


state 24

    (32) if -> IF LPARENTHESIS . booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (33) if -> IF LPARENTHESIS . booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (34) if -> IF LPARENTHESIS . booleanExpression RPARENTHESIS LBRACE RBRACE
    (26) booleanExpression -> . variable EQUALS variable
    (27) booleanExpression -> . variable NOT_EQUALS variable
    (28) booleanExpression -> . variable GREATER_THAN variable
    (29) booleanExpression -> . variable LESS_THAN variable
    (30) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (31) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (9) variable -> . INT
    (10) variable -> . DOUBLE
    (11) variable -> . STRING
    (12) variable -> . BOOL
    (13) variable -> . NULL
    (14) variable -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOL            shift and go to state 35
    NULL            shift and go to state 36
    ID              shift and go to state 37

    booleanExpression              shift and go to state 30
    variable                       shift and go to state 31

state 25

    (35) while -> WHILE LPARENTHESIS . booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (36) while -> WHILE LPARENTHESIS . booleanExpression RPARENTHESIS LBRACE RBRACE
    (26) booleanExpression -> . variable EQUALS variable
    (27) booleanExpression -> . variable NOT_EQUALS variable
    (28) booleanExpression -> . variable GREATER_THAN variable
    (29) booleanExpression -> . variable LESS_THAN variable
    (30) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (31) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (9) variable -> . INT
    (10) variable -> . DOUBLE
    (11) variable -> . STRING
    (12) variable -> . BOOL
    (13) variable -> . NULL
    (14) variable -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOL            shift and go to state 35
    NULL            shift and go to state 36
    ID              shift and go to state 37

    booleanExpression              shift and go to state 38
    variable                       shift and go to state 31

state 26

    (37) for -> FOR LPARENTHESIS . assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE
    (38) for -> FOR LPARENTHESIS . assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE
    (7) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (15) varType -> . INT_TYPE
    (16) varType -> . STRING_TYPE
    (17) varType -> . NUM_TYPE
    (18) varType -> . DOUBLE_TYPE
    (19) varType -> . BOOL_TYPE
    (20) varType -> . LIST_TYPE
    (21) varType -> . MAP_TYPE
    (22) varType -> . VAR
    (23) varType -> . CONST
    (24) varType -> . FINAL
    (25) varType -> . VOID

    INT_TYPE        shift and go to state 12
    STRING_TYPE     shift and go to state 13
    NUM_TYPE        shift and go to state 14
    DOUBLE_TYPE     shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    LIST_TYPE       shift and go to state 17
    MAP_TYPE        shift and go to state 18
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    FINAL           shift and go to state 21
    VOID            shift and go to state 22

    assignation                    shift and go to state 39
    varType                        shift and go to state 40

state 27

    (8) declaration -> varType ID SEMICOLON .

    $end            reduce using rule 8 (declaration -> varType ID SEMICOLON .)
    RBRACE          reduce using rule 8 (declaration -> varType ID SEMICOLON .)


state 28

    (7) assignation -> varType ID ASSIGN_OPERATOR . variable SEMICOLON
    (9) variable -> . INT
    (10) variable -> . DOUBLE
    (11) variable -> . STRING
    (12) variable -> . BOOL
    (13) variable -> . NULL
    (14) variable -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOL            shift and go to state 35
    NULL            shift and go to state 36
    ID              shift and go to state 37

    variable                       shift and go to state 41

state 29

    (40) function -> varType ID LPARENTHESIS . parameters RPARENTHESIS LBRACE statement RBRACE
    (44) parameters -> . parametersList
    (45) parameters -> . empty
    (42) parametersList -> . parameter
    (43) parametersList -> . parameter COMMA parametersList
    (46) empty -> .
    (41) parameter -> . varType ID
    (15) varType -> . INT_TYPE
    (16) varType -> . STRING_TYPE
    (17) varType -> . NUM_TYPE
    (18) varType -> . DOUBLE_TYPE
    (19) varType -> . BOOL_TYPE
    (20) varType -> . LIST_TYPE
    (21) varType -> . MAP_TYPE
    (22) varType -> . VAR
    (23) varType -> . CONST
    (24) varType -> . FINAL
    (25) varType -> . VOID

    RPARENTHESIS    reduce using rule 46 (empty -> .)
    INT_TYPE        shift and go to state 12
    STRING_TYPE     shift and go to state 13
    NUM_TYPE        shift and go to state 14
    DOUBLE_TYPE     shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    LIST_TYPE       shift and go to state 17
    MAP_TYPE        shift and go to state 18
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    FINAL           shift and go to state 21
    VOID            shift and go to state 22

    varType                        shift and go to state 42
    parameters                     shift and go to state 43
    parametersList                 shift and go to state 44
    empty                          shift and go to state 45
    parameter                      shift and go to state 46

state 30

    (32) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS LBRACE statement RBRACE
    (33) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (34) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS LBRACE RBRACE

    RPARENTHESIS    shift and go to state 47


state 31

    (26) booleanExpression -> variable . EQUALS variable
    (27) booleanExpression -> variable . NOT_EQUALS variable
    (28) booleanExpression -> variable . GREATER_THAN variable
    (29) booleanExpression -> variable . LESS_THAN variable
    (30) booleanExpression -> variable . GREATER_THAN_OR_EQUALS variable
    (31) booleanExpression -> variable . LESS_THAN_OR_EQUALS variable

    EQUALS          shift and go to state 48
    NOT_EQUALS      shift and go to state 49
    GREATER_THAN    shift and go to state 50
    LESS_THAN       shift and go to state 51
    GREATER_THAN_OR_EQUALS shift and go to state 52
    LESS_THAN_OR_EQUALS shift and go to state 53


state 32

    (9) variable -> INT .

    EQUALS          reduce using rule 9 (variable -> INT .)
    NOT_EQUALS      reduce using rule 9 (variable -> INT .)
    GREATER_THAN    reduce using rule 9 (variable -> INT .)
    LESS_THAN       reduce using rule 9 (variable -> INT .)
    GREATER_THAN_OR_EQUALS reduce using rule 9 (variable -> INT .)
    LESS_THAN_OR_EQUALS reduce using rule 9 (variable -> INT .)
    SEMICOLON       reduce using rule 9 (variable -> INT .)
    RPARENTHESIS    reduce using rule 9 (variable -> INT .)


state 33

    (10) variable -> DOUBLE .

    EQUALS          reduce using rule 10 (variable -> DOUBLE .)
    NOT_EQUALS      reduce using rule 10 (variable -> DOUBLE .)
    GREATER_THAN    reduce using rule 10 (variable -> DOUBLE .)
    LESS_THAN       reduce using rule 10 (variable -> DOUBLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 10 (variable -> DOUBLE .)
    LESS_THAN_OR_EQUALS reduce using rule 10 (variable -> DOUBLE .)
    SEMICOLON       reduce using rule 10 (variable -> DOUBLE .)
    RPARENTHESIS    reduce using rule 10 (variable -> DOUBLE .)


state 34

    (11) variable -> STRING .

    EQUALS          reduce using rule 11 (variable -> STRING .)
    NOT_EQUALS      reduce using rule 11 (variable -> STRING .)
    GREATER_THAN    reduce using rule 11 (variable -> STRING .)
    LESS_THAN       reduce using rule 11 (variable -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 11 (variable -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 11 (variable -> STRING .)
    SEMICOLON       reduce using rule 11 (variable -> STRING .)
    RPARENTHESIS    reduce using rule 11 (variable -> STRING .)


state 35

    (12) variable -> BOOL .

    EQUALS          reduce using rule 12 (variable -> BOOL .)
    NOT_EQUALS      reduce using rule 12 (variable -> BOOL .)
    GREATER_THAN    reduce using rule 12 (variable -> BOOL .)
    LESS_THAN       reduce using rule 12 (variable -> BOOL .)
    GREATER_THAN_OR_EQUALS reduce using rule 12 (variable -> BOOL .)
    LESS_THAN_OR_EQUALS reduce using rule 12 (variable -> BOOL .)
    SEMICOLON       reduce using rule 12 (variable -> BOOL .)
    RPARENTHESIS    reduce using rule 12 (variable -> BOOL .)


state 36

    (13) variable -> NULL .

    EQUALS          reduce using rule 13 (variable -> NULL .)
    NOT_EQUALS      reduce using rule 13 (variable -> NULL .)
    GREATER_THAN    reduce using rule 13 (variable -> NULL .)
    LESS_THAN       reduce using rule 13 (variable -> NULL .)
    GREATER_THAN_OR_EQUALS reduce using rule 13 (variable -> NULL .)
    LESS_THAN_OR_EQUALS reduce using rule 13 (variable -> NULL .)
    SEMICOLON       reduce using rule 13 (variable -> NULL .)
    RPARENTHESIS    reduce using rule 13 (variable -> NULL .)


state 37

    (14) variable -> ID .

    EQUALS          reduce using rule 14 (variable -> ID .)
    NOT_EQUALS      reduce using rule 14 (variable -> ID .)
    GREATER_THAN    reduce using rule 14 (variable -> ID .)
    LESS_THAN       reduce using rule 14 (variable -> ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 14 (variable -> ID .)
    LESS_THAN_OR_EQUALS reduce using rule 14 (variable -> ID .)
    SEMICOLON       reduce using rule 14 (variable -> ID .)
    RPARENTHESIS    reduce using rule 14 (variable -> ID .)


state 38

    (35) while -> WHILE LPARENTHESIS booleanExpression . RPARENTHESIS LBRACE statement RBRACE
    (36) while -> WHILE LPARENTHESIS booleanExpression . RPARENTHESIS LBRACE RBRACE

    RPARENTHESIS    shift and go to state 54


state 39

    (37) for -> FOR LPARENTHESIS assignation . booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE
    (38) for -> FOR LPARENTHESIS assignation . booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE
    (26) booleanExpression -> . variable EQUALS variable
    (27) booleanExpression -> . variable NOT_EQUALS variable
    (28) booleanExpression -> . variable GREATER_THAN variable
    (29) booleanExpression -> . variable LESS_THAN variable
    (30) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (31) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (9) variable -> . INT
    (10) variable -> . DOUBLE
    (11) variable -> . STRING
    (12) variable -> . BOOL
    (13) variable -> . NULL
    (14) variable -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOL            shift and go to state 35
    NULL            shift and go to state 36
    ID              shift and go to state 37

    booleanExpression              shift and go to state 55
    variable                       shift and go to state 31

state 40

    (7) assignation -> varType . ID ASSIGN_OPERATOR variable SEMICOLON

    ID              shift and go to state 56


state 41

    (7) assignation -> varType ID ASSIGN_OPERATOR variable . SEMICOLON

    SEMICOLON       shift and go to state 57


state 42

    (41) parameter -> varType . ID

    ID              shift and go to state 58


state 43

    (40) function -> varType ID LPARENTHESIS parameters . RPARENTHESIS LBRACE statement RBRACE

    RPARENTHESIS    shift and go to state 59


state 44

    (44) parameters -> parametersList .

    RPARENTHESIS    reduce using rule 44 (parameters -> parametersList .)


state 45

    (45) parameters -> empty .

    RPARENTHESIS    reduce using rule 45 (parameters -> empty .)


state 46

    (42) parametersList -> parameter .
    (43) parametersList -> parameter . COMMA parametersList

    RPARENTHESIS    reduce using rule 42 (parametersList -> parameter .)
    COMMA           shift and go to state 60


state 47

    (32) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS . LBRACE statement RBRACE
    (33) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS . LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (34) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS . LBRACE RBRACE

    LBRACE          shift and go to state 61


state 48

    (26) booleanExpression -> variable EQUALS . variable
    (9) variable -> . INT
    (10) variable -> . DOUBLE
    (11) variable -> . STRING
    (12) variable -> . BOOL
    (13) variable -> . NULL
    (14) variable -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOL            shift and go to state 35
    NULL            shift and go to state 36
    ID              shift and go to state 37

    variable                       shift and go to state 62

state 49

    (27) booleanExpression -> variable NOT_EQUALS . variable
    (9) variable -> . INT
    (10) variable -> . DOUBLE
    (11) variable -> . STRING
    (12) variable -> . BOOL
    (13) variable -> . NULL
    (14) variable -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOL            shift and go to state 35
    NULL            shift and go to state 36
    ID              shift and go to state 37

    variable                       shift and go to state 63

state 50

    (28) booleanExpression -> variable GREATER_THAN . variable
    (9) variable -> . INT
    (10) variable -> . DOUBLE
    (11) variable -> . STRING
    (12) variable -> . BOOL
    (13) variable -> . NULL
    (14) variable -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOL            shift and go to state 35
    NULL            shift and go to state 36
    ID              shift and go to state 37

    variable                       shift and go to state 64

state 51

    (29) booleanExpression -> variable LESS_THAN . variable
    (9) variable -> . INT
    (10) variable -> . DOUBLE
    (11) variable -> . STRING
    (12) variable -> . BOOL
    (13) variable -> . NULL
    (14) variable -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOL            shift and go to state 35
    NULL            shift and go to state 36
    ID              shift and go to state 37

    variable                       shift and go to state 65

state 52

    (30) booleanExpression -> variable GREATER_THAN_OR_EQUALS . variable
    (9) variable -> . INT
    (10) variable -> . DOUBLE
    (11) variable -> . STRING
    (12) variable -> . BOOL
    (13) variable -> . NULL
    (14) variable -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOL            shift and go to state 35
    NULL            shift and go to state 36
    ID              shift and go to state 37

    variable                       shift and go to state 66

state 53

    (31) booleanExpression -> variable LESS_THAN_OR_EQUALS . variable
    (9) variable -> . INT
    (10) variable -> . DOUBLE
    (11) variable -> . STRING
    (12) variable -> . BOOL
    (13) variable -> . NULL
    (14) variable -> . ID

    INT             shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOL            shift and go to state 35
    NULL            shift and go to state 36
    ID              shift and go to state 37

    variable                       shift and go to state 67

state 54

    (35) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS . LBRACE statement RBRACE
    (36) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS . LBRACE RBRACE

    LBRACE          shift and go to state 68


state 55

    (37) for -> FOR LPARENTHESIS assignation booleanExpression . SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE
    (38) for -> FOR LPARENTHESIS assignation booleanExpression . SEMICOLON increment RPARENTHESIS LBRACE RBRACE

    SEMICOLON       shift and go to state 69


state 56

    (7) assignation -> varType ID . ASSIGN_OPERATOR variable SEMICOLON

    ASSIGN_OPERATOR shift and go to state 28


state 57

    (7) assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .

    $end            reduce using rule 7 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)
    INT             reduce using rule 7 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)
    DOUBLE          reduce using rule 7 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)
    STRING          reduce using rule 7 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)
    BOOL            reduce using rule 7 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)
    NULL            reduce using rule 7 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)
    ID              reduce using rule 7 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)
    RBRACE          reduce using rule 7 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)


state 58

    (41) parameter -> varType ID .

    COMMA           reduce using rule 41 (parameter -> varType ID .)
    RPARENTHESIS    reduce using rule 41 (parameter -> varType ID .)


state 59

    (40) function -> varType ID LPARENTHESIS parameters RPARENTHESIS . LBRACE statement RBRACE

    LBRACE          shift and go to state 70


state 60

    (43) parametersList -> parameter COMMA . parametersList
    (42) parametersList -> . parameter
    (43) parametersList -> . parameter COMMA parametersList
    (41) parameter -> . varType ID
    (15) varType -> . INT_TYPE
    (16) varType -> . STRING_TYPE
    (17) varType -> . NUM_TYPE
    (18) varType -> . DOUBLE_TYPE
    (19) varType -> . BOOL_TYPE
    (20) varType -> . LIST_TYPE
    (21) varType -> . MAP_TYPE
    (22) varType -> . VAR
    (23) varType -> . CONST
    (24) varType -> . FINAL
    (25) varType -> . VOID

    INT_TYPE        shift and go to state 12
    STRING_TYPE     shift and go to state 13
    NUM_TYPE        shift and go to state 14
    DOUBLE_TYPE     shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    LIST_TYPE       shift and go to state 17
    MAP_TYPE        shift and go to state 18
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    FINAL           shift and go to state 21
    VOID            shift and go to state 22

    parameter                      shift and go to state 46
    parametersList                 shift and go to state 71
    varType                        shift and go to state 42

state 61

    (32) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE . statement RBRACE
    (33) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE . statement RBRACE ELSE LBRACE statement RBRACE
    (34) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE . RBRACE
    (1) statement -> . declaration
    (2) statement -> . assignation
    (3) statement -> . function
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (8) declaration -> . varType ID SEMICOLON
    (7) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (40) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (32) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (33) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (34) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (35) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (36) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (37) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE
    (38) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE
    (15) varType -> . INT_TYPE
    (16) varType -> . STRING_TYPE
    (17) varType -> . NUM_TYPE
    (18) varType -> . DOUBLE_TYPE
    (19) varType -> . BOOL_TYPE
    (20) varType -> . LIST_TYPE
    (21) varType -> . MAP_TYPE
    (22) varType -> . VAR
    (23) varType -> . CONST
    (24) varType -> . FINAL
    (25) varType -> . VOID

    RBRACE          shift and go to state 73
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    INT_TYPE        shift and go to state 12
    STRING_TYPE     shift and go to state 13
    NUM_TYPE        shift and go to state 14
    DOUBLE_TYPE     shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    LIST_TYPE       shift and go to state 17
    MAP_TYPE        shift and go to state 18
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    FINAL           shift and go to state 21
    VOID            shift and go to state 22

    statement                      shift and go to state 72
    declaration                    shift and go to state 2
    assignation                    shift and go to state 3
    function                       shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    varType                        shift and go to state 8

state 62

    (26) booleanExpression -> variable EQUALS variable .

    RPARENTHESIS    reduce using rule 26 (booleanExpression -> variable EQUALS variable .)
    SEMICOLON       reduce using rule 26 (booleanExpression -> variable EQUALS variable .)


state 63

    (27) booleanExpression -> variable NOT_EQUALS variable .

    RPARENTHESIS    reduce using rule 27 (booleanExpression -> variable NOT_EQUALS variable .)
    SEMICOLON       reduce using rule 27 (booleanExpression -> variable NOT_EQUALS variable .)


state 64

    (28) booleanExpression -> variable GREATER_THAN variable .

    RPARENTHESIS    reduce using rule 28 (booleanExpression -> variable GREATER_THAN variable .)
    SEMICOLON       reduce using rule 28 (booleanExpression -> variable GREATER_THAN variable .)


state 65

    (29) booleanExpression -> variable LESS_THAN variable .

    RPARENTHESIS    reduce using rule 29 (booleanExpression -> variable LESS_THAN variable .)
    SEMICOLON       reduce using rule 29 (booleanExpression -> variable LESS_THAN variable .)


state 66

    (30) booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 30 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    SEMICOLON       reduce using rule 30 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)


state 67

    (31) booleanExpression -> variable LESS_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 31 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    SEMICOLON       reduce using rule 31 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)


state 68

    (35) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE . statement RBRACE
    (36) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE . RBRACE
    (1) statement -> . declaration
    (2) statement -> . assignation
    (3) statement -> . function
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (8) declaration -> . varType ID SEMICOLON
    (7) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (40) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (32) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (33) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (34) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (35) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (36) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (37) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE
    (38) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE
    (15) varType -> . INT_TYPE
    (16) varType -> . STRING_TYPE
    (17) varType -> . NUM_TYPE
    (18) varType -> . DOUBLE_TYPE
    (19) varType -> . BOOL_TYPE
    (20) varType -> . LIST_TYPE
    (21) varType -> . MAP_TYPE
    (22) varType -> . VAR
    (23) varType -> . CONST
    (24) varType -> . FINAL
    (25) varType -> . VOID

    RBRACE          shift and go to state 75
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    INT_TYPE        shift and go to state 12
    STRING_TYPE     shift and go to state 13
    NUM_TYPE        shift and go to state 14
    DOUBLE_TYPE     shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    LIST_TYPE       shift and go to state 17
    MAP_TYPE        shift and go to state 18
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    FINAL           shift and go to state 21
    VOID            shift and go to state 22

    statement                      shift and go to state 74
    declaration                    shift and go to state 2
    assignation                    shift and go to state 3
    function                       shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    varType                        shift and go to state 8

state 69

    (37) for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON . increment RPARENTHESIS LBRACE statement RBRACE
    (38) for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON . increment RPARENTHESIS LBRACE RBRACE
    (39) increment -> . ID PLUS PLUS

    ID              shift and go to state 77

    increment                      shift and go to state 76

state 70

    (40) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE . statement RBRACE
    (1) statement -> . declaration
    (2) statement -> . assignation
    (3) statement -> . function
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (8) declaration -> . varType ID SEMICOLON
    (7) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (40) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (32) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (33) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (34) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (35) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (36) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (37) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE
    (38) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE
    (15) varType -> . INT_TYPE
    (16) varType -> . STRING_TYPE
    (17) varType -> . NUM_TYPE
    (18) varType -> . DOUBLE_TYPE
    (19) varType -> . BOOL_TYPE
    (20) varType -> . LIST_TYPE
    (21) varType -> . MAP_TYPE
    (22) varType -> . VAR
    (23) varType -> . CONST
    (24) varType -> . FINAL
    (25) varType -> . VOID

    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    INT_TYPE        shift and go to state 12
    STRING_TYPE     shift and go to state 13
    NUM_TYPE        shift and go to state 14
    DOUBLE_TYPE     shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    LIST_TYPE       shift and go to state 17
    MAP_TYPE        shift and go to state 18
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    FINAL           shift and go to state 21
    VOID            shift and go to state 22

    varType                        shift and go to state 8
    statement                      shift and go to state 78
    declaration                    shift and go to state 2
    assignation                    shift and go to state 3
    function                       shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7

state 71

    (43) parametersList -> parameter COMMA parametersList .

    RPARENTHESIS    reduce using rule 43 (parametersList -> parameter COMMA parametersList .)


state 72

    (32) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement . RBRACE
    (33) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement . RBRACE ELSE LBRACE statement RBRACE

    RBRACE          shift and go to state 79


state 73

    (34) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE .

    $end            reduce using rule 34 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE .)
    RBRACE          reduce using rule 34 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE .)


state 74

    (35) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement . RBRACE

    RBRACE          shift and go to state 80


state 75

    (36) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE .

    $end            reduce using rule 36 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE .)
    RBRACE          reduce using rule 36 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE .)


state 76

    (37) for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment . RPARENTHESIS LBRACE statement RBRACE
    (38) for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment . RPARENTHESIS LBRACE RBRACE

    RPARENTHESIS    shift and go to state 81


state 77

    (39) increment -> ID . PLUS PLUS

    PLUS            shift and go to state 82


state 78

    (40) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement . RBRACE

    RBRACE          shift and go to state 83


state 79

    (32) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .
    (33) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE . ELSE LBRACE statement RBRACE

    $end            reduce using rule 32 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .)
    RBRACE          reduce using rule 32 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .)
    ELSE            shift and go to state 84


state 80

    (35) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .

    $end            reduce using rule 35 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .)
    RBRACE          reduce using rule 35 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .)


state 81

    (37) for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS . LBRACE statement RBRACE
    (38) for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS . LBRACE RBRACE

    LBRACE          shift and go to state 85


state 82

    (39) increment -> ID PLUS . PLUS

    PLUS            shift and go to state 86


state 83

    (40) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE .

    $end            reduce using rule 40 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE .)
    RBRACE          reduce using rule 40 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE .)


state 84

    (33) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE . LBRACE statement RBRACE

    LBRACE          shift and go to state 87


state 85

    (37) for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE . statement RBRACE
    (38) for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE . RBRACE
    (1) statement -> . declaration
    (2) statement -> . assignation
    (3) statement -> . function
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (8) declaration -> . varType ID SEMICOLON
    (7) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (40) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (32) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (33) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (34) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (35) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (36) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (37) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE
    (38) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE
    (15) varType -> . INT_TYPE
    (16) varType -> . STRING_TYPE
    (17) varType -> . NUM_TYPE
    (18) varType -> . DOUBLE_TYPE
    (19) varType -> . BOOL_TYPE
    (20) varType -> . LIST_TYPE
    (21) varType -> . MAP_TYPE
    (22) varType -> . VAR
    (23) varType -> . CONST
    (24) varType -> . FINAL
    (25) varType -> . VOID

    RBRACE          shift and go to state 89
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    INT_TYPE        shift and go to state 12
    STRING_TYPE     shift and go to state 13
    NUM_TYPE        shift and go to state 14
    DOUBLE_TYPE     shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    LIST_TYPE       shift and go to state 17
    MAP_TYPE        shift and go to state 18
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    FINAL           shift and go to state 21
    VOID            shift and go to state 22

    assignation                    shift and go to state 3
    statement                      shift and go to state 88
    declaration                    shift and go to state 2
    function                       shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    varType                        shift and go to state 8

state 86

    (39) increment -> ID PLUS PLUS .

    RPARENTHESIS    reduce using rule 39 (increment -> ID PLUS PLUS .)


state 87

    (33) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE . statement RBRACE
    (1) statement -> . declaration
    (2) statement -> . assignation
    (3) statement -> . function
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (8) declaration -> . varType ID SEMICOLON
    (7) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (40) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (32) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (33) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE
    (34) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (35) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (36) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE
    (37) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE
    (38) for -> . FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE
    (15) varType -> . INT_TYPE
    (16) varType -> . STRING_TYPE
    (17) varType -> . NUM_TYPE
    (18) varType -> . DOUBLE_TYPE
    (19) varType -> . BOOL_TYPE
    (20) varType -> . LIST_TYPE
    (21) varType -> . MAP_TYPE
    (22) varType -> . VAR
    (23) varType -> . CONST
    (24) varType -> . FINAL
    (25) varType -> . VOID

    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    INT_TYPE        shift and go to state 12
    STRING_TYPE     shift and go to state 13
    NUM_TYPE        shift and go to state 14
    DOUBLE_TYPE     shift and go to state 15
    BOOL_TYPE       shift and go to state 16
    LIST_TYPE       shift and go to state 17
    MAP_TYPE        shift and go to state 18
    VAR             shift and go to state 19
    CONST           shift and go to state 20
    FINAL           shift and go to state 21
    VOID            shift and go to state 22

    statement                      shift and go to state 90
    declaration                    shift and go to state 2
    assignation                    shift and go to state 3
    function                       shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    varType                        shift and go to state 8

state 88

    (37) for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement . RBRACE

    RBRACE          shift and go to state 91


state 89

    (38) for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE .

    $end            reduce using rule 38 (for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE .)
    RBRACE          reduce using rule 38 (for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE .)


state 90

    (33) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement . RBRACE

    RBRACE          shift and go to state 92


state 91

    (37) for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE .

    $end            reduce using rule 37 (for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE .)
    RBRACE          reduce using rule 37 (for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE .)


state 92

    (33) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE .

    $end            reduce using rule 33 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)
    RBRACE          reduce using rule 33 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE .)


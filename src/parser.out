Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    CONTINUE
    EXPORT
    FALSE
    LATE
    NOT
    NULL_TYPE
    RETURN
    STATIC
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> LBRACE statements RBRACE
Rule 5     statement -> expression SEMICOLON
Rule 6     statement -> declaration SEMICOLON
Rule 7     statement -> assignation SEMICOLON
Rule 8     statement -> increment SEMICOLON
Rule 9     statement -> decrement SEMICOLON
Rule 10    statement -> import SEMICOLON
Rule 11    statement -> function
Rule 12    statement -> if
Rule 13    statement -> while
Rule 14    statement -> for
Rule 15    statement -> print
Rule 16    statement -> input
Rule 17    statement -> class_def
Rule 18    statement -> enum
Rule 19    statement -> try
Rule 20    statement -> switch
Rule 21    statement -> empty
Rule 22    declaration -> declaration_modifier varType ID
Rule 23    declaration -> declaration_modifier ID
Rule 24    declaration -> varType ID
Rule 25    declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
Rule 26    list_literal -> LBRACKET list_elements RBRACKET
Rule 27    list_elements -> list_elements COMMA variable
Rule 28    list_elements -> variable
Rule 29    list_elements -> empty
Rule 30    declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
Rule 31    map_literal -> LBRACE map_elements RBRACE
Rule 32    map_elements -> map_elements COMMA map_pair
Rule 33    map_elements -> map_pair
Rule 34    map_elements -> empty
Rule 35    map_pair -> variable COLON variable
Rule 36    import -> IMPORT STRING SEMICOLON
Rule 37    assignation -> ID PLUS_EQUALS expression
Rule 38    assignation -> ID MINUS_EQUALS expression
Rule 39    assignation -> ID TIMES_EQUALS expression
Rule 40    assignation -> ID DIVIDE_EQUALS expression
Rule 41    assignation -> declaration ASSIGN_OPERATOR variable
Rule 42    assignation -> ID ASSIGN_OPERATOR variable
Rule 43    varType -> INT_TYPE
Rule 44    varType -> STRING_TYPE
Rule 45    varType -> NUM_TYPE
Rule 46    varType -> DOUBLE_TYPE
Rule 47    varType -> BOOL_TYPE
Rule 48    varType -> LIST_TYPE
Rule 49    varType -> MAP_TYPE
Rule 50    varType -> SET_TYPE
Rule 51    varType -> VOID
Rule 52    declaration_modifier -> VAR
Rule 53    declaration_modifier -> CONST
Rule 54    declaration_modifier -> FINAL
Rule 55    variable -> INT
Rule 56    variable -> DOUBLE
Rule 57    variable -> STRING
Rule 58    variable -> BOOL
Rule 59    variable -> NULL
Rule 60    variable -> ID
Rule 61    variable -> expression
Rule 62    expression -> expression PLUS term
Rule 63    expression -> expression MINUS term
Rule 64    expression -> term
Rule 65    term -> term TIMES factor
Rule 66    term -> term DIVIDE factor
Rule 67    term -> term MODULE factor
Rule 68    term -> factor
Rule 69    factor -> ID LBRACKET expression RBRACKET
Rule 70    factor -> ID DOT ID
Rule 71    factor -> ID
Rule 72    factor -> LPARENTHESIS expression RPARENTHESIS
Rule 73    factor -> INT
Rule 74    factor -> DOUBLE
Rule 75    booleanExpression -> variable EQUALS variable
Rule 76    booleanExpression -> variable NOT_EQUALS variable
Rule 77    booleanExpression -> variable GREATER_THAN variable
Rule 78    booleanExpression -> variable LESS_THAN variable
Rule 79    booleanExpression -> variable GREATER_THAN_OR_EQUALS variable
Rule 80    booleanExpression -> variable LESS_THAN_OR_EQUALS variable
Rule 81    booleanExpression -> booleanExpression AND booleanExpression
Rule 82    booleanExpression -> booleanExpression OR booleanExpression
Rule 83    booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS
Rule 84    booleanExpression -> variable
Rule 85    if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement
Rule 86    if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
Rule 87    while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
Rule 88    for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
Rule 89    for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
Rule 90    for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
Rule 91    increment -> ID INCREMENT
Rule 92    decrement -> ID DECREMENT
Rule 93    function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
Rule 94    function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
Rule 95    typedef -> TYPEDEF ID ASSIGN_OPERATOR varType function LPARENTHESIS parameters RPARENTHESIS SEMICOLON
Rule 96    enum -> ENUM ID LBRACE enum_values RBRACE
Rule 97    enum_values -> enum_values COMMA ID
Rule 98    enum_values -> ID
Rule 99    try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
Rule 100   switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
Rule 101   cases -> cases case
Rule 102   cases -> case
Rule 103   case -> CASE variable COLON statements BREAK SEMICOLON
Rule 104   default_case -> DEFAULT COLON statements
Rule 105   parameters -> parameters COMMA parameter
Rule 106   parameters -> parameter
Rule 107   parameters -> empty
Rule 108   parameter -> varType ID
Rule 109   print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
Rule 110   input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
Rule 111   class_def -> CLASS ID LBRACE class_members RBRACE
Rule 112   class_members -> class_members class_member
Rule 113   class_members -> class_member
Rule 114   class_member -> varType ID SEMICOLON
Rule 115   class_member -> function
Rule 116   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 81
ARROW                : 94
ASSIGN_OPERATOR      : 25 30 41 42 95 110
BOOL                 : 58
BOOL_TYPE            : 47
BREAK                : 103
CASE                 : 103
CLASS                : 111
COLON                : 35 103 104
COMMA                : 27 30 32 97 105
CONST                : 53
CONTINUE             : 
DECREMENT            : 92
DEFAULT              : 104
DIVIDE               : 66
DIVIDE_EQUALS        : 40
DOT                  : 70 110
DOUBLE               : 56 74
DOUBLE_TYPE          : 46
ELSE                 : 86
ENUM                 : 96
EQUALS               : 75
EXPORT               : 
FALSE                : 
FINAL                : 54
FINALLY              : 99
FOR                  : 88 89 90
GREATER_THAN         : 25 30 77
GREATER_THAN_OR_EQUALS : 79
ID                   : 22 23 24 25 30 37 38 39 40 42 60 69 70 70 71 90 90 91 92 93 94 95 96 97 98 108 110 111 114
IF                   : 85 86
IMPORT               : 36
IN                   : 90
INCREMENT            : 91
INT                  : 55 73
INT_TYPE             : 43
LATE                 : 
LBRACE               : 4 31 87 88 89 90 93 96 99 99 100 111
LBRACKET             : 26 69
LESS_THAN            : 25 30 78
LESS_THAN_OR_EQUALS  : 80
LIST_TYPE            : 25 48
LPARENTHESIS         : 72 83 85 86 87 88 89 90 93 94 95 100 109 110
MAP_TYPE             : 30 49
MINUS                : 63
MINUS_EQUALS         : 38
MODULE               : 67
NOT                  : 
NOT_EQUALS           : 76
NULL                 : 59
NULL_TYPE            : 
NUM_TYPE             : 45
OR                   : 82
PLUS                 : 62
PLUS_EQUALS          : 37
PRINT                : 109
RBRACE               : 4 31 87 88 89 90 93 96 99 99 100 111
RBRACKET             : 26 69
READ                 : 110
RETURN               : 
RPARENTHESIS         : 72 83 85 86 87 88 89 90 93 94 95 100 109 110
SEMICOLON            : 5 6 7 8 9 10 36 88 88 89 89 94 95 103 109 110 114
SET_TYPE             : 50
STATIC               : 
STDIN                : 110
STRING               : 36 57
STRING_TYPE          : 44
SWITCH               : 100
TIMES                : 65
TIMES_EQUALS         : 39
TRUE                 : 
TRY                  : 99
TYPEDEF              : 95
VAR                  : 52
VOID                 : 51
WHILE                : 87
error                : 

Nonterminals, with rules where they appear

assignation          : 7 88 89
booleanExpression    : 81 81 82 82 83 85 86 87 88 89
case                 : 101 102
cases                : 100 101
class_def            : 17
class_member         : 112 113
class_members        : 111 112
declaration          : 6 41
declaration_modifier : 22 23
decrement            : 9 89
default_case         : 100
empty                : 21 29 34 107
enum                 : 18
enum_values          : 96 97
expression           : 5 37 38 39 40 61 62 63 69 72 94
factor               : 65 66 67 68
for                  : 14
function             : 11 95 115
if                   : 12
import               : 10
increment            : 8 88
input                : 16
list_elements        : 26 27
list_literal         : 25
map_elements         : 31 32
map_literal          : 30
map_pair             : 32 33
parameter            : 105 106
parameters           : 93 94 95 105
print                : 15
program              : 0
statement            : 2 3 85 86 86
statements           : 1 2 4 87 88 89 90 93 99 99 103 104
switch               : 20
term                 : 62 63 64 65 66 67
try                  : 19
typedef              : 
varType              : 22 24 25 30 30 90 93 94 95 108 114
variable             : 27 28 35 35 41 42 75 75 76 76 77 77 78 78 79 79 80 80 84 100 103 109
while                : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    $end            reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> statements .)
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    $end            reduce using rule 1 (program -> statements .)
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]
  ! $end            [ reduce using rule 116 (empty -> .) ]

    statement                      shift and go to state 51
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 3

    (3) statements -> statement .

    LBRACE          reduce using rule 3 (statements -> statement .)
    LIST_TYPE       reduce using rule 3 (statements -> statement .)
    MAP_TYPE        reduce using rule 3 (statements -> statement .)
    ID              reduce using rule 3 (statements -> statement .)
    IMPORT          reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    CLASS           reduce using rule 3 (statements -> statement .)
    ENUM            reduce using rule 3 (statements -> statement .)
    TRY             reduce using rule 3 (statements -> statement .)
    SWITCH          reduce using rule 3 (statements -> statement .)
    VAR             reduce using rule 3 (statements -> statement .)
    CONST           reduce using rule 3 (statements -> statement .)
    FINAL           reduce using rule 3 (statements -> statement .)
    INT_TYPE        reduce using rule 3 (statements -> statement .)
    STRING_TYPE     reduce using rule 3 (statements -> statement .)
    NUM_TYPE        reduce using rule 3 (statements -> statement .)
    DOUBLE_TYPE     reduce using rule 3 (statements -> statement .)
    BOOL_TYPE       reduce using rule 3 (statements -> statement .)
    SET_TYPE        reduce using rule 3 (statements -> statement .)
    VOID            reduce using rule 3 (statements -> statement .)
    LPARENTHESIS    reduce using rule 3 (statements -> statement .)
    INT             reduce using rule 3 (statements -> statement .)
    DOUBLE          reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    RBRACE          reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    RBRACE          reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statements                     shift and go to state 52
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 5

    (5) statement -> expression . SEMICOLON
    (62) expression -> expression . PLUS term
    (63) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55


state 6

    (6) statement -> declaration . SEMICOLON
    (41) assignation -> declaration . ASSIGN_OPERATOR variable

    SEMICOLON       shift and go to state 56
    ASSIGN_OPERATOR shift and go to state 57


state 7

    (7) statement -> assignation . SEMICOLON

    SEMICOLON       shift and go to state 58


state 8

    (8) statement -> increment . SEMICOLON

    SEMICOLON       shift and go to state 59


state 9

    (9) statement -> decrement . SEMICOLON

    SEMICOLON       shift and go to state 60


state 10

    (10) statement -> import . SEMICOLON

    SEMICOLON       shift and go to state 61


state 11

    (11) statement -> function .

    LBRACE          reduce using rule 11 (statement -> function .)
    LIST_TYPE       reduce using rule 11 (statement -> function .)
    MAP_TYPE        reduce using rule 11 (statement -> function .)
    ID              reduce using rule 11 (statement -> function .)
    IMPORT          reduce using rule 11 (statement -> function .)
    IF              reduce using rule 11 (statement -> function .)
    WHILE           reduce using rule 11 (statement -> function .)
    FOR             reduce using rule 11 (statement -> function .)
    PRINT           reduce using rule 11 (statement -> function .)
    CLASS           reduce using rule 11 (statement -> function .)
    ENUM            reduce using rule 11 (statement -> function .)
    TRY             reduce using rule 11 (statement -> function .)
    SWITCH          reduce using rule 11 (statement -> function .)
    VAR             reduce using rule 11 (statement -> function .)
    CONST           reduce using rule 11 (statement -> function .)
    FINAL           reduce using rule 11 (statement -> function .)
    INT_TYPE        reduce using rule 11 (statement -> function .)
    STRING_TYPE     reduce using rule 11 (statement -> function .)
    NUM_TYPE        reduce using rule 11 (statement -> function .)
    DOUBLE_TYPE     reduce using rule 11 (statement -> function .)
    BOOL_TYPE       reduce using rule 11 (statement -> function .)
    SET_TYPE        reduce using rule 11 (statement -> function .)
    VOID            reduce using rule 11 (statement -> function .)
    LPARENTHESIS    reduce using rule 11 (statement -> function .)
    INT             reduce using rule 11 (statement -> function .)
    DOUBLE          reduce using rule 11 (statement -> function .)
    $end            reduce using rule 11 (statement -> function .)
    RBRACE          reduce using rule 11 (statement -> function .)
    ELSE            reduce using rule 11 (statement -> function .)
    BREAK           reduce using rule 11 (statement -> function .)


state 12

    (12) statement -> if .

    LBRACE          reduce using rule 12 (statement -> if .)
    LIST_TYPE       reduce using rule 12 (statement -> if .)
    MAP_TYPE        reduce using rule 12 (statement -> if .)
    ID              reduce using rule 12 (statement -> if .)
    IMPORT          reduce using rule 12 (statement -> if .)
    IF              reduce using rule 12 (statement -> if .)
    WHILE           reduce using rule 12 (statement -> if .)
    FOR             reduce using rule 12 (statement -> if .)
    PRINT           reduce using rule 12 (statement -> if .)
    CLASS           reduce using rule 12 (statement -> if .)
    ENUM            reduce using rule 12 (statement -> if .)
    TRY             reduce using rule 12 (statement -> if .)
    SWITCH          reduce using rule 12 (statement -> if .)
    VAR             reduce using rule 12 (statement -> if .)
    CONST           reduce using rule 12 (statement -> if .)
    FINAL           reduce using rule 12 (statement -> if .)
    INT_TYPE        reduce using rule 12 (statement -> if .)
    STRING_TYPE     reduce using rule 12 (statement -> if .)
    NUM_TYPE        reduce using rule 12 (statement -> if .)
    DOUBLE_TYPE     reduce using rule 12 (statement -> if .)
    BOOL_TYPE       reduce using rule 12 (statement -> if .)
    SET_TYPE        reduce using rule 12 (statement -> if .)
    VOID            reduce using rule 12 (statement -> if .)
    LPARENTHESIS    reduce using rule 12 (statement -> if .)
    INT             reduce using rule 12 (statement -> if .)
    DOUBLE          reduce using rule 12 (statement -> if .)
    $end            reduce using rule 12 (statement -> if .)
    RBRACE          reduce using rule 12 (statement -> if .)
    ELSE            reduce using rule 12 (statement -> if .)
    BREAK           reduce using rule 12 (statement -> if .)


state 13

    (13) statement -> while .

    LBRACE          reduce using rule 13 (statement -> while .)
    LIST_TYPE       reduce using rule 13 (statement -> while .)
    MAP_TYPE        reduce using rule 13 (statement -> while .)
    ID              reduce using rule 13 (statement -> while .)
    IMPORT          reduce using rule 13 (statement -> while .)
    IF              reduce using rule 13 (statement -> while .)
    WHILE           reduce using rule 13 (statement -> while .)
    FOR             reduce using rule 13 (statement -> while .)
    PRINT           reduce using rule 13 (statement -> while .)
    CLASS           reduce using rule 13 (statement -> while .)
    ENUM            reduce using rule 13 (statement -> while .)
    TRY             reduce using rule 13 (statement -> while .)
    SWITCH          reduce using rule 13 (statement -> while .)
    VAR             reduce using rule 13 (statement -> while .)
    CONST           reduce using rule 13 (statement -> while .)
    FINAL           reduce using rule 13 (statement -> while .)
    INT_TYPE        reduce using rule 13 (statement -> while .)
    STRING_TYPE     reduce using rule 13 (statement -> while .)
    NUM_TYPE        reduce using rule 13 (statement -> while .)
    DOUBLE_TYPE     reduce using rule 13 (statement -> while .)
    BOOL_TYPE       reduce using rule 13 (statement -> while .)
    SET_TYPE        reduce using rule 13 (statement -> while .)
    VOID            reduce using rule 13 (statement -> while .)
    LPARENTHESIS    reduce using rule 13 (statement -> while .)
    INT             reduce using rule 13 (statement -> while .)
    DOUBLE          reduce using rule 13 (statement -> while .)
    $end            reduce using rule 13 (statement -> while .)
    RBRACE          reduce using rule 13 (statement -> while .)
    ELSE            reduce using rule 13 (statement -> while .)
    BREAK           reduce using rule 13 (statement -> while .)


state 14

    (14) statement -> for .

    LBRACE          reduce using rule 14 (statement -> for .)
    LIST_TYPE       reduce using rule 14 (statement -> for .)
    MAP_TYPE        reduce using rule 14 (statement -> for .)
    ID              reduce using rule 14 (statement -> for .)
    IMPORT          reduce using rule 14 (statement -> for .)
    IF              reduce using rule 14 (statement -> for .)
    WHILE           reduce using rule 14 (statement -> for .)
    FOR             reduce using rule 14 (statement -> for .)
    PRINT           reduce using rule 14 (statement -> for .)
    CLASS           reduce using rule 14 (statement -> for .)
    ENUM            reduce using rule 14 (statement -> for .)
    TRY             reduce using rule 14 (statement -> for .)
    SWITCH          reduce using rule 14 (statement -> for .)
    VAR             reduce using rule 14 (statement -> for .)
    CONST           reduce using rule 14 (statement -> for .)
    FINAL           reduce using rule 14 (statement -> for .)
    INT_TYPE        reduce using rule 14 (statement -> for .)
    STRING_TYPE     reduce using rule 14 (statement -> for .)
    NUM_TYPE        reduce using rule 14 (statement -> for .)
    DOUBLE_TYPE     reduce using rule 14 (statement -> for .)
    BOOL_TYPE       reduce using rule 14 (statement -> for .)
    SET_TYPE        reduce using rule 14 (statement -> for .)
    VOID            reduce using rule 14 (statement -> for .)
    LPARENTHESIS    reduce using rule 14 (statement -> for .)
    INT             reduce using rule 14 (statement -> for .)
    DOUBLE          reduce using rule 14 (statement -> for .)
    $end            reduce using rule 14 (statement -> for .)
    RBRACE          reduce using rule 14 (statement -> for .)
    ELSE            reduce using rule 14 (statement -> for .)
    BREAK           reduce using rule 14 (statement -> for .)


state 15

    (15) statement -> print .

    LBRACE          reduce using rule 15 (statement -> print .)
    LIST_TYPE       reduce using rule 15 (statement -> print .)
    MAP_TYPE        reduce using rule 15 (statement -> print .)
    ID              reduce using rule 15 (statement -> print .)
    IMPORT          reduce using rule 15 (statement -> print .)
    IF              reduce using rule 15 (statement -> print .)
    WHILE           reduce using rule 15 (statement -> print .)
    FOR             reduce using rule 15 (statement -> print .)
    PRINT           reduce using rule 15 (statement -> print .)
    CLASS           reduce using rule 15 (statement -> print .)
    ENUM            reduce using rule 15 (statement -> print .)
    TRY             reduce using rule 15 (statement -> print .)
    SWITCH          reduce using rule 15 (statement -> print .)
    VAR             reduce using rule 15 (statement -> print .)
    CONST           reduce using rule 15 (statement -> print .)
    FINAL           reduce using rule 15 (statement -> print .)
    INT_TYPE        reduce using rule 15 (statement -> print .)
    STRING_TYPE     reduce using rule 15 (statement -> print .)
    NUM_TYPE        reduce using rule 15 (statement -> print .)
    DOUBLE_TYPE     reduce using rule 15 (statement -> print .)
    BOOL_TYPE       reduce using rule 15 (statement -> print .)
    SET_TYPE        reduce using rule 15 (statement -> print .)
    VOID            reduce using rule 15 (statement -> print .)
    LPARENTHESIS    reduce using rule 15 (statement -> print .)
    INT             reduce using rule 15 (statement -> print .)
    DOUBLE          reduce using rule 15 (statement -> print .)
    $end            reduce using rule 15 (statement -> print .)
    RBRACE          reduce using rule 15 (statement -> print .)
    ELSE            reduce using rule 15 (statement -> print .)
    BREAK           reduce using rule 15 (statement -> print .)


state 16

    (16) statement -> input .

    LBRACE          reduce using rule 16 (statement -> input .)
    LIST_TYPE       reduce using rule 16 (statement -> input .)
    MAP_TYPE        reduce using rule 16 (statement -> input .)
    ID              reduce using rule 16 (statement -> input .)
    IMPORT          reduce using rule 16 (statement -> input .)
    IF              reduce using rule 16 (statement -> input .)
    WHILE           reduce using rule 16 (statement -> input .)
    FOR             reduce using rule 16 (statement -> input .)
    PRINT           reduce using rule 16 (statement -> input .)
    CLASS           reduce using rule 16 (statement -> input .)
    ENUM            reduce using rule 16 (statement -> input .)
    TRY             reduce using rule 16 (statement -> input .)
    SWITCH          reduce using rule 16 (statement -> input .)
    VAR             reduce using rule 16 (statement -> input .)
    CONST           reduce using rule 16 (statement -> input .)
    FINAL           reduce using rule 16 (statement -> input .)
    INT_TYPE        reduce using rule 16 (statement -> input .)
    STRING_TYPE     reduce using rule 16 (statement -> input .)
    NUM_TYPE        reduce using rule 16 (statement -> input .)
    DOUBLE_TYPE     reduce using rule 16 (statement -> input .)
    BOOL_TYPE       reduce using rule 16 (statement -> input .)
    SET_TYPE        reduce using rule 16 (statement -> input .)
    VOID            reduce using rule 16 (statement -> input .)
    LPARENTHESIS    reduce using rule 16 (statement -> input .)
    INT             reduce using rule 16 (statement -> input .)
    DOUBLE          reduce using rule 16 (statement -> input .)
    $end            reduce using rule 16 (statement -> input .)
    RBRACE          reduce using rule 16 (statement -> input .)
    ELSE            reduce using rule 16 (statement -> input .)
    BREAK           reduce using rule 16 (statement -> input .)


state 17

    (17) statement -> class_def .

    LBRACE          reduce using rule 17 (statement -> class_def .)
    LIST_TYPE       reduce using rule 17 (statement -> class_def .)
    MAP_TYPE        reduce using rule 17 (statement -> class_def .)
    ID              reduce using rule 17 (statement -> class_def .)
    IMPORT          reduce using rule 17 (statement -> class_def .)
    IF              reduce using rule 17 (statement -> class_def .)
    WHILE           reduce using rule 17 (statement -> class_def .)
    FOR             reduce using rule 17 (statement -> class_def .)
    PRINT           reduce using rule 17 (statement -> class_def .)
    CLASS           reduce using rule 17 (statement -> class_def .)
    ENUM            reduce using rule 17 (statement -> class_def .)
    TRY             reduce using rule 17 (statement -> class_def .)
    SWITCH          reduce using rule 17 (statement -> class_def .)
    VAR             reduce using rule 17 (statement -> class_def .)
    CONST           reduce using rule 17 (statement -> class_def .)
    FINAL           reduce using rule 17 (statement -> class_def .)
    INT_TYPE        reduce using rule 17 (statement -> class_def .)
    STRING_TYPE     reduce using rule 17 (statement -> class_def .)
    NUM_TYPE        reduce using rule 17 (statement -> class_def .)
    DOUBLE_TYPE     reduce using rule 17 (statement -> class_def .)
    BOOL_TYPE       reduce using rule 17 (statement -> class_def .)
    SET_TYPE        reduce using rule 17 (statement -> class_def .)
    VOID            reduce using rule 17 (statement -> class_def .)
    LPARENTHESIS    reduce using rule 17 (statement -> class_def .)
    INT             reduce using rule 17 (statement -> class_def .)
    DOUBLE          reduce using rule 17 (statement -> class_def .)
    $end            reduce using rule 17 (statement -> class_def .)
    RBRACE          reduce using rule 17 (statement -> class_def .)
    ELSE            reduce using rule 17 (statement -> class_def .)
    BREAK           reduce using rule 17 (statement -> class_def .)


state 18

    (18) statement -> enum .

    LBRACE          reduce using rule 18 (statement -> enum .)
    LIST_TYPE       reduce using rule 18 (statement -> enum .)
    MAP_TYPE        reduce using rule 18 (statement -> enum .)
    ID              reduce using rule 18 (statement -> enum .)
    IMPORT          reduce using rule 18 (statement -> enum .)
    IF              reduce using rule 18 (statement -> enum .)
    WHILE           reduce using rule 18 (statement -> enum .)
    FOR             reduce using rule 18 (statement -> enum .)
    PRINT           reduce using rule 18 (statement -> enum .)
    CLASS           reduce using rule 18 (statement -> enum .)
    ENUM            reduce using rule 18 (statement -> enum .)
    TRY             reduce using rule 18 (statement -> enum .)
    SWITCH          reduce using rule 18 (statement -> enum .)
    VAR             reduce using rule 18 (statement -> enum .)
    CONST           reduce using rule 18 (statement -> enum .)
    FINAL           reduce using rule 18 (statement -> enum .)
    INT_TYPE        reduce using rule 18 (statement -> enum .)
    STRING_TYPE     reduce using rule 18 (statement -> enum .)
    NUM_TYPE        reduce using rule 18 (statement -> enum .)
    DOUBLE_TYPE     reduce using rule 18 (statement -> enum .)
    BOOL_TYPE       reduce using rule 18 (statement -> enum .)
    SET_TYPE        reduce using rule 18 (statement -> enum .)
    VOID            reduce using rule 18 (statement -> enum .)
    LPARENTHESIS    reduce using rule 18 (statement -> enum .)
    INT             reduce using rule 18 (statement -> enum .)
    DOUBLE          reduce using rule 18 (statement -> enum .)
    $end            reduce using rule 18 (statement -> enum .)
    RBRACE          reduce using rule 18 (statement -> enum .)
    ELSE            reduce using rule 18 (statement -> enum .)
    BREAK           reduce using rule 18 (statement -> enum .)


state 19

    (19) statement -> try .

    LBRACE          reduce using rule 19 (statement -> try .)
    LIST_TYPE       reduce using rule 19 (statement -> try .)
    MAP_TYPE        reduce using rule 19 (statement -> try .)
    ID              reduce using rule 19 (statement -> try .)
    IMPORT          reduce using rule 19 (statement -> try .)
    IF              reduce using rule 19 (statement -> try .)
    WHILE           reduce using rule 19 (statement -> try .)
    FOR             reduce using rule 19 (statement -> try .)
    PRINT           reduce using rule 19 (statement -> try .)
    CLASS           reduce using rule 19 (statement -> try .)
    ENUM            reduce using rule 19 (statement -> try .)
    TRY             reduce using rule 19 (statement -> try .)
    SWITCH          reduce using rule 19 (statement -> try .)
    VAR             reduce using rule 19 (statement -> try .)
    CONST           reduce using rule 19 (statement -> try .)
    FINAL           reduce using rule 19 (statement -> try .)
    INT_TYPE        reduce using rule 19 (statement -> try .)
    STRING_TYPE     reduce using rule 19 (statement -> try .)
    NUM_TYPE        reduce using rule 19 (statement -> try .)
    DOUBLE_TYPE     reduce using rule 19 (statement -> try .)
    BOOL_TYPE       reduce using rule 19 (statement -> try .)
    SET_TYPE        reduce using rule 19 (statement -> try .)
    VOID            reduce using rule 19 (statement -> try .)
    LPARENTHESIS    reduce using rule 19 (statement -> try .)
    INT             reduce using rule 19 (statement -> try .)
    DOUBLE          reduce using rule 19 (statement -> try .)
    $end            reduce using rule 19 (statement -> try .)
    RBRACE          reduce using rule 19 (statement -> try .)
    ELSE            reduce using rule 19 (statement -> try .)
    BREAK           reduce using rule 19 (statement -> try .)


state 20

    (20) statement -> switch .

    LBRACE          reduce using rule 20 (statement -> switch .)
    LIST_TYPE       reduce using rule 20 (statement -> switch .)
    MAP_TYPE        reduce using rule 20 (statement -> switch .)
    ID              reduce using rule 20 (statement -> switch .)
    IMPORT          reduce using rule 20 (statement -> switch .)
    IF              reduce using rule 20 (statement -> switch .)
    WHILE           reduce using rule 20 (statement -> switch .)
    FOR             reduce using rule 20 (statement -> switch .)
    PRINT           reduce using rule 20 (statement -> switch .)
    CLASS           reduce using rule 20 (statement -> switch .)
    ENUM            reduce using rule 20 (statement -> switch .)
    TRY             reduce using rule 20 (statement -> switch .)
    SWITCH          reduce using rule 20 (statement -> switch .)
    VAR             reduce using rule 20 (statement -> switch .)
    CONST           reduce using rule 20 (statement -> switch .)
    FINAL           reduce using rule 20 (statement -> switch .)
    INT_TYPE        reduce using rule 20 (statement -> switch .)
    STRING_TYPE     reduce using rule 20 (statement -> switch .)
    NUM_TYPE        reduce using rule 20 (statement -> switch .)
    DOUBLE_TYPE     reduce using rule 20 (statement -> switch .)
    BOOL_TYPE       reduce using rule 20 (statement -> switch .)
    SET_TYPE        reduce using rule 20 (statement -> switch .)
    VOID            reduce using rule 20 (statement -> switch .)
    LPARENTHESIS    reduce using rule 20 (statement -> switch .)
    INT             reduce using rule 20 (statement -> switch .)
    DOUBLE          reduce using rule 20 (statement -> switch .)
    $end            reduce using rule 20 (statement -> switch .)
    RBRACE          reduce using rule 20 (statement -> switch .)
    ELSE            reduce using rule 20 (statement -> switch .)
    BREAK           reduce using rule 20 (statement -> switch .)


state 21

    (21) statement -> empty .

    LBRACE          reduce using rule 21 (statement -> empty .)
    LIST_TYPE       reduce using rule 21 (statement -> empty .)
    MAP_TYPE        reduce using rule 21 (statement -> empty .)
    ID              reduce using rule 21 (statement -> empty .)
    IMPORT          reduce using rule 21 (statement -> empty .)
    IF              reduce using rule 21 (statement -> empty .)
    WHILE           reduce using rule 21 (statement -> empty .)
    FOR             reduce using rule 21 (statement -> empty .)
    PRINT           reduce using rule 21 (statement -> empty .)
    CLASS           reduce using rule 21 (statement -> empty .)
    ENUM            reduce using rule 21 (statement -> empty .)
    TRY             reduce using rule 21 (statement -> empty .)
    SWITCH          reduce using rule 21 (statement -> empty .)
    VAR             reduce using rule 21 (statement -> empty .)
    CONST           reduce using rule 21 (statement -> empty .)
    FINAL           reduce using rule 21 (statement -> empty .)
    INT_TYPE        reduce using rule 21 (statement -> empty .)
    STRING_TYPE     reduce using rule 21 (statement -> empty .)
    NUM_TYPE        reduce using rule 21 (statement -> empty .)
    DOUBLE_TYPE     reduce using rule 21 (statement -> empty .)
    BOOL_TYPE       reduce using rule 21 (statement -> empty .)
    SET_TYPE        reduce using rule 21 (statement -> empty .)
    VOID            reduce using rule 21 (statement -> empty .)
    LPARENTHESIS    reduce using rule 21 (statement -> empty .)
    INT             reduce using rule 21 (statement -> empty .)
    DOUBLE          reduce using rule 21 (statement -> empty .)
    $end            reduce using rule 21 (statement -> empty .)
    RBRACE          reduce using rule 21 (statement -> empty .)
    ELSE            reduce using rule 21 (statement -> empty .)
    BREAK           reduce using rule 21 (statement -> empty .)


state 22

    (64) expression -> term .
    (65) term -> term . TIMES factor
    (66) term -> term . DIVIDE factor
    (67) term -> term . MODULE factor

    SEMICOLON       reduce using rule 64 (expression -> term .)
    PLUS            reduce using rule 64 (expression -> term .)
    MINUS           reduce using rule 64 (expression -> term .)
    RPARENTHESIS    reduce using rule 64 (expression -> term .)
    RBRACKET        reduce using rule 64 (expression -> term .)
    EQUALS          reduce using rule 64 (expression -> term .)
    NOT_EQUALS      reduce using rule 64 (expression -> term .)
    GREATER_THAN    reduce using rule 64 (expression -> term .)
    LESS_THAN       reduce using rule 64 (expression -> term .)
    GREATER_THAN_OR_EQUALS reduce using rule 64 (expression -> term .)
    LESS_THAN_OR_EQUALS reduce using rule 64 (expression -> term .)
    AND             reduce using rule 64 (expression -> term .)
    OR              reduce using rule 64 (expression -> term .)
    COLON           reduce using rule 64 (expression -> term .)
    COMMA           reduce using rule 64 (expression -> term .)
    RBRACE          reduce using rule 64 (expression -> term .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULE          shift and go to state 64


state 23

    (22) declaration -> declaration_modifier . varType ID
    (23) declaration -> declaration_modifier . ID
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID

    ID              shift and go to state 66
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    LIST_TYPE       shift and go to state 67
    MAP_TYPE        shift and go to state 68
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48

    varType                        shift and go to state 65

state 24

    (24) declaration -> varType . ID
    (93) function -> varType . ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> varType . ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON

    ID              shift and go to state 69


state 25

    (37) assignation -> ID . PLUS_EQUALS expression
    (38) assignation -> ID . MINUS_EQUALS expression
    (39) assignation -> ID . TIMES_EQUALS expression
    (40) assignation -> ID . DIVIDE_EQUALS expression
    (42) assignation -> ID . ASSIGN_OPERATOR variable
    (91) increment -> ID . INCREMENT
    (92) decrement -> ID . DECREMENT
    (110) input -> ID . ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (69) factor -> ID . LBRACKET expression RBRACKET
    (70) factor -> ID . DOT ID
    (71) factor -> ID .

    PLUS_EQUALS     shift and go to state 70
    MINUS_EQUALS    shift and go to state 71
    TIMES_EQUALS    shift and go to state 72
    DIVIDE_EQUALS   shift and go to state 73
    ASSIGN_OPERATOR shift and go to state 74
    INCREMENT       shift and go to state 75
    DECREMENT       shift and go to state 76
    LBRACKET        shift and go to state 78
    DOT             shift and go to state 77
    TIMES           reduce using rule 71 (factor -> ID .)
    DIVIDE          reduce using rule 71 (factor -> ID .)
    MODULE          reduce using rule 71 (factor -> ID .)
    SEMICOLON       reduce using rule 71 (factor -> ID .)
    PLUS            reduce using rule 71 (factor -> ID .)
    MINUS           reduce using rule 71 (factor -> ID .)


state 26

    (25) declaration -> LIST_TYPE . LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (48) varType -> LIST_TYPE .

    LESS_THAN       shift and go to state 79
    ID              reduce using rule 48 (varType -> LIST_TYPE .)


state 27

    (30) declaration -> MAP_TYPE . LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (49) varType -> MAP_TYPE .

    LESS_THAN       shift and go to state 80
    ID              reduce using rule 49 (varType -> MAP_TYPE .)


state 28

    (36) import -> IMPORT . STRING SEMICOLON

    STRING          shift and go to state 81


state 29

    (72) factor -> LPARENTHESIS . expression RPARENTHESIS
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    expression                     shift and go to state 82
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 30

    (85) if -> IF . LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> IF . LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement

    LPARENTHESIS    shift and go to state 84


state 31

    (87) while -> WHILE . LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE

    LPARENTHESIS    shift and go to state 85


state 32

    (88) for -> FOR . LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> FOR . LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> FOR . LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE

    LPARENTHESIS    shift and go to state 86


state 33

    (109) print -> PRINT . LPARENTHESIS variable RPARENTHESIS SEMICOLON

    LPARENTHESIS    shift and go to state 87


state 34

    (111) class_def -> CLASS . ID LBRACE class_members RBRACE

    ID              shift and go to state 88


state 35

    (96) enum -> ENUM . ID LBRACE enum_values RBRACE

    ID              shift and go to state 89


state 36

    (99) try -> TRY . LBRACE statements RBRACE FINALLY LBRACE statements RBRACE

    LBRACE          shift and go to state 90


state 37

    (100) switch -> SWITCH . LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE

    LPARENTHESIS    shift and go to state 91


state 38

    (68) term -> factor .

    TIMES           reduce using rule 68 (term -> factor .)
    DIVIDE          reduce using rule 68 (term -> factor .)
    MODULE          reduce using rule 68 (term -> factor .)
    SEMICOLON       reduce using rule 68 (term -> factor .)
    PLUS            reduce using rule 68 (term -> factor .)
    MINUS           reduce using rule 68 (term -> factor .)
    RPARENTHESIS    reduce using rule 68 (term -> factor .)
    RBRACKET        reduce using rule 68 (term -> factor .)
    EQUALS          reduce using rule 68 (term -> factor .)
    NOT_EQUALS      reduce using rule 68 (term -> factor .)
    GREATER_THAN    reduce using rule 68 (term -> factor .)
    LESS_THAN       reduce using rule 68 (term -> factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 68 (term -> factor .)
    LESS_THAN_OR_EQUALS reduce using rule 68 (term -> factor .)
    AND             reduce using rule 68 (term -> factor .)
    OR              reduce using rule 68 (term -> factor .)
    COLON           reduce using rule 68 (term -> factor .)
    COMMA           reduce using rule 68 (term -> factor .)
    RBRACE          reduce using rule 68 (term -> factor .)


state 39

    (52) declaration_modifier -> VAR .

    ID              reduce using rule 52 (declaration_modifier -> VAR .)
    INT_TYPE        reduce using rule 52 (declaration_modifier -> VAR .)
    STRING_TYPE     reduce using rule 52 (declaration_modifier -> VAR .)
    NUM_TYPE        reduce using rule 52 (declaration_modifier -> VAR .)
    DOUBLE_TYPE     reduce using rule 52 (declaration_modifier -> VAR .)
    BOOL_TYPE       reduce using rule 52 (declaration_modifier -> VAR .)
    LIST_TYPE       reduce using rule 52 (declaration_modifier -> VAR .)
    MAP_TYPE        reduce using rule 52 (declaration_modifier -> VAR .)
    SET_TYPE        reduce using rule 52 (declaration_modifier -> VAR .)
    VOID            reduce using rule 52 (declaration_modifier -> VAR .)


state 40

    (53) declaration_modifier -> CONST .

    ID              reduce using rule 53 (declaration_modifier -> CONST .)
    INT_TYPE        reduce using rule 53 (declaration_modifier -> CONST .)
    STRING_TYPE     reduce using rule 53 (declaration_modifier -> CONST .)
    NUM_TYPE        reduce using rule 53 (declaration_modifier -> CONST .)
    DOUBLE_TYPE     reduce using rule 53 (declaration_modifier -> CONST .)
    BOOL_TYPE       reduce using rule 53 (declaration_modifier -> CONST .)
    LIST_TYPE       reduce using rule 53 (declaration_modifier -> CONST .)
    MAP_TYPE        reduce using rule 53 (declaration_modifier -> CONST .)
    SET_TYPE        reduce using rule 53 (declaration_modifier -> CONST .)
    VOID            reduce using rule 53 (declaration_modifier -> CONST .)


state 41

    (54) declaration_modifier -> FINAL .

    ID              reduce using rule 54 (declaration_modifier -> FINAL .)
    INT_TYPE        reduce using rule 54 (declaration_modifier -> FINAL .)
    STRING_TYPE     reduce using rule 54 (declaration_modifier -> FINAL .)
    NUM_TYPE        reduce using rule 54 (declaration_modifier -> FINAL .)
    DOUBLE_TYPE     reduce using rule 54 (declaration_modifier -> FINAL .)
    BOOL_TYPE       reduce using rule 54 (declaration_modifier -> FINAL .)
    LIST_TYPE       reduce using rule 54 (declaration_modifier -> FINAL .)
    MAP_TYPE        reduce using rule 54 (declaration_modifier -> FINAL .)
    SET_TYPE        reduce using rule 54 (declaration_modifier -> FINAL .)
    VOID            reduce using rule 54 (declaration_modifier -> FINAL .)


state 42

    (43) varType -> INT_TYPE .

    ID              reduce using rule 43 (varType -> INT_TYPE .)
    GREATER_THAN    reduce using rule 43 (varType -> INT_TYPE .)
    COMMA           reduce using rule 43 (varType -> INT_TYPE .)


state 43

    (44) varType -> STRING_TYPE .

    ID              reduce using rule 44 (varType -> STRING_TYPE .)
    GREATER_THAN    reduce using rule 44 (varType -> STRING_TYPE .)
    COMMA           reduce using rule 44 (varType -> STRING_TYPE .)


state 44

    (45) varType -> NUM_TYPE .

    ID              reduce using rule 45 (varType -> NUM_TYPE .)
    GREATER_THAN    reduce using rule 45 (varType -> NUM_TYPE .)
    COMMA           reduce using rule 45 (varType -> NUM_TYPE .)


state 45

    (46) varType -> DOUBLE_TYPE .

    ID              reduce using rule 46 (varType -> DOUBLE_TYPE .)
    GREATER_THAN    reduce using rule 46 (varType -> DOUBLE_TYPE .)
    COMMA           reduce using rule 46 (varType -> DOUBLE_TYPE .)


state 46

    (47) varType -> BOOL_TYPE .

    ID              reduce using rule 47 (varType -> BOOL_TYPE .)
    GREATER_THAN    reduce using rule 47 (varType -> BOOL_TYPE .)
    COMMA           reduce using rule 47 (varType -> BOOL_TYPE .)


state 47

    (50) varType -> SET_TYPE .

    ID              reduce using rule 50 (varType -> SET_TYPE .)
    GREATER_THAN    reduce using rule 50 (varType -> SET_TYPE .)
    COMMA           reduce using rule 50 (varType -> SET_TYPE .)


state 48

    (51) varType -> VOID .

    ID              reduce using rule 51 (varType -> VOID .)
    GREATER_THAN    reduce using rule 51 (varType -> VOID .)
    COMMA           reduce using rule 51 (varType -> VOID .)


state 49

    (73) factor -> INT .

    TIMES           reduce using rule 73 (factor -> INT .)
    DIVIDE          reduce using rule 73 (factor -> INT .)
    MODULE          reduce using rule 73 (factor -> INT .)
    SEMICOLON       reduce using rule 73 (factor -> INT .)
    PLUS            reduce using rule 73 (factor -> INT .)
    MINUS           reduce using rule 73 (factor -> INT .)
    RPARENTHESIS    reduce using rule 73 (factor -> INT .)
    RBRACKET        reduce using rule 73 (factor -> INT .)
    EQUALS          reduce using rule 73 (factor -> INT .)
    NOT_EQUALS      reduce using rule 73 (factor -> INT .)
    GREATER_THAN    reduce using rule 73 (factor -> INT .)
    LESS_THAN       reduce using rule 73 (factor -> INT .)
    GREATER_THAN_OR_EQUALS reduce using rule 73 (factor -> INT .)
    LESS_THAN_OR_EQUALS reduce using rule 73 (factor -> INT .)
    AND             reduce using rule 73 (factor -> INT .)
    OR              reduce using rule 73 (factor -> INT .)
    COLON           reduce using rule 73 (factor -> INT .)
    COMMA           reduce using rule 73 (factor -> INT .)
    RBRACE          reduce using rule 73 (factor -> INT .)


state 50

    (74) factor -> DOUBLE .

    TIMES           reduce using rule 74 (factor -> DOUBLE .)
    DIVIDE          reduce using rule 74 (factor -> DOUBLE .)
    MODULE          reduce using rule 74 (factor -> DOUBLE .)
    SEMICOLON       reduce using rule 74 (factor -> DOUBLE .)
    PLUS            reduce using rule 74 (factor -> DOUBLE .)
    MINUS           reduce using rule 74 (factor -> DOUBLE .)
    RPARENTHESIS    reduce using rule 74 (factor -> DOUBLE .)
    RBRACKET        reduce using rule 74 (factor -> DOUBLE .)
    EQUALS          reduce using rule 74 (factor -> DOUBLE .)
    NOT_EQUALS      reduce using rule 74 (factor -> DOUBLE .)
    GREATER_THAN    reduce using rule 74 (factor -> DOUBLE .)
    LESS_THAN       reduce using rule 74 (factor -> DOUBLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 74 (factor -> DOUBLE .)
    LESS_THAN_OR_EQUALS reduce using rule 74 (factor -> DOUBLE .)
    AND             reduce using rule 74 (factor -> DOUBLE .)
    OR              reduce using rule 74 (factor -> DOUBLE .)
    COLON           reduce using rule 74 (factor -> DOUBLE .)
    COMMA           reduce using rule 74 (factor -> DOUBLE .)
    RBRACE          reduce using rule 74 (factor -> DOUBLE .)


state 51

    (2) statements -> statements statement .

    LBRACE          reduce using rule 2 (statements -> statements statement .)
    LIST_TYPE       reduce using rule 2 (statements -> statements statement .)
    MAP_TYPE        reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    IMPORT          reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    CLASS           reduce using rule 2 (statements -> statements statement .)
    ENUM            reduce using rule 2 (statements -> statements statement .)
    TRY             reduce using rule 2 (statements -> statements statement .)
    SWITCH          reduce using rule 2 (statements -> statements statement .)
    VAR             reduce using rule 2 (statements -> statements statement .)
    CONST           reduce using rule 2 (statements -> statements statement .)
    FINAL           reduce using rule 2 (statements -> statements statement .)
    INT_TYPE        reduce using rule 2 (statements -> statements statement .)
    STRING_TYPE     reduce using rule 2 (statements -> statements statement .)
    NUM_TYPE        reduce using rule 2 (statements -> statements statement .)
    DOUBLE_TYPE     reduce using rule 2 (statements -> statements statement .)
    BOOL_TYPE       reduce using rule 2 (statements -> statements statement .)
    SET_TYPE        reduce using rule 2 (statements -> statements statement .)
    VOID            reduce using rule 2 (statements -> statements statement .)
    LPARENTHESIS    reduce using rule 2 (statements -> statements statement .)
    INT             reduce using rule 2 (statements -> statements statement .)
    DOUBLE          reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    RBRACE          reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)


state 52

    (4) statement -> LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 92
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! RBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statement                      shift and go to state 51
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 53

    (5) statement -> expression SEMICOLON .

    LBRACE          reduce using rule 5 (statement -> expression SEMICOLON .)
    LIST_TYPE       reduce using rule 5 (statement -> expression SEMICOLON .)
    MAP_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    ID              reduce using rule 5 (statement -> expression SEMICOLON .)
    IMPORT          reduce using rule 5 (statement -> expression SEMICOLON .)
    IF              reduce using rule 5 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> expression SEMICOLON .)
    FOR             reduce using rule 5 (statement -> expression SEMICOLON .)
    PRINT           reduce using rule 5 (statement -> expression SEMICOLON .)
    CLASS           reduce using rule 5 (statement -> expression SEMICOLON .)
    ENUM            reduce using rule 5 (statement -> expression SEMICOLON .)
    TRY             reduce using rule 5 (statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 5 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 5 (statement -> expression SEMICOLON .)
    CONST           reduce using rule 5 (statement -> expression SEMICOLON .)
    FINAL           reduce using rule 5 (statement -> expression SEMICOLON .)
    INT_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    STRING_TYPE     reduce using rule 5 (statement -> expression SEMICOLON .)
    NUM_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 5 (statement -> expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 5 (statement -> expression SEMICOLON .)
    SET_TYPE        reduce using rule 5 (statement -> expression SEMICOLON .)
    VOID            reduce using rule 5 (statement -> expression SEMICOLON .)
    LPARENTHESIS    reduce using rule 5 (statement -> expression SEMICOLON .)
    INT             reduce using rule 5 (statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 5 (statement -> expression SEMICOLON .)
    $end            reduce using rule 5 (statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 5 (statement -> expression SEMICOLON .)
    ELSE            reduce using rule 5 (statement -> expression SEMICOLON .)
    BREAK           reduce using rule 5 (statement -> expression SEMICOLON .)


state 54

    (62) expression -> expression PLUS . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    term                           shift and go to state 93
    factor                         shift and go to state 38

state 55

    (63) expression -> expression MINUS . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    term                           shift and go to state 94
    factor                         shift and go to state 38

state 56

    (6) statement -> declaration SEMICOLON .

    LBRACE          reduce using rule 6 (statement -> declaration SEMICOLON .)
    LIST_TYPE       reduce using rule 6 (statement -> declaration SEMICOLON .)
    MAP_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    ID              reduce using rule 6 (statement -> declaration SEMICOLON .)
    IMPORT          reduce using rule 6 (statement -> declaration SEMICOLON .)
    IF              reduce using rule 6 (statement -> declaration SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> declaration SEMICOLON .)
    FOR             reduce using rule 6 (statement -> declaration SEMICOLON .)
    PRINT           reduce using rule 6 (statement -> declaration SEMICOLON .)
    CLASS           reduce using rule 6 (statement -> declaration SEMICOLON .)
    ENUM            reduce using rule 6 (statement -> declaration SEMICOLON .)
    TRY             reduce using rule 6 (statement -> declaration SEMICOLON .)
    SWITCH          reduce using rule 6 (statement -> declaration SEMICOLON .)
    VAR             reduce using rule 6 (statement -> declaration SEMICOLON .)
    CONST           reduce using rule 6 (statement -> declaration SEMICOLON .)
    FINAL           reduce using rule 6 (statement -> declaration SEMICOLON .)
    INT_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    STRING_TYPE     reduce using rule 6 (statement -> declaration SEMICOLON .)
    NUM_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 6 (statement -> declaration SEMICOLON .)
    BOOL_TYPE       reduce using rule 6 (statement -> declaration SEMICOLON .)
    SET_TYPE        reduce using rule 6 (statement -> declaration SEMICOLON .)
    VOID            reduce using rule 6 (statement -> declaration SEMICOLON .)
    LPARENTHESIS    reduce using rule 6 (statement -> declaration SEMICOLON .)
    INT             reduce using rule 6 (statement -> declaration SEMICOLON .)
    DOUBLE          reduce using rule 6 (statement -> declaration SEMICOLON .)
    $end            reduce using rule 6 (statement -> declaration SEMICOLON .)
    RBRACE          reduce using rule 6 (statement -> declaration SEMICOLON .)
    ELSE            reduce using rule 6 (statement -> declaration SEMICOLON .)
    BREAK           reduce using rule 6 (statement -> declaration SEMICOLON .)


state 57

    (41) assignation -> declaration ASSIGN_OPERATOR . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 95
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 58

    (7) statement -> assignation SEMICOLON .

    LBRACE          reduce using rule 7 (statement -> assignation SEMICOLON .)
    LIST_TYPE       reduce using rule 7 (statement -> assignation SEMICOLON .)
    MAP_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    ID              reduce using rule 7 (statement -> assignation SEMICOLON .)
    IMPORT          reduce using rule 7 (statement -> assignation SEMICOLON .)
    IF              reduce using rule 7 (statement -> assignation SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> assignation SEMICOLON .)
    FOR             reduce using rule 7 (statement -> assignation SEMICOLON .)
    PRINT           reduce using rule 7 (statement -> assignation SEMICOLON .)
    CLASS           reduce using rule 7 (statement -> assignation SEMICOLON .)
    ENUM            reduce using rule 7 (statement -> assignation SEMICOLON .)
    TRY             reduce using rule 7 (statement -> assignation SEMICOLON .)
    SWITCH          reduce using rule 7 (statement -> assignation SEMICOLON .)
    VAR             reduce using rule 7 (statement -> assignation SEMICOLON .)
    CONST           reduce using rule 7 (statement -> assignation SEMICOLON .)
    FINAL           reduce using rule 7 (statement -> assignation SEMICOLON .)
    INT_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    STRING_TYPE     reduce using rule 7 (statement -> assignation SEMICOLON .)
    NUM_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 7 (statement -> assignation SEMICOLON .)
    BOOL_TYPE       reduce using rule 7 (statement -> assignation SEMICOLON .)
    SET_TYPE        reduce using rule 7 (statement -> assignation SEMICOLON .)
    VOID            reduce using rule 7 (statement -> assignation SEMICOLON .)
    LPARENTHESIS    reduce using rule 7 (statement -> assignation SEMICOLON .)
    INT             reduce using rule 7 (statement -> assignation SEMICOLON .)
    DOUBLE          reduce using rule 7 (statement -> assignation SEMICOLON .)
    $end            reduce using rule 7 (statement -> assignation SEMICOLON .)
    RBRACE          reduce using rule 7 (statement -> assignation SEMICOLON .)
    ELSE            reduce using rule 7 (statement -> assignation SEMICOLON .)
    BREAK           reduce using rule 7 (statement -> assignation SEMICOLON .)


state 59

    (8) statement -> increment SEMICOLON .

    LBRACE          reduce using rule 8 (statement -> increment SEMICOLON .)
    LIST_TYPE       reduce using rule 8 (statement -> increment SEMICOLON .)
    MAP_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    ID              reduce using rule 8 (statement -> increment SEMICOLON .)
    IMPORT          reduce using rule 8 (statement -> increment SEMICOLON .)
    IF              reduce using rule 8 (statement -> increment SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> increment SEMICOLON .)
    FOR             reduce using rule 8 (statement -> increment SEMICOLON .)
    PRINT           reduce using rule 8 (statement -> increment SEMICOLON .)
    CLASS           reduce using rule 8 (statement -> increment SEMICOLON .)
    ENUM            reduce using rule 8 (statement -> increment SEMICOLON .)
    TRY             reduce using rule 8 (statement -> increment SEMICOLON .)
    SWITCH          reduce using rule 8 (statement -> increment SEMICOLON .)
    VAR             reduce using rule 8 (statement -> increment SEMICOLON .)
    CONST           reduce using rule 8 (statement -> increment SEMICOLON .)
    FINAL           reduce using rule 8 (statement -> increment SEMICOLON .)
    INT_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    STRING_TYPE     reduce using rule 8 (statement -> increment SEMICOLON .)
    NUM_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 8 (statement -> increment SEMICOLON .)
    BOOL_TYPE       reduce using rule 8 (statement -> increment SEMICOLON .)
    SET_TYPE        reduce using rule 8 (statement -> increment SEMICOLON .)
    VOID            reduce using rule 8 (statement -> increment SEMICOLON .)
    LPARENTHESIS    reduce using rule 8 (statement -> increment SEMICOLON .)
    INT             reduce using rule 8 (statement -> increment SEMICOLON .)
    DOUBLE          reduce using rule 8 (statement -> increment SEMICOLON .)
    $end            reduce using rule 8 (statement -> increment SEMICOLON .)
    RBRACE          reduce using rule 8 (statement -> increment SEMICOLON .)
    ELSE            reduce using rule 8 (statement -> increment SEMICOLON .)
    BREAK           reduce using rule 8 (statement -> increment SEMICOLON .)


state 60

    (9) statement -> decrement SEMICOLON .

    LBRACE          reduce using rule 9 (statement -> decrement SEMICOLON .)
    LIST_TYPE       reduce using rule 9 (statement -> decrement SEMICOLON .)
    MAP_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    ID              reduce using rule 9 (statement -> decrement SEMICOLON .)
    IMPORT          reduce using rule 9 (statement -> decrement SEMICOLON .)
    IF              reduce using rule 9 (statement -> decrement SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> decrement SEMICOLON .)
    FOR             reduce using rule 9 (statement -> decrement SEMICOLON .)
    PRINT           reduce using rule 9 (statement -> decrement SEMICOLON .)
    CLASS           reduce using rule 9 (statement -> decrement SEMICOLON .)
    ENUM            reduce using rule 9 (statement -> decrement SEMICOLON .)
    TRY             reduce using rule 9 (statement -> decrement SEMICOLON .)
    SWITCH          reduce using rule 9 (statement -> decrement SEMICOLON .)
    VAR             reduce using rule 9 (statement -> decrement SEMICOLON .)
    CONST           reduce using rule 9 (statement -> decrement SEMICOLON .)
    FINAL           reduce using rule 9 (statement -> decrement SEMICOLON .)
    INT_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    STRING_TYPE     reduce using rule 9 (statement -> decrement SEMICOLON .)
    NUM_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 9 (statement -> decrement SEMICOLON .)
    BOOL_TYPE       reduce using rule 9 (statement -> decrement SEMICOLON .)
    SET_TYPE        reduce using rule 9 (statement -> decrement SEMICOLON .)
    VOID            reduce using rule 9 (statement -> decrement SEMICOLON .)
    LPARENTHESIS    reduce using rule 9 (statement -> decrement SEMICOLON .)
    INT             reduce using rule 9 (statement -> decrement SEMICOLON .)
    DOUBLE          reduce using rule 9 (statement -> decrement SEMICOLON .)
    $end            reduce using rule 9 (statement -> decrement SEMICOLON .)
    RBRACE          reduce using rule 9 (statement -> decrement SEMICOLON .)
    ELSE            reduce using rule 9 (statement -> decrement SEMICOLON .)
    BREAK           reduce using rule 9 (statement -> decrement SEMICOLON .)


state 61

    (10) statement -> import SEMICOLON .

    LBRACE          reduce using rule 10 (statement -> import SEMICOLON .)
    LIST_TYPE       reduce using rule 10 (statement -> import SEMICOLON .)
    MAP_TYPE        reduce using rule 10 (statement -> import SEMICOLON .)
    ID              reduce using rule 10 (statement -> import SEMICOLON .)
    IMPORT          reduce using rule 10 (statement -> import SEMICOLON .)
    IF              reduce using rule 10 (statement -> import SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> import SEMICOLON .)
    FOR             reduce using rule 10 (statement -> import SEMICOLON .)
    PRINT           reduce using rule 10 (statement -> import SEMICOLON .)
    CLASS           reduce using rule 10 (statement -> import SEMICOLON .)
    ENUM            reduce using rule 10 (statement -> import SEMICOLON .)
    TRY             reduce using rule 10 (statement -> import SEMICOLON .)
    SWITCH          reduce using rule 10 (statement -> import SEMICOLON .)
    VAR             reduce using rule 10 (statement -> import SEMICOLON .)
    CONST           reduce using rule 10 (statement -> import SEMICOLON .)
    FINAL           reduce using rule 10 (statement -> import SEMICOLON .)
    INT_TYPE        reduce using rule 10 (statement -> import SEMICOLON .)
    STRING_TYPE     reduce using rule 10 (statement -> import SEMICOLON .)
    NUM_TYPE        reduce using rule 10 (statement -> import SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 10 (statement -> import SEMICOLON .)
    BOOL_TYPE       reduce using rule 10 (statement -> import SEMICOLON .)
    SET_TYPE        reduce using rule 10 (statement -> import SEMICOLON .)
    VOID            reduce using rule 10 (statement -> import SEMICOLON .)
    LPARENTHESIS    reduce using rule 10 (statement -> import SEMICOLON .)
    INT             reduce using rule 10 (statement -> import SEMICOLON .)
    DOUBLE          reduce using rule 10 (statement -> import SEMICOLON .)
    $end            reduce using rule 10 (statement -> import SEMICOLON .)
    RBRACE          reduce using rule 10 (statement -> import SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> import SEMICOLON .)
    BREAK           reduce using rule 10 (statement -> import SEMICOLON .)


state 62

    (65) term -> term TIMES . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    factor                         shift and go to state 103

state 63

    (66) term -> term DIVIDE . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    factor                         shift and go to state 104

state 64

    (67) term -> term MODULE . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    factor                         shift and go to state 105

state 65

    (22) declaration -> declaration_modifier varType . ID

    ID              shift and go to state 106


state 66

    (23) declaration -> declaration_modifier ID .

    SEMICOLON       reduce using rule 23 (declaration -> declaration_modifier ID .)
    ASSIGN_OPERATOR reduce using rule 23 (declaration -> declaration_modifier ID .)


state 67

    (48) varType -> LIST_TYPE .

    ID              reduce using rule 48 (varType -> LIST_TYPE .)
    GREATER_THAN    reduce using rule 48 (varType -> LIST_TYPE .)
    COMMA           reduce using rule 48 (varType -> LIST_TYPE .)


state 68

    (49) varType -> MAP_TYPE .

    ID              reduce using rule 49 (varType -> MAP_TYPE .)
    GREATER_THAN    reduce using rule 49 (varType -> MAP_TYPE .)
    COMMA           reduce using rule 49 (varType -> MAP_TYPE .)


state 69

    (24) declaration -> varType ID .
    (93) function -> varType ID . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> varType ID . LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON

    SEMICOLON       reduce using rule 24 (declaration -> varType ID .)
    ASSIGN_OPERATOR reduce using rule 24 (declaration -> varType ID .)
    LPARENTHESIS    shift and go to state 107


state 70

    (37) assignation -> ID PLUS_EQUALS . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    expression                     shift and go to state 108
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 71

    (38) assignation -> ID MINUS_EQUALS . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    expression                     shift and go to state 109
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 72

    (39) assignation -> ID TIMES_EQUALS . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    expression                     shift and go to state 110
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 73

    (40) assignation -> ID DIVIDE_EQUALS . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    expression                     shift and go to state 111
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 74

    (42) assignation -> ID ASSIGN_OPERATOR . variable
    (110) input -> ID ASSIGN_OPERATOR . STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    STDIN           shift and go to state 113
    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 112
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 75

    (91) increment -> ID INCREMENT .

    SEMICOLON       reduce using rule 91 (increment -> ID INCREMENT .)
    RPARENTHESIS    reduce using rule 91 (increment -> ID INCREMENT .)


state 76

    (92) decrement -> ID DECREMENT .

    SEMICOLON       reduce using rule 92 (decrement -> ID DECREMENT .)
    RPARENTHESIS    reduce using rule 92 (decrement -> ID DECREMENT .)


state 77

    (70) factor -> ID DOT . ID

    ID              shift and go to state 114


state 78

    (69) factor -> ID LBRACKET . expression RBRACKET
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    expression                     shift and go to state 115
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 79

    (25) declaration -> LIST_TYPE LESS_THAN . varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID

    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    LIST_TYPE       shift and go to state 67
    MAP_TYPE        shift and go to state 68
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48

    varType                        shift and go to state 116

state 80

    (30) declaration -> MAP_TYPE LESS_THAN . varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID

    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    LIST_TYPE       shift and go to state 67
    MAP_TYPE        shift and go to state 68
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48

    varType                        shift and go to state 117

state 81

    (36) import -> IMPORT STRING . SEMICOLON

    SEMICOLON       shift and go to state 118


state 82

    (72) factor -> LPARENTHESIS expression . RPARENTHESIS
    (62) expression -> expression . PLUS term
    (63) expression -> expression . MINUS term

    RPARENTHESIS    shift and go to state 119
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55


state 83

    (69) factor -> ID . LBRACKET expression RBRACKET
    (70) factor -> ID . DOT ID
    (71) factor -> ID .

    LBRACKET        shift and go to state 78
    DOT             shift and go to state 77
    TIMES           reduce using rule 71 (factor -> ID .)
    DIVIDE          reduce using rule 71 (factor -> ID .)
    MODULE          reduce using rule 71 (factor -> ID .)
    RPARENTHESIS    reduce using rule 71 (factor -> ID .)
    PLUS            reduce using rule 71 (factor -> ID .)
    MINUS           reduce using rule 71 (factor -> ID .)
    SEMICOLON       reduce using rule 71 (factor -> ID .)
    RBRACKET        reduce using rule 71 (factor -> ID .)
    EQUALS          reduce using rule 71 (factor -> ID .)
    NOT_EQUALS      reduce using rule 71 (factor -> ID .)
    GREATER_THAN    reduce using rule 71 (factor -> ID .)
    LESS_THAN       reduce using rule 71 (factor -> ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 71 (factor -> ID .)
    LESS_THAN_OR_EQUALS reduce using rule 71 (factor -> ID .)
    AND             reduce using rule 71 (factor -> ID .)
    OR              reduce using rule 71 (factor -> ID .)
    COLON           reduce using rule 71 (factor -> ID .)
    COMMA           reduce using rule 71 (factor -> ID .)
    RBRACE          reduce using rule 71 (factor -> ID .)


state 84

    (85) if -> IF LPARENTHESIS . booleanExpression RPARENTHESIS statement
    (86) if -> IF LPARENTHESIS . booleanExpression RPARENTHESIS statement ELSE statement
    (75) booleanExpression -> . variable EQUALS variable
    (76) booleanExpression -> . variable NOT_EQUALS variable
    (77) booleanExpression -> . variable GREATER_THAN variable
    (78) booleanExpression -> . variable LESS_THAN variable
    (79) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (80) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (81) booleanExpression -> . booleanExpression AND booleanExpression
    (82) booleanExpression -> . booleanExpression OR booleanExpression
    (83) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (84) booleanExpression -> . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    LPARENTHESIS    shift and go to state 120
    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101

    booleanExpression              shift and go to state 121
    variable                       shift and go to state 122
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 85

    (87) while -> WHILE LPARENTHESIS . booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (75) booleanExpression -> . variable EQUALS variable
    (76) booleanExpression -> . variable NOT_EQUALS variable
    (77) booleanExpression -> . variable GREATER_THAN variable
    (78) booleanExpression -> . variable LESS_THAN variable
    (79) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (80) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (81) booleanExpression -> . booleanExpression AND booleanExpression
    (82) booleanExpression -> . booleanExpression OR booleanExpression
    (83) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (84) booleanExpression -> . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    LPARENTHESIS    shift and go to state 120
    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101

    booleanExpression              shift and go to state 123
    variable                       shift and go to state 122
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 86

    (88) for -> FOR LPARENTHESIS . assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> FOR LPARENTHESIS . assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> FOR LPARENTHESIS . varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL

    ID              shift and go to state 126
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    LIST_TYPE       shift and go to state 128
    MAP_TYPE        shift and go to state 129
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41

    assignation                    shift and go to state 124
    varType                        shift and go to state 125
    declaration                    shift and go to state 127
    declaration_modifier           shift and go to state 23

state 87

    (109) print -> PRINT LPARENTHESIS . variable RPARENTHESIS SEMICOLON
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 130
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 88

    (111) class_def -> CLASS ID . LBRACE class_members RBRACE

    LBRACE          shift and go to state 131


state 89

    (96) enum -> ENUM ID . LBRACE enum_values RBRACE

    LBRACE          shift and go to state 132


state 90

    (99) try -> TRY LBRACE . statements RBRACE FINALLY LBRACE statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    RBRACE          reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statements                     shift and go to state 133
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 91

    (100) switch -> SWITCH LPARENTHESIS . variable RPARENTHESIS LBRACE cases default_case RBRACE
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 134
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 92

    (4) statement -> LBRACE statements RBRACE .

    LBRACE          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    ID              reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    IMPORT          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    IF              reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    FOR             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    PRINT           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    CLASS           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    ENUM            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    TRY             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    SWITCH          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    VAR             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    CONST           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    FINAL           reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    VOID            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    INT             reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    $end            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 4 (statement -> LBRACE statements RBRACE .)
    BREAK           reduce using rule 4 (statement -> LBRACE statements RBRACE .)


state 93

    (62) expression -> expression PLUS term .
    (65) term -> term . TIMES factor
    (66) term -> term . DIVIDE factor
    (67) term -> term . MODULE factor

    SEMICOLON       reduce using rule 62 (expression -> expression PLUS term .)
    PLUS            reduce using rule 62 (expression -> expression PLUS term .)
    MINUS           reduce using rule 62 (expression -> expression PLUS term .)
    RPARENTHESIS    reduce using rule 62 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 62 (expression -> expression PLUS term .)
    EQUALS          reduce using rule 62 (expression -> expression PLUS term .)
    NOT_EQUALS      reduce using rule 62 (expression -> expression PLUS term .)
    GREATER_THAN    reduce using rule 62 (expression -> expression PLUS term .)
    LESS_THAN       reduce using rule 62 (expression -> expression PLUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 62 (expression -> expression PLUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 62 (expression -> expression PLUS term .)
    AND             reduce using rule 62 (expression -> expression PLUS term .)
    OR              reduce using rule 62 (expression -> expression PLUS term .)
    COLON           reduce using rule 62 (expression -> expression PLUS term .)
    COMMA           reduce using rule 62 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 62 (expression -> expression PLUS term .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULE          shift and go to state 64


state 94

    (63) expression -> expression MINUS term .
    (65) term -> term . TIMES factor
    (66) term -> term . DIVIDE factor
    (67) term -> term . MODULE factor

    SEMICOLON       reduce using rule 63 (expression -> expression MINUS term .)
    PLUS            reduce using rule 63 (expression -> expression MINUS term .)
    MINUS           reduce using rule 63 (expression -> expression MINUS term .)
    RPARENTHESIS    reduce using rule 63 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 63 (expression -> expression MINUS term .)
    EQUALS          reduce using rule 63 (expression -> expression MINUS term .)
    NOT_EQUALS      reduce using rule 63 (expression -> expression MINUS term .)
    GREATER_THAN    reduce using rule 63 (expression -> expression MINUS term .)
    LESS_THAN       reduce using rule 63 (expression -> expression MINUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 63 (expression -> expression MINUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 63 (expression -> expression MINUS term .)
    AND             reduce using rule 63 (expression -> expression MINUS term .)
    OR              reduce using rule 63 (expression -> expression MINUS term .)
    COLON           reduce using rule 63 (expression -> expression MINUS term .)
    COMMA           reduce using rule 63 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 63 (expression -> expression MINUS term .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULE          shift and go to state 64


state 95

    (41) assignation -> declaration ASSIGN_OPERATOR variable .

    SEMICOLON       reduce using rule 41 (assignation -> declaration ASSIGN_OPERATOR variable .)


state 96

    (55) variable -> INT .
    (73) factor -> INT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for EQUALS resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for AND resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for OR resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for COLON resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for COMMA resolved using rule 55 (variable -> INT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 55 (variable -> INT .)
    SEMICOLON       reduce using rule 55 (variable -> INT .)
    EQUALS          reduce using rule 55 (variable -> INT .)
    NOT_EQUALS      reduce using rule 55 (variable -> INT .)
    GREATER_THAN    reduce using rule 55 (variable -> INT .)
    LESS_THAN       reduce using rule 55 (variable -> INT .)
    GREATER_THAN_OR_EQUALS reduce using rule 55 (variable -> INT .)
    LESS_THAN_OR_EQUALS reduce using rule 55 (variable -> INT .)
    RPARENTHESIS    reduce using rule 55 (variable -> INT .)
    AND             reduce using rule 55 (variable -> INT .)
    OR              reduce using rule 55 (variable -> INT .)
    COLON           reduce using rule 55 (variable -> INT .)
    RBRACKET        reduce using rule 55 (variable -> INT .)
    COMMA           reduce using rule 55 (variable -> INT .)
    RBRACE          reduce using rule 55 (variable -> INT .)
    TIMES           reduce using rule 73 (factor -> INT .)
    DIVIDE          reduce using rule 73 (factor -> INT .)
    MODULE          reduce using rule 73 (factor -> INT .)
    PLUS            reduce using rule 73 (factor -> INT .)
    MINUS           reduce using rule 73 (factor -> INT .)

  ! SEMICOLON       [ reduce using rule 73 (factor -> INT .) ]
  ! EQUALS          [ reduce using rule 73 (factor -> INT .) ]
  ! NOT_EQUALS      [ reduce using rule 73 (factor -> INT .) ]
  ! GREATER_THAN    [ reduce using rule 73 (factor -> INT .) ]
  ! LESS_THAN       [ reduce using rule 73 (factor -> INT .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 73 (factor -> INT .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 73 (factor -> INT .) ]
  ! RPARENTHESIS    [ reduce using rule 73 (factor -> INT .) ]
  ! AND             [ reduce using rule 73 (factor -> INT .) ]
  ! OR              [ reduce using rule 73 (factor -> INT .) ]
  ! COLON           [ reduce using rule 73 (factor -> INT .) ]
  ! RBRACKET        [ reduce using rule 73 (factor -> INT .) ]
  ! COMMA           [ reduce using rule 73 (factor -> INT .) ]
  ! RBRACE          [ reduce using rule 73 (factor -> INT .) ]


state 97

    (56) variable -> DOUBLE .
    (74) factor -> DOUBLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for EQUALS resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for AND resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for OR resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for COLON resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 56 (variable -> DOUBLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 56 (variable -> DOUBLE .)
    SEMICOLON       reduce using rule 56 (variable -> DOUBLE .)
    EQUALS          reduce using rule 56 (variable -> DOUBLE .)
    NOT_EQUALS      reduce using rule 56 (variable -> DOUBLE .)
    GREATER_THAN    reduce using rule 56 (variable -> DOUBLE .)
    LESS_THAN       reduce using rule 56 (variable -> DOUBLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 56 (variable -> DOUBLE .)
    LESS_THAN_OR_EQUALS reduce using rule 56 (variable -> DOUBLE .)
    RPARENTHESIS    reduce using rule 56 (variable -> DOUBLE .)
    AND             reduce using rule 56 (variable -> DOUBLE .)
    OR              reduce using rule 56 (variable -> DOUBLE .)
    COLON           reduce using rule 56 (variable -> DOUBLE .)
    RBRACKET        reduce using rule 56 (variable -> DOUBLE .)
    COMMA           reduce using rule 56 (variable -> DOUBLE .)
    RBRACE          reduce using rule 56 (variable -> DOUBLE .)
    TIMES           reduce using rule 74 (factor -> DOUBLE .)
    DIVIDE          reduce using rule 74 (factor -> DOUBLE .)
    MODULE          reduce using rule 74 (factor -> DOUBLE .)
    PLUS            reduce using rule 74 (factor -> DOUBLE .)
    MINUS           reduce using rule 74 (factor -> DOUBLE .)

  ! SEMICOLON       [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! EQUALS          [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! NOT_EQUALS      [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! GREATER_THAN    [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! LESS_THAN       [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! RPARENTHESIS    [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! AND             [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! OR              [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! COLON           [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! RBRACKET        [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! COMMA           [ reduce using rule 74 (factor -> DOUBLE .) ]
  ! RBRACE          [ reduce using rule 74 (factor -> DOUBLE .) ]


state 98

    (57) variable -> STRING .

    SEMICOLON       reduce using rule 57 (variable -> STRING .)
    EQUALS          reduce using rule 57 (variable -> STRING .)
    NOT_EQUALS      reduce using rule 57 (variable -> STRING .)
    GREATER_THAN    reduce using rule 57 (variable -> STRING .)
    LESS_THAN       reduce using rule 57 (variable -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 57 (variable -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 57 (variable -> STRING .)
    RPARENTHESIS    reduce using rule 57 (variable -> STRING .)
    AND             reduce using rule 57 (variable -> STRING .)
    OR              reduce using rule 57 (variable -> STRING .)
    COLON           reduce using rule 57 (variable -> STRING .)
    RBRACKET        reduce using rule 57 (variable -> STRING .)
    COMMA           reduce using rule 57 (variable -> STRING .)
    RBRACE          reduce using rule 57 (variable -> STRING .)


state 99

    (58) variable -> BOOL .

    SEMICOLON       reduce using rule 58 (variable -> BOOL .)
    EQUALS          reduce using rule 58 (variable -> BOOL .)
    NOT_EQUALS      reduce using rule 58 (variable -> BOOL .)
    GREATER_THAN    reduce using rule 58 (variable -> BOOL .)
    LESS_THAN       reduce using rule 58 (variable -> BOOL .)
    GREATER_THAN_OR_EQUALS reduce using rule 58 (variable -> BOOL .)
    LESS_THAN_OR_EQUALS reduce using rule 58 (variable -> BOOL .)
    RPARENTHESIS    reduce using rule 58 (variable -> BOOL .)
    AND             reduce using rule 58 (variable -> BOOL .)
    OR              reduce using rule 58 (variable -> BOOL .)
    COLON           reduce using rule 58 (variable -> BOOL .)
    RBRACKET        reduce using rule 58 (variable -> BOOL .)
    COMMA           reduce using rule 58 (variable -> BOOL .)
    RBRACE          reduce using rule 58 (variable -> BOOL .)


state 100

    (59) variable -> NULL .

    SEMICOLON       reduce using rule 59 (variable -> NULL .)
    EQUALS          reduce using rule 59 (variable -> NULL .)
    NOT_EQUALS      reduce using rule 59 (variable -> NULL .)
    GREATER_THAN    reduce using rule 59 (variable -> NULL .)
    LESS_THAN       reduce using rule 59 (variable -> NULL .)
    GREATER_THAN_OR_EQUALS reduce using rule 59 (variable -> NULL .)
    LESS_THAN_OR_EQUALS reduce using rule 59 (variable -> NULL .)
    RPARENTHESIS    reduce using rule 59 (variable -> NULL .)
    AND             reduce using rule 59 (variable -> NULL .)
    OR              reduce using rule 59 (variable -> NULL .)
    COLON           reduce using rule 59 (variable -> NULL .)
    RBRACKET        reduce using rule 59 (variable -> NULL .)
    COMMA           reduce using rule 59 (variable -> NULL .)
    RBRACE          reduce using rule 59 (variable -> NULL .)


state 101

    (60) variable -> ID .
    (69) factor -> ID . LBRACKET expression RBRACKET
    (70) factor -> ID . DOT ID
    (71) factor -> ID .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for EQUALS resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 60 (variable -> ID .)
  ! reduce/reduce conflict for RBRACE resolved using rule 60 (variable -> ID .)
    SEMICOLON       reduce using rule 60 (variable -> ID .)
    EQUALS          reduce using rule 60 (variable -> ID .)
    NOT_EQUALS      reduce using rule 60 (variable -> ID .)
    GREATER_THAN    reduce using rule 60 (variable -> ID .)
    LESS_THAN       reduce using rule 60 (variable -> ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 60 (variable -> ID .)
    LESS_THAN_OR_EQUALS reduce using rule 60 (variable -> ID .)
    RPARENTHESIS    reduce using rule 60 (variable -> ID .)
    AND             reduce using rule 60 (variable -> ID .)
    OR              reduce using rule 60 (variable -> ID .)
    COLON           reduce using rule 60 (variable -> ID .)
    RBRACKET        reduce using rule 60 (variable -> ID .)
    COMMA           reduce using rule 60 (variable -> ID .)
    RBRACE          reduce using rule 60 (variable -> ID .)
    LBRACKET        shift and go to state 78
    DOT             shift and go to state 77
    TIMES           reduce using rule 71 (factor -> ID .)
    DIVIDE          reduce using rule 71 (factor -> ID .)
    MODULE          reduce using rule 71 (factor -> ID .)
    PLUS            reduce using rule 71 (factor -> ID .)
    MINUS           reduce using rule 71 (factor -> ID .)

  ! SEMICOLON       [ reduce using rule 71 (factor -> ID .) ]
  ! EQUALS          [ reduce using rule 71 (factor -> ID .) ]
  ! NOT_EQUALS      [ reduce using rule 71 (factor -> ID .) ]
  ! GREATER_THAN    [ reduce using rule 71 (factor -> ID .) ]
  ! LESS_THAN       [ reduce using rule 71 (factor -> ID .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 71 (factor -> ID .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 71 (factor -> ID .) ]
  ! RPARENTHESIS    [ reduce using rule 71 (factor -> ID .) ]
  ! AND             [ reduce using rule 71 (factor -> ID .) ]
  ! OR              [ reduce using rule 71 (factor -> ID .) ]
  ! COLON           [ reduce using rule 71 (factor -> ID .) ]
  ! RBRACKET        [ reduce using rule 71 (factor -> ID .) ]
  ! COMMA           [ reduce using rule 71 (factor -> ID .) ]
  ! RBRACE          [ reduce using rule 71 (factor -> ID .) ]


state 102

    (61) variable -> expression .
    (62) expression -> expression . PLUS term
    (63) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 61 (variable -> expression .)
    EQUALS          reduce using rule 61 (variable -> expression .)
    NOT_EQUALS      reduce using rule 61 (variable -> expression .)
    GREATER_THAN    reduce using rule 61 (variable -> expression .)
    LESS_THAN       reduce using rule 61 (variable -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 61 (variable -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 61 (variable -> expression .)
    RPARENTHESIS    reduce using rule 61 (variable -> expression .)
    AND             reduce using rule 61 (variable -> expression .)
    OR              reduce using rule 61 (variable -> expression .)
    COLON           reduce using rule 61 (variable -> expression .)
    RBRACKET        reduce using rule 61 (variable -> expression .)
    COMMA           reduce using rule 61 (variable -> expression .)
    RBRACE          reduce using rule 61 (variable -> expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55


state 103

    (65) term -> term TIMES factor .

    TIMES           reduce using rule 65 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 65 (term -> term TIMES factor .)
    MODULE          reduce using rule 65 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 65 (term -> term TIMES factor .)
    PLUS            reduce using rule 65 (term -> term TIMES factor .)
    MINUS           reduce using rule 65 (term -> term TIMES factor .)
    RPARENTHESIS    reduce using rule 65 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 65 (term -> term TIMES factor .)
    EQUALS          reduce using rule 65 (term -> term TIMES factor .)
    NOT_EQUALS      reduce using rule 65 (term -> term TIMES factor .)
    GREATER_THAN    reduce using rule 65 (term -> term TIMES factor .)
    LESS_THAN       reduce using rule 65 (term -> term TIMES factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 65 (term -> term TIMES factor .)
    LESS_THAN_OR_EQUALS reduce using rule 65 (term -> term TIMES factor .)
    AND             reduce using rule 65 (term -> term TIMES factor .)
    OR              reduce using rule 65 (term -> term TIMES factor .)
    COLON           reduce using rule 65 (term -> term TIMES factor .)
    COMMA           reduce using rule 65 (term -> term TIMES factor .)
    RBRACE          reduce using rule 65 (term -> term TIMES factor .)


state 104

    (66) term -> term DIVIDE factor .

    TIMES           reduce using rule 66 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 66 (term -> term DIVIDE factor .)
    MODULE          reduce using rule 66 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 66 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 66 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 66 (term -> term DIVIDE factor .)
    RPARENTHESIS    reduce using rule 66 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 66 (term -> term DIVIDE factor .)
    EQUALS          reduce using rule 66 (term -> term DIVIDE factor .)
    NOT_EQUALS      reduce using rule 66 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 66 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 66 (term -> term DIVIDE factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 66 (term -> term DIVIDE factor .)
    LESS_THAN_OR_EQUALS reduce using rule 66 (term -> term DIVIDE factor .)
    AND             reduce using rule 66 (term -> term DIVIDE factor .)
    OR              reduce using rule 66 (term -> term DIVIDE factor .)
    COLON           reduce using rule 66 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 66 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 66 (term -> term DIVIDE factor .)


state 105

    (67) term -> term MODULE factor .

    TIMES           reduce using rule 67 (term -> term MODULE factor .)
    DIVIDE          reduce using rule 67 (term -> term MODULE factor .)
    MODULE          reduce using rule 67 (term -> term MODULE factor .)
    SEMICOLON       reduce using rule 67 (term -> term MODULE factor .)
    PLUS            reduce using rule 67 (term -> term MODULE factor .)
    MINUS           reduce using rule 67 (term -> term MODULE factor .)
    RPARENTHESIS    reduce using rule 67 (term -> term MODULE factor .)
    RBRACKET        reduce using rule 67 (term -> term MODULE factor .)
    EQUALS          reduce using rule 67 (term -> term MODULE factor .)
    NOT_EQUALS      reduce using rule 67 (term -> term MODULE factor .)
    GREATER_THAN    reduce using rule 67 (term -> term MODULE factor .)
    LESS_THAN       reduce using rule 67 (term -> term MODULE factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 67 (term -> term MODULE factor .)
    LESS_THAN_OR_EQUALS reduce using rule 67 (term -> term MODULE factor .)
    AND             reduce using rule 67 (term -> term MODULE factor .)
    OR              reduce using rule 67 (term -> term MODULE factor .)
    COLON           reduce using rule 67 (term -> term MODULE factor .)
    COMMA           reduce using rule 67 (term -> term MODULE factor .)
    RBRACE          reduce using rule 67 (term -> term MODULE factor .)


state 106

    (22) declaration -> declaration_modifier varType ID .

    SEMICOLON       reduce using rule 22 (declaration -> declaration_modifier varType ID .)
    ASSIGN_OPERATOR reduce using rule 22 (declaration -> declaration_modifier varType ID .)


state 107

    (93) function -> varType ID LPARENTHESIS . parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> varType ID LPARENTHESIS . parameters RPARENTHESIS ARROW expression SEMICOLON
    (105) parameters -> . parameters COMMA parameter
    (106) parameters -> . parameter
    (107) parameters -> . empty
    (108) parameter -> . varType ID
    (116) empty -> .
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID

    RPARENTHESIS    reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    LIST_TYPE       shift and go to state 67
    MAP_TYPE        shift and go to state 68
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48

    varType                        shift and go to state 135
    parameters                     shift and go to state 136
    parameter                      shift and go to state 137
    empty                          shift and go to state 138

state 108

    (37) assignation -> ID PLUS_EQUALS expression .
    (62) expression -> expression . PLUS term
    (63) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 37 (assignation -> ID PLUS_EQUALS expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55


state 109

    (38) assignation -> ID MINUS_EQUALS expression .
    (62) expression -> expression . PLUS term
    (63) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 38 (assignation -> ID MINUS_EQUALS expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55


state 110

    (39) assignation -> ID TIMES_EQUALS expression .
    (62) expression -> expression . PLUS term
    (63) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 39 (assignation -> ID TIMES_EQUALS expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55


state 111

    (40) assignation -> ID DIVIDE_EQUALS expression .
    (62) expression -> expression . PLUS term
    (63) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 40 (assignation -> ID DIVIDE_EQUALS expression .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55


state 112

    (42) assignation -> ID ASSIGN_OPERATOR variable .

    SEMICOLON       reduce using rule 42 (assignation -> ID ASSIGN_OPERATOR variable .)


state 113

    (110) input -> ID ASSIGN_OPERATOR STDIN . DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON

    DOT             shift and go to state 139


state 114

    (70) factor -> ID DOT ID .

    TIMES           reduce using rule 70 (factor -> ID DOT ID .)
    DIVIDE          reduce using rule 70 (factor -> ID DOT ID .)
    MODULE          reduce using rule 70 (factor -> ID DOT ID .)
    SEMICOLON       reduce using rule 70 (factor -> ID DOT ID .)
    PLUS            reduce using rule 70 (factor -> ID DOT ID .)
    MINUS           reduce using rule 70 (factor -> ID DOT ID .)
    RPARENTHESIS    reduce using rule 70 (factor -> ID DOT ID .)
    RBRACKET        reduce using rule 70 (factor -> ID DOT ID .)
    EQUALS          reduce using rule 70 (factor -> ID DOT ID .)
    NOT_EQUALS      reduce using rule 70 (factor -> ID DOT ID .)
    GREATER_THAN    reduce using rule 70 (factor -> ID DOT ID .)
    LESS_THAN       reduce using rule 70 (factor -> ID DOT ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 70 (factor -> ID DOT ID .)
    LESS_THAN_OR_EQUALS reduce using rule 70 (factor -> ID DOT ID .)
    AND             reduce using rule 70 (factor -> ID DOT ID .)
    OR              reduce using rule 70 (factor -> ID DOT ID .)
    COLON           reduce using rule 70 (factor -> ID DOT ID .)
    COMMA           reduce using rule 70 (factor -> ID DOT ID .)
    RBRACE          reduce using rule 70 (factor -> ID DOT ID .)


state 115

    (69) factor -> ID LBRACKET expression . RBRACKET
    (62) expression -> expression . PLUS term
    (63) expression -> expression . MINUS term

    RBRACKET        shift and go to state 140
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55


state 116

    (25) declaration -> LIST_TYPE LESS_THAN varType . GREATER_THAN ID ASSIGN_OPERATOR list_literal

    GREATER_THAN    shift and go to state 141


state 117

    (30) declaration -> MAP_TYPE LESS_THAN varType . COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal

    COMMA           shift and go to state 142


state 118

    (36) import -> IMPORT STRING SEMICOLON .

    SEMICOLON       reduce using rule 36 (import -> IMPORT STRING SEMICOLON .)


state 119

    (72) factor -> LPARENTHESIS expression RPARENTHESIS .

    TIMES           reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    DIVIDE          reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    MODULE          reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    SEMICOLON       reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    PLUS            reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    MINUS           reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    RBRACKET        reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    EQUALS          reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    NOT_EQUALS      reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    GREATER_THAN    reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    LESS_THAN       reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    AND             reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    OR              reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    COLON           reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    COMMA           reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)
    RBRACE          reduce using rule 72 (factor -> LPARENTHESIS expression RPARENTHESIS .)


state 120

    (83) booleanExpression -> LPARENTHESIS . booleanExpression RPARENTHESIS
    (72) factor -> LPARENTHESIS . expression RPARENTHESIS
    (75) booleanExpression -> . variable EQUALS variable
    (76) booleanExpression -> . variable NOT_EQUALS variable
    (77) booleanExpression -> . variable GREATER_THAN variable
    (78) booleanExpression -> . variable LESS_THAN variable
    (79) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (80) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (81) booleanExpression -> . booleanExpression AND booleanExpression
    (82) booleanExpression -> . booleanExpression OR booleanExpression
    (83) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (84) booleanExpression -> . variable
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    LPARENTHESIS    shift and go to state 120
    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101

    booleanExpression              shift and go to state 143
    expression                     shift and go to state 144
    variable                       shift and go to state 122
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 121

    (85) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS statement
    (86) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS statement ELSE statement
    (81) booleanExpression -> booleanExpression . AND booleanExpression
    (82) booleanExpression -> booleanExpression . OR booleanExpression

    RPARENTHESIS    shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 122

    (75) booleanExpression -> variable . EQUALS variable
    (76) booleanExpression -> variable . NOT_EQUALS variable
    (77) booleanExpression -> variable . GREATER_THAN variable
    (78) booleanExpression -> variable . LESS_THAN variable
    (79) booleanExpression -> variable . GREATER_THAN_OR_EQUALS variable
    (80) booleanExpression -> variable . LESS_THAN_OR_EQUALS variable
    (84) booleanExpression -> variable .

    EQUALS          shift and go to state 148
    NOT_EQUALS      shift and go to state 149
    GREATER_THAN    shift and go to state 150
    LESS_THAN       shift and go to state 151
    GREATER_THAN_OR_EQUALS shift and go to state 152
    LESS_THAN_OR_EQUALS shift and go to state 153
    RPARENTHESIS    reduce using rule 84 (booleanExpression -> variable .)
    AND             reduce using rule 84 (booleanExpression -> variable .)
    OR              reduce using rule 84 (booleanExpression -> variable .)
    SEMICOLON       reduce using rule 84 (booleanExpression -> variable .)


state 123

    (87) while -> WHILE LPARENTHESIS booleanExpression . RPARENTHESIS LBRACE statements RBRACE
    (81) booleanExpression -> booleanExpression . AND booleanExpression
    (82) booleanExpression -> booleanExpression . OR booleanExpression

    RPARENTHESIS    shift and go to state 154
    AND             shift and go to state 146
    OR              shift and go to state 147


state 124

    (88) for -> FOR LPARENTHESIS assignation . SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> FOR LPARENTHESIS assignation . SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE

    SEMICOLON       shift and go to state 155


state 125

    (90) for -> FOR LPARENTHESIS varType . ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (24) declaration -> varType . ID

    ID              shift and go to state 156


state 126

    (37) assignation -> ID . PLUS_EQUALS expression
    (38) assignation -> ID . MINUS_EQUALS expression
    (39) assignation -> ID . TIMES_EQUALS expression
    (40) assignation -> ID . DIVIDE_EQUALS expression
    (42) assignation -> ID . ASSIGN_OPERATOR variable

    PLUS_EQUALS     shift and go to state 70
    MINUS_EQUALS    shift and go to state 71
    TIMES_EQUALS    shift and go to state 72
    DIVIDE_EQUALS   shift and go to state 73
    ASSIGN_OPERATOR shift and go to state 157


state 127

    (41) assignation -> declaration . ASSIGN_OPERATOR variable

    ASSIGN_OPERATOR shift and go to state 57


state 128

    (48) varType -> LIST_TYPE .
    (25) declaration -> LIST_TYPE . LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal

    ID              reduce using rule 48 (varType -> LIST_TYPE .)
    LESS_THAN       shift and go to state 79


state 129

    (49) varType -> MAP_TYPE .
    (30) declaration -> MAP_TYPE . LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal

    ID              reduce using rule 49 (varType -> MAP_TYPE .)
    LESS_THAN       shift and go to state 80


state 130

    (109) print -> PRINT LPARENTHESIS variable . RPARENTHESIS SEMICOLON

    RPARENTHESIS    shift and go to state 158


state 131

    (111) class_def -> CLASS ID LBRACE . class_members RBRACE
    (112) class_members -> . class_members class_member
    (113) class_members -> . class_member
    (114) class_member -> . varType ID SEMICOLON
    (115) class_member -> . function
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON

    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    LIST_TYPE       shift and go to state 67
    MAP_TYPE        shift and go to state 68
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48

    class_members                  shift and go to state 159
    class_member                   shift and go to state 160
    varType                        shift and go to state 161
    function                       shift and go to state 162

state 132

    (96) enum -> ENUM ID LBRACE . enum_values RBRACE
    (97) enum_values -> . enum_values COMMA ID
    (98) enum_values -> . ID

    ID              shift and go to state 163

    enum_values                    shift and go to state 164

state 133

    (99) try -> TRY LBRACE statements . RBRACE FINALLY LBRACE statements RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 165
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! RBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statement                      shift and go to state 51
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 134

    (100) switch -> SWITCH LPARENTHESIS variable . RPARENTHESIS LBRACE cases default_case RBRACE

    RPARENTHESIS    shift and go to state 166


state 135

    (108) parameter -> varType . ID

    ID              shift and go to state 167


state 136

    (93) function -> varType ID LPARENTHESIS parameters . RPARENTHESIS LBRACE statements RBRACE
    (94) function -> varType ID LPARENTHESIS parameters . RPARENTHESIS ARROW expression SEMICOLON
    (105) parameters -> parameters . COMMA parameter

    RPARENTHESIS    shift and go to state 168
    COMMA           shift and go to state 169


state 137

    (106) parameters -> parameter .

    RPARENTHESIS    reduce using rule 106 (parameters -> parameter .)
    COMMA           reduce using rule 106 (parameters -> parameter .)


state 138

    (107) parameters -> empty .

    RPARENTHESIS    reduce using rule 107 (parameters -> empty .)
    COMMA           reduce using rule 107 (parameters -> empty .)


state 139

    (110) input -> ID ASSIGN_OPERATOR STDIN DOT . READ LPARENTHESIS RPARENTHESIS SEMICOLON

    READ            shift and go to state 170


state 140

    (69) factor -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    MODULE          reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    RPARENTHESIS    reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    NOT_EQUALS      reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    GREATER_THAN    reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    LESS_THAN       reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    GREATER_THAN_OR_EQUALS reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    LESS_THAN_OR_EQUALS reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    COLON           reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 69 (factor -> ID LBRACKET expression RBRACKET .)


state 141

    (25) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN . ID ASSIGN_OPERATOR list_literal

    ID              shift and go to state 171


state 142

    (30) declaration -> MAP_TYPE LESS_THAN varType COMMA . varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID

    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    LIST_TYPE       shift and go to state 67
    MAP_TYPE        shift and go to state 68
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48

    varType                        shift and go to state 172

state 143

    (83) booleanExpression -> LPARENTHESIS booleanExpression . RPARENTHESIS
    (81) booleanExpression -> booleanExpression . AND booleanExpression
    (82) booleanExpression -> booleanExpression . OR booleanExpression

    RPARENTHESIS    shift and go to state 173
    AND             shift and go to state 146
    OR              shift and go to state 147


state 144

    (72) factor -> LPARENTHESIS expression . RPARENTHESIS
    (62) expression -> expression . PLUS term
    (63) expression -> expression . MINUS term
    (61) variable -> expression .

  ! shift/reduce conflict for RPARENTHESIS resolved as shift
    RPARENTHESIS    shift and go to state 119
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    EQUALS          reduce using rule 61 (variable -> expression .)
    NOT_EQUALS      reduce using rule 61 (variable -> expression .)
    GREATER_THAN    reduce using rule 61 (variable -> expression .)
    LESS_THAN       reduce using rule 61 (variable -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 61 (variable -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 61 (variable -> expression .)
    AND             reduce using rule 61 (variable -> expression .)
    OR              reduce using rule 61 (variable -> expression .)

  ! RPARENTHESIS    [ reduce using rule 61 (variable -> expression .) ]


state 145

    (85) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS . statement
    (86) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS . statement ELSE statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    ELSE            reduce using rule 116 (empty -> .)
    $end            reduce using rule 116 (empty -> .)
    RBRACE          reduce using rule 116 (empty -> .)
    BREAK           reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statement                      shift and go to state 174
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 146

    (81) booleanExpression -> booleanExpression AND . booleanExpression
    (75) booleanExpression -> . variable EQUALS variable
    (76) booleanExpression -> . variable NOT_EQUALS variable
    (77) booleanExpression -> . variable GREATER_THAN variable
    (78) booleanExpression -> . variable LESS_THAN variable
    (79) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (80) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (81) booleanExpression -> . booleanExpression AND booleanExpression
    (82) booleanExpression -> . booleanExpression OR booleanExpression
    (83) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (84) booleanExpression -> . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    LPARENTHESIS    shift and go to state 120
    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101

    booleanExpression              shift and go to state 175
    variable                       shift and go to state 122
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 147

    (82) booleanExpression -> booleanExpression OR . booleanExpression
    (75) booleanExpression -> . variable EQUALS variable
    (76) booleanExpression -> . variable NOT_EQUALS variable
    (77) booleanExpression -> . variable GREATER_THAN variable
    (78) booleanExpression -> . variable LESS_THAN variable
    (79) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (80) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (81) booleanExpression -> . booleanExpression AND booleanExpression
    (82) booleanExpression -> . booleanExpression OR booleanExpression
    (83) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (84) booleanExpression -> . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    LPARENTHESIS    shift and go to state 120
    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101

    booleanExpression              shift and go to state 176
    variable                       shift and go to state 122
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 148

    (75) booleanExpression -> variable EQUALS . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 177
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 149

    (76) booleanExpression -> variable NOT_EQUALS . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 178
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 150

    (77) booleanExpression -> variable GREATER_THAN . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 179
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 151

    (78) booleanExpression -> variable LESS_THAN . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 180
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 152

    (79) booleanExpression -> variable GREATER_THAN_OR_EQUALS . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 181
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 153

    (80) booleanExpression -> variable LESS_THAN_OR_EQUALS . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 182
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 154

    (87) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 183


state 155

    (88) for -> FOR LPARENTHESIS assignation SEMICOLON . booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> FOR LPARENTHESIS assignation SEMICOLON . booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (75) booleanExpression -> . variable EQUALS variable
    (76) booleanExpression -> . variable NOT_EQUALS variable
    (77) booleanExpression -> . variable GREATER_THAN variable
    (78) booleanExpression -> . variable LESS_THAN variable
    (79) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (80) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (81) booleanExpression -> . booleanExpression AND booleanExpression
    (82) booleanExpression -> . booleanExpression OR booleanExpression
    (83) booleanExpression -> . LPARENTHESIS booleanExpression RPARENTHESIS
    (84) booleanExpression -> . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    LPARENTHESIS    shift and go to state 120
    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101

    booleanExpression              shift and go to state 184
    variable                       shift and go to state 122
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 156

    (90) for -> FOR LPARENTHESIS varType ID . IN ID RPARENTHESIS LBRACE statements RBRACE
    (24) declaration -> varType ID .

    IN              shift and go to state 185
    ASSIGN_OPERATOR reduce using rule 24 (declaration -> varType ID .)


state 157

    (42) assignation -> ID ASSIGN_OPERATOR . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 112
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 158

    (109) print -> PRINT LPARENTHESIS variable RPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 186


state 159

    (111) class_def -> CLASS ID LBRACE class_members . RBRACE
    (112) class_members -> class_members . class_member
    (114) class_member -> . varType ID SEMICOLON
    (115) class_member -> . function
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON

    RBRACE          shift and go to state 187
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    LIST_TYPE       shift and go to state 67
    MAP_TYPE        shift and go to state 68
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48

    class_member                   shift and go to state 188
    varType                        shift and go to state 161
    function                       shift and go to state 162

state 160

    (113) class_members -> class_member .

    RBRACE          reduce using rule 113 (class_members -> class_member .)
    INT_TYPE        reduce using rule 113 (class_members -> class_member .)
    STRING_TYPE     reduce using rule 113 (class_members -> class_member .)
    NUM_TYPE        reduce using rule 113 (class_members -> class_member .)
    DOUBLE_TYPE     reduce using rule 113 (class_members -> class_member .)
    BOOL_TYPE       reduce using rule 113 (class_members -> class_member .)
    LIST_TYPE       reduce using rule 113 (class_members -> class_member .)
    MAP_TYPE        reduce using rule 113 (class_members -> class_member .)
    SET_TYPE        reduce using rule 113 (class_members -> class_member .)
    VOID            reduce using rule 113 (class_members -> class_member .)


state 161

    (114) class_member -> varType . ID SEMICOLON
    (93) function -> varType . ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> varType . ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON

    ID              shift and go to state 189


state 162

    (115) class_member -> function .

    RBRACE          reduce using rule 115 (class_member -> function .)
    INT_TYPE        reduce using rule 115 (class_member -> function .)
    STRING_TYPE     reduce using rule 115 (class_member -> function .)
    NUM_TYPE        reduce using rule 115 (class_member -> function .)
    DOUBLE_TYPE     reduce using rule 115 (class_member -> function .)
    BOOL_TYPE       reduce using rule 115 (class_member -> function .)
    LIST_TYPE       reduce using rule 115 (class_member -> function .)
    MAP_TYPE        reduce using rule 115 (class_member -> function .)
    SET_TYPE        reduce using rule 115 (class_member -> function .)
    VOID            reduce using rule 115 (class_member -> function .)


state 163

    (98) enum_values -> ID .

    RBRACE          reduce using rule 98 (enum_values -> ID .)
    COMMA           reduce using rule 98 (enum_values -> ID .)


state 164

    (96) enum -> ENUM ID LBRACE enum_values . RBRACE
    (97) enum_values -> enum_values . COMMA ID

    RBRACE          shift and go to state 190
    COMMA           shift and go to state 191


state 165

    (99) try -> TRY LBRACE statements RBRACE . FINALLY LBRACE statements RBRACE

    FINALLY         shift and go to state 192


state 166

    (100) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS . LBRACE cases default_case RBRACE

    LBRACE          shift and go to state 193


state 167

    (108) parameter -> varType ID .

    RPARENTHESIS    reduce using rule 108 (parameter -> varType ID .)
    COMMA           reduce using rule 108 (parameter -> varType ID .)


state 168

    (93) function -> varType ID LPARENTHESIS parameters RPARENTHESIS . LBRACE statements RBRACE
    (94) function -> varType ID LPARENTHESIS parameters RPARENTHESIS . ARROW expression SEMICOLON

    LBRACE          shift and go to state 194
    ARROW           shift and go to state 195


state 169

    (105) parameters -> parameters COMMA . parameter
    (108) parameter -> . varType ID
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID

    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    LIST_TYPE       shift and go to state 67
    MAP_TYPE        shift and go to state 68
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48

    parameter                      shift and go to state 196
    varType                        shift and go to state 135

state 170

    (110) input -> ID ASSIGN_OPERATOR STDIN DOT READ . LPARENTHESIS RPARENTHESIS SEMICOLON

    LPARENTHESIS    shift and go to state 197


state 171

    (25) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID . ASSIGN_OPERATOR list_literal

    ASSIGN_OPERATOR shift and go to state 198


state 172

    (30) declaration -> MAP_TYPE LESS_THAN varType COMMA varType . GREATER_THAN ID ASSIGN_OPERATOR map_literal

    GREATER_THAN    shift and go to state 199


state 173

    (83) booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .

    RPARENTHESIS    reduce using rule 83 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)
    AND             reduce using rule 83 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)
    OR              reduce using rule 83 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)
    SEMICOLON       reduce using rule 83 (booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS .)


state 174

    (85) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .
    (86) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement . ELSE statement

    LBRACE          reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    LIST_TYPE       reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    MAP_TYPE        reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    ID              reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    IMPORT          reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    IF              reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    WHILE           reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    FOR             reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    PRINT           reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    CLASS           reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    ENUM            reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    TRY             reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    SWITCH          reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    VAR             reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    CONST           reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    FINAL           reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    INT_TYPE        reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    STRING_TYPE     reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    NUM_TYPE        reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    DOUBLE_TYPE     reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    BOOL_TYPE       reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    SET_TYPE        reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    VOID            reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    LPARENTHESIS    reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    INT             reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    DOUBLE          reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    $end            reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    RBRACE          reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    BREAK           reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .)
    ELSE            shift and go to state 200

  ! ELSE            [ reduce using rule 85 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement .) ]


state 175

    (81) booleanExpression -> booleanExpression AND booleanExpression .
    (81) booleanExpression -> booleanExpression . AND booleanExpression
    (82) booleanExpression -> booleanExpression . OR booleanExpression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPARENTHESIS    reduce using rule 81 (booleanExpression -> booleanExpression AND booleanExpression .)
    SEMICOLON       reduce using rule 81 (booleanExpression -> booleanExpression AND booleanExpression .)
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! AND             [ reduce using rule 81 (booleanExpression -> booleanExpression AND booleanExpression .) ]
  ! OR              [ reduce using rule 81 (booleanExpression -> booleanExpression AND booleanExpression .) ]


state 176

    (82) booleanExpression -> booleanExpression OR booleanExpression .
    (81) booleanExpression -> booleanExpression . AND booleanExpression
    (82) booleanExpression -> booleanExpression . OR booleanExpression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPARENTHESIS    reduce using rule 82 (booleanExpression -> booleanExpression OR booleanExpression .)
    SEMICOLON       reduce using rule 82 (booleanExpression -> booleanExpression OR booleanExpression .)
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! AND             [ reduce using rule 82 (booleanExpression -> booleanExpression OR booleanExpression .) ]
  ! OR              [ reduce using rule 82 (booleanExpression -> booleanExpression OR booleanExpression .) ]


state 177

    (75) booleanExpression -> variable EQUALS variable .

    RPARENTHESIS    reduce using rule 75 (booleanExpression -> variable EQUALS variable .)
    AND             reduce using rule 75 (booleanExpression -> variable EQUALS variable .)
    OR              reduce using rule 75 (booleanExpression -> variable EQUALS variable .)
    SEMICOLON       reduce using rule 75 (booleanExpression -> variable EQUALS variable .)


state 178

    (76) booleanExpression -> variable NOT_EQUALS variable .

    RPARENTHESIS    reduce using rule 76 (booleanExpression -> variable NOT_EQUALS variable .)
    AND             reduce using rule 76 (booleanExpression -> variable NOT_EQUALS variable .)
    OR              reduce using rule 76 (booleanExpression -> variable NOT_EQUALS variable .)
    SEMICOLON       reduce using rule 76 (booleanExpression -> variable NOT_EQUALS variable .)


state 179

    (77) booleanExpression -> variable GREATER_THAN variable .

    RPARENTHESIS    reduce using rule 77 (booleanExpression -> variable GREATER_THAN variable .)
    AND             reduce using rule 77 (booleanExpression -> variable GREATER_THAN variable .)
    OR              reduce using rule 77 (booleanExpression -> variable GREATER_THAN variable .)
    SEMICOLON       reduce using rule 77 (booleanExpression -> variable GREATER_THAN variable .)


state 180

    (78) booleanExpression -> variable LESS_THAN variable .

    RPARENTHESIS    reduce using rule 78 (booleanExpression -> variable LESS_THAN variable .)
    AND             reduce using rule 78 (booleanExpression -> variable LESS_THAN variable .)
    OR              reduce using rule 78 (booleanExpression -> variable LESS_THAN variable .)
    SEMICOLON       reduce using rule 78 (booleanExpression -> variable LESS_THAN variable .)


state 181

    (79) booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 79 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    AND             reduce using rule 79 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    OR              reduce using rule 79 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)
    SEMICOLON       reduce using rule 79 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)


state 182

    (80) booleanExpression -> variable LESS_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 80 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    AND             reduce using rule 80 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    OR              reduce using rule 80 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)
    SEMICOLON       reduce using rule 80 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)


state 183

    (87) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    RBRACE          reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statements                     shift and go to state 201
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 184

    (88) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression . SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression . SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (81) booleanExpression -> booleanExpression . AND booleanExpression
    (82) booleanExpression -> booleanExpression . OR booleanExpression

    SEMICOLON       shift and go to state 202
    AND             shift and go to state 146
    OR              shift and go to state 147


state 185

    (90) for -> FOR LPARENTHESIS varType ID IN . ID RPARENTHESIS LBRACE statements RBRACE

    ID              shift and go to state 203


state 186

    (109) print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .

    LBRACE          reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    LIST_TYPE       reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    MAP_TYPE        reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    ID              reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    IMPORT          reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    IF              reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    ENUM            reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    TRY             reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    VAR             reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    CONST           reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    INT_TYPE        reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    STRING_TYPE     reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    NUM_TYPE        reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    BOOL_TYPE       reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    SET_TYPE        reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    VOID            reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    LPARENTHESIS    reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    INT             reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    DOUBLE          reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    $end            reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    RBRACE          reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 109 (print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON .)


state 187

    (111) class_def -> CLASS ID LBRACE class_members RBRACE .

    LBRACE          reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    LIST_TYPE       reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    MAP_TYPE        reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    ID              reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    IMPORT          reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    IF              reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    WHILE           reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    FOR             reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    PRINT           reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    CLASS           reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    ENUM            reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    TRY             reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    SWITCH          reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    VAR             reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    CONST           reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    FINAL           reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    INT_TYPE        reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    STRING_TYPE     reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    NUM_TYPE        reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    DOUBLE_TYPE     reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    BOOL_TYPE       reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    SET_TYPE        reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    VOID            reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    LPARENTHESIS    reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    INT             reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    DOUBLE          reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    $end            reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    RBRACE          reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    ELSE            reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)
    BREAK           reduce using rule 111 (class_def -> CLASS ID LBRACE class_members RBRACE .)


state 188

    (112) class_members -> class_members class_member .

    RBRACE          reduce using rule 112 (class_members -> class_members class_member .)
    INT_TYPE        reduce using rule 112 (class_members -> class_members class_member .)
    STRING_TYPE     reduce using rule 112 (class_members -> class_members class_member .)
    NUM_TYPE        reduce using rule 112 (class_members -> class_members class_member .)
    DOUBLE_TYPE     reduce using rule 112 (class_members -> class_members class_member .)
    BOOL_TYPE       reduce using rule 112 (class_members -> class_members class_member .)
    LIST_TYPE       reduce using rule 112 (class_members -> class_members class_member .)
    MAP_TYPE        reduce using rule 112 (class_members -> class_members class_member .)
    SET_TYPE        reduce using rule 112 (class_members -> class_members class_member .)
    VOID            reduce using rule 112 (class_members -> class_members class_member .)


state 189

    (114) class_member -> varType ID . SEMICOLON
    (93) function -> varType ID . LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> varType ID . LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON

    SEMICOLON       shift and go to state 204
    LPARENTHESIS    shift and go to state 107


state 190

    (96) enum -> ENUM ID LBRACE enum_values RBRACE .

    LBRACE          reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    LIST_TYPE       reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    MAP_TYPE        reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    ID              reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    IMPORT          reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    IF              reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    WHILE           reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    FOR             reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    PRINT           reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    CLASS           reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    ENUM            reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    TRY             reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    SWITCH          reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    VAR             reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    CONST           reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    FINAL           reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    INT_TYPE        reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    STRING_TYPE     reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    NUM_TYPE        reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    DOUBLE_TYPE     reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    BOOL_TYPE       reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    SET_TYPE        reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    VOID            reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    LPARENTHESIS    reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    INT             reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    DOUBLE          reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    $end            reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    RBRACE          reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    ELSE            reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)
    BREAK           reduce using rule 96 (enum -> ENUM ID LBRACE enum_values RBRACE .)


state 191

    (97) enum_values -> enum_values COMMA . ID

    ID              shift and go to state 205


state 192

    (99) try -> TRY LBRACE statements RBRACE FINALLY . LBRACE statements RBRACE

    LBRACE          shift and go to state 206


state 193

    (100) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE . cases default_case RBRACE
    (101) cases -> . cases case
    (102) cases -> . case
    (103) case -> . CASE variable COLON statements BREAK SEMICOLON

    CASE            shift and go to state 209

    cases                          shift and go to state 207
    case                           shift and go to state 208

state 194

    (93) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    RBRACE          reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    varType                        shift and go to state 24
    statements                     shift and go to state 210
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    factor                         shift and go to state 38

state 195

    (94) function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW . expression SEMICOLON
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    ID              shift and go to state 83
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

    expression                     shift and go to state 211
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 196

    (105) parameters -> parameters COMMA parameter .

    RPARENTHESIS    reduce using rule 105 (parameters -> parameters COMMA parameter .)
    COMMA           reduce using rule 105 (parameters -> parameters COMMA parameter .)


state 197

    (110) input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS . RPARENTHESIS SEMICOLON

    RPARENTHESIS    shift and go to state 212


state 198

    (25) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR . list_literal
    (26) list_literal -> . LBRACKET list_elements RBRACKET

    LBRACKET        shift and go to state 214

    list_literal                   shift and go to state 213

state 199

    (30) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN . ID ASSIGN_OPERATOR map_literal

    ID              shift and go to state 215


state 200

    (86) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    ELSE            reduce using rule 116 (empty -> .)
    $end            reduce using rule 116 (empty -> .)
    RBRACE          reduce using rule 116 (empty -> .)
    BREAK           reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statement                      shift and go to state 216
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 201

    (87) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 217
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! RBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statement                      shift and go to state 51
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 202

    (88) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON . increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON . decrement RPARENTHESIS LBRACE statements RBRACE
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT

    ID              shift and go to state 220

    increment                      shift and go to state 218
    decrement                      shift and go to state 219

state 203

    (90) for -> FOR LPARENTHESIS varType ID IN ID . RPARENTHESIS LBRACE statements RBRACE

    RPARENTHESIS    shift and go to state 221


state 204

    (114) class_member -> varType ID SEMICOLON .

    RBRACE          reduce using rule 114 (class_member -> varType ID SEMICOLON .)
    INT_TYPE        reduce using rule 114 (class_member -> varType ID SEMICOLON .)
    STRING_TYPE     reduce using rule 114 (class_member -> varType ID SEMICOLON .)
    NUM_TYPE        reduce using rule 114 (class_member -> varType ID SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 114 (class_member -> varType ID SEMICOLON .)
    BOOL_TYPE       reduce using rule 114 (class_member -> varType ID SEMICOLON .)
    LIST_TYPE       reduce using rule 114 (class_member -> varType ID SEMICOLON .)
    MAP_TYPE        reduce using rule 114 (class_member -> varType ID SEMICOLON .)
    SET_TYPE        reduce using rule 114 (class_member -> varType ID SEMICOLON .)
    VOID            reduce using rule 114 (class_member -> varType ID SEMICOLON .)


state 205

    (97) enum_values -> enum_values COMMA ID .

    RBRACE          reduce using rule 97 (enum_values -> enum_values COMMA ID .)
    COMMA           reduce using rule 97 (enum_values -> enum_values COMMA ID .)


state 206

    (99) try -> TRY LBRACE statements RBRACE FINALLY LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    RBRACE          reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statements                     shift and go to state 222
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 207

    (100) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases . default_case RBRACE
    (101) cases -> cases . case
    (104) default_case -> . DEFAULT COLON statements
    (103) case -> . CASE variable COLON statements BREAK SEMICOLON

    DEFAULT         shift and go to state 225
    CASE            shift and go to state 209

    default_case                   shift and go to state 223
    case                           shift and go to state 224

state 208

    (102) cases -> case .

    DEFAULT         reduce using rule 102 (cases -> case .)
    CASE            reduce using rule 102 (cases -> case .)


state 209

    (103) case -> CASE . variable COLON statements BREAK SEMICOLON
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 226
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 210

    (93) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 227
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! RBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    varType                        shift and go to state 24
    statement                      shift and go to state 51
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    factor                         shift and go to state 38

state 211

    (94) function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression . SEMICOLON
    (62) expression -> expression . PLUS term
    (63) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 228
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55


state 212

    (110) input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 229


state 213

    (25) declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .

    SEMICOLON       reduce using rule 25 (declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)
    ASSIGN_OPERATOR reduce using rule 25 (declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal .)


state 214

    (26) list_literal -> LBRACKET . list_elements RBRACKET
    (27) list_elements -> . list_elements COMMA variable
    (28) list_elements -> . variable
    (29) list_elements -> . empty
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (116) empty -> .
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    RBRACKET        reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    LPARENTHESIS    shift and go to state 29

    list_elements                  shift and go to state 230
    variable                       shift and go to state 231
    empty                          shift and go to state 232
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 215

    (30) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID . ASSIGN_OPERATOR map_literal

    ASSIGN_OPERATOR shift and go to state 233


state 216

    (86) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .

    LBRACE          reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LIST_TYPE       reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    MAP_TYPE        reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ID              reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    IMPORT          reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    IF              reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    WHILE           reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    FOR             reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    PRINT           reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CLASS           reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ENUM            reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    TRY             reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    SWITCH          reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    VAR             reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    CONST           reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    FINAL           reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    INT_TYPE        reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    STRING_TYPE     reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    NUM_TYPE        reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DOUBLE_TYPE     reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    BOOL_TYPE       reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    SET_TYPE        reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    VOID            reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    LPARENTHESIS    reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    INT             reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    DOUBLE          reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    $end            reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    RBRACE          reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    ELSE            reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)
    BREAK           reduce using rule 86 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement .)


state 217

    (87) while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 87 (while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE .)


state 218

    (88) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment . RPARENTHESIS LBRACE statements RBRACE

    RPARENTHESIS    shift and go to state 234


state 219

    (89) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement . RPARENTHESIS LBRACE statements RBRACE

    RPARENTHESIS    shift and go to state 235


state 220

    (91) increment -> ID . INCREMENT
    (92) decrement -> ID . DECREMENT

    INCREMENT       shift and go to state 75
    DECREMENT       shift and go to state 76


state 221

    (90) for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 236


state 222

    (99) try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 237
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! RBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statement                      shift and go to state 51
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 223

    (100) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case . RBRACE

    RBRACE          shift and go to state 238


state 224

    (101) cases -> cases case .

    DEFAULT         reduce using rule 101 (cases -> cases case .)
    CASE            reduce using rule 101 (cases -> cases case .)


state 225

    (104) default_case -> DEFAULT . COLON statements

    COLON           shift and go to state 239


state 226

    (103) case -> CASE variable . COLON statements BREAK SEMICOLON

    COLON           shift and go to state 240


state 227

    (93) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 93 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE .)


state 228

    (94) function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .

    LBRACE          reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    LIST_TYPE       reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    MAP_TYPE        reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    ID              reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    IMPORT          reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    IF              reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    WHILE           reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    FOR             reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    PRINT           reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    CLASS           reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    ENUM            reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    TRY             reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    SWITCH          reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    VAR             reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    CONST           reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    FINAL           reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    INT_TYPE        reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    STRING_TYPE     reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    NUM_TYPE        reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    BOOL_TYPE       reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    SET_TYPE        reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    VOID            reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    LPARENTHESIS    reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    INT             reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    DOUBLE          reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    $end            reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    RBRACE          reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    ELSE            reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)
    BREAK           reduce using rule 94 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON .)


state 229

    (110) input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .

    LBRACE          reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    LIST_TYPE       reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    MAP_TYPE        reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    ID              reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    IMPORT          reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    IF              reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    ENUM            reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    TRY             reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    VAR             reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    CONST           reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    INT_TYPE        reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    STRING_TYPE     reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    NUM_TYPE        reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    BOOL_TYPE       reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    SET_TYPE        reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    VOID            reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    LPARENTHESIS    reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    INT             reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    DOUBLE          reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    $end            reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    RBRACE          reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 110 (input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON .)


state 230

    (26) list_literal -> LBRACKET list_elements . RBRACKET
    (27) list_elements -> list_elements . COMMA variable

    RBRACKET        shift and go to state 241
    COMMA           shift and go to state 242


state 231

    (28) list_elements -> variable .

    RBRACKET        reduce using rule 28 (list_elements -> variable .)
    COMMA           reduce using rule 28 (list_elements -> variable .)


state 232

    (29) list_elements -> empty .

    RBRACKET        reduce using rule 29 (list_elements -> empty .)
    COMMA           reduce using rule 29 (list_elements -> empty .)


state 233

    (30) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR . map_literal
    (31) map_literal -> . LBRACE map_elements RBRACE

    LBRACE          shift and go to state 244

    map_literal                    shift and go to state 243

state 234

    (88) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 245


state 235

    (89) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS . LBRACE statements RBRACE

    LBRACE          shift and go to state 246


state 236

    (90) for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    RBRACE          reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    varType                        shift and go to state 24
    statements                     shift and go to state 247
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    factor                         shift and go to state 38

state 237

    (99) try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .

    LBRACE          reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    ID              reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    IMPORT          reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    IF              reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    WHILE           reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    FOR             reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    PRINT           reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    CLASS           reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    ENUM            reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    TRY             reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    SWITCH          reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    VAR             reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    CONST           reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    FINAL           reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    VOID            reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    INT             reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    $end            reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    RBRACE          reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    ELSE            reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)
    BREAK           reduce using rule 99 (try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE .)


state 238

    (100) switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .

    LBRACE          reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    LIST_TYPE       reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    MAP_TYPE        reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    ID              reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    IMPORT          reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    IF              reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    WHILE           reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    FOR             reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    PRINT           reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    CLASS           reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    ENUM            reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    TRY             reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    SWITCH          reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    VAR             reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    CONST           reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    FINAL           reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    INT_TYPE        reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    STRING_TYPE     reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    NUM_TYPE        reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    DOUBLE_TYPE     reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    BOOL_TYPE       reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    SET_TYPE        reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    VOID            reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    LPARENTHESIS    reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    INT             reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    DOUBLE          reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    $end            reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    RBRACE          reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    ELSE            reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)
    BREAK           reduce using rule 100 (switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE .)


state 239

    (104) default_case -> DEFAULT COLON . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    RBRACE          reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statements                     shift and go to state 248
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 240

    (103) case -> CASE variable COLON . statements BREAK SEMICOLON
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    BREAK           reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statements                     shift and go to state 249
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 241

    (26) list_literal -> LBRACKET list_elements RBRACKET .

    SEMICOLON       reduce using rule 26 (list_literal -> LBRACKET list_elements RBRACKET .)
    ASSIGN_OPERATOR reduce using rule 26 (list_literal -> LBRACKET list_elements RBRACKET .)


state 242

    (27) list_elements -> list_elements COMMA . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 250
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 243

    (30) declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .

    SEMICOLON       reduce using rule 30 (declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)
    ASSIGN_OPERATOR reduce using rule 30 (declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal .)


state 244

    (31) map_literal -> LBRACE . map_elements RBRACE
    (32) map_elements -> . map_elements COMMA map_pair
    (33) map_elements -> . map_pair
    (34) map_elements -> . empty
    (35) map_pair -> . variable COLON variable
    (116) empty -> .
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    RBRACE          reduce using rule 116 (empty -> .)
    COMMA           reduce using rule 116 (empty -> .)
    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    map_elements                   shift and go to state 251
    map_pair                       shift and go to state 252
    empty                          shift and go to state 253
    variable                       shift and go to state 254
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 245

    (88) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    RBRACE          reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    statements                     shift and go to state 255
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 246

    (89) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE . statements RBRACE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    RBRACE          reduce using rule 116 (empty -> .)
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    assignation                    shift and go to state 7
    decrement                      shift and go to state 9
    statements                     shift and go to state 256
    statement                      shift and go to state 3
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    increment                      shift and go to state 8
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 247

    (90) for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 257
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! RBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    varType                        shift and go to state 24
    statement                      shift and go to state 51
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    factor                         shift and go to state 38

state 248

    (104) default_case -> DEFAULT COLON statements .
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! reduce/reduce conflict for RBRACE resolved using rule 104 (default_case -> DEFAULT COLON statements .)
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          reduce using rule 104 (default_case -> DEFAULT COLON statements .)
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]
  ! RBRACE          [ reduce using rule 116 (empty -> .) ]

    statement                      shift and go to state 51
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 249

    (103) case -> CASE variable COLON statements . BREAK SEMICOLON
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    BREAK           shift and go to state 258
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! BREAK           [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    statement                      shift and go to state 51
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 250

    (27) list_elements -> list_elements COMMA variable .

    RBRACKET        reduce using rule 27 (list_elements -> list_elements COMMA variable .)
    COMMA           reduce using rule 27 (list_elements -> list_elements COMMA variable .)


state 251

    (31) map_literal -> LBRACE map_elements . RBRACE
    (32) map_elements -> map_elements . COMMA map_pair

    RBRACE          shift and go to state 259
    COMMA           shift and go to state 260


state 252

    (33) map_elements -> map_pair .

    RBRACE          reduce using rule 33 (map_elements -> map_pair .)
    COMMA           reduce using rule 33 (map_elements -> map_pair .)


state 253

    (34) map_elements -> empty .

    RBRACE          reduce using rule 34 (map_elements -> empty .)
    COMMA           reduce using rule 34 (map_elements -> empty .)


state 254

    (35) map_pair -> variable . COLON variable

    COLON           shift and go to state 261


state 255

    (88) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 262
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! RBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    assignation                    shift and go to state 7
    increment                      shift and go to state 8
    statement                      shift and go to state 51
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    decrement                      shift and go to state 9
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 256

    (89) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements . RBRACE
    (2) statements -> statements . statement
    (4) statement -> . LBRACE statements RBRACE
    (5) statement -> . expression SEMICOLON
    (6) statement -> . declaration SEMICOLON
    (7) statement -> . assignation SEMICOLON
    (8) statement -> . increment SEMICOLON
    (9) statement -> . decrement SEMICOLON
    (10) statement -> . import SEMICOLON
    (11) statement -> . function
    (12) statement -> . if
    (13) statement -> . while
    (14) statement -> . for
    (15) statement -> . print
    (16) statement -> . input
    (17) statement -> . class_def
    (18) statement -> . enum
    (19) statement -> . try
    (20) statement -> . switch
    (21) statement -> . empty
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (22) declaration -> . declaration_modifier varType ID
    (23) declaration -> . declaration_modifier ID
    (24) declaration -> . varType ID
    (25) declaration -> . LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal
    (30) declaration -> . MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal
    (37) assignation -> . ID PLUS_EQUALS expression
    (38) assignation -> . ID MINUS_EQUALS expression
    (39) assignation -> . ID TIMES_EQUALS expression
    (40) assignation -> . ID DIVIDE_EQUALS expression
    (41) assignation -> . declaration ASSIGN_OPERATOR variable
    (42) assignation -> . ID ASSIGN_OPERATOR variable
    (91) increment -> . ID INCREMENT
    (92) decrement -> . ID DECREMENT
    (36) import -> . IMPORT STRING SEMICOLON
    (93) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE
    (94) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON
    (85) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement
    (86) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement
    (87) while -> . WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE
    (88) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE
    (89) for -> . FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE
    (90) for -> . FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE
    (109) print -> . PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON
    (110) input -> . ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON
    (111) class_def -> . CLASS ID LBRACE class_members RBRACE
    (96) enum -> . ENUM ID LBRACE enum_values RBRACE
    (99) try -> . TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE
    (100) switch -> . SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE
    (116) empty -> .
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (52) declaration_modifier -> . VAR
    (53) declaration_modifier -> . CONST
    (54) declaration_modifier -> . FINAL
    (43) varType -> . INT_TYPE
    (44) varType -> . STRING_TYPE
    (45) varType -> . NUM_TYPE
    (46) varType -> . DOUBLE_TYPE
    (47) varType -> . BOOL_TYPE
    (48) varType -> . LIST_TYPE
    (49) varType -> . MAP_TYPE
    (50) varType -> . SET_TYPE
    (51) varType -> . VOID
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LIST_TYPE resolved as shift
  ! shift/reduce conflict for MAP_TYPE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for NUM_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
  ! shift/reduce conflict for SET_TYPE resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPARENTHESIS resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    RBRACE          shift and go to state 263
    LBRACE          shift and go to state 4
    LIST_TYPE       shift and go to state 26
    MAP_TYPE        shift and go to state 27
    ID              shift and go to state 25
    IMPORT          shift and go to state 28
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    PRINT           shift and go to state 33
    CLASS           shift and go to state 34
    ENUM            shift and go to state 35
    TRY             shift and go to state 36
    SWITCH          shift and go to state 37
    VAR             shift and go to state 39
    CONST           shift and go to state 40
    FINAL           shift and go to state 41
    INT_TYPE        shift and go to state 42
    STRING_TYPE     shift and go to state 43
    NUM_TYPE        shift and go to state 44
    DOUBLE_TYPE     shift and go to state 45
    BOOL_TYPE       shift and go to state 46
    SET_TYPE        shift and go to state 47
    VOID            shift and go to state 48
    LPARENTHESIS    shift and go to state 29
    INT             shift and go to state 49
    DOUBLE          shift and go to state 50

  ! RBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LBRACE          [ reduce using rule 116 (empty -> .) ]
  ! LIST_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! MAP_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! ID              [ reduce using rule 116 (empty -> .) ]
  ! IMPORT          [ reduce using rule 116 (empty -> .) ]
  ! IF              [ reduce using rule 116 (empty -> .) ]
  ! WHILE           [ reduce using rule 116 (empty -> .) ]
  ! FOR             [ reduce using rule 116 (empty -> .) ]
  ! PRINT           [ reduce using rule 116 (empty -> .) ]
  ! CLASS           [ reduce using rule 116 (empty -> .) ]
  ! ENUM            [ reduce using rule 116 (empty -> .) ]
  ! TRY             [ reduce using rule 116 (empty -> .) ]
  ! SWITCH          [ reduce using rule 116 (empty -> .) ]
  ! VAR             [ reduce using rule 116 (empty -> .) ]
  ! CONST           [ reduce using rule 116 (empty -> .) ]
  ! FINAL           [ reduce using rule 116 (empty -> .) ]
  ! INT_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! STRING_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! NUM_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE_TYPE     [ reduce using rule 116 (empty -> .) ]
  ! BOOL_TYPE       [ reduce using rule 116 (empty -> .) ]
  ! SET_TYPE        [ reduce using rule 116 (empty -> .) ]
  ! VOID            [ reduce using rule 116 (empty -> .) ]
  ! LPARENTHESIS    [ reduce using rule 116 (empty -> .) ]
  ! INT             [ reduce using rule 116 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 116 (empty -> .) ]

    assignation                    shift and go to state 7
    decrement                      shift and go to state 9
    statement                      shift and go to state 51
    expression                     shift and go to state 5
    declaration                    shift and go to state 6
    increment                      shift and go to state 8
    import                         shift and go to state 10
    function                       shift and go to state 11
    if                             shift and go to state 12
    while                          shift and go to state 13
    for                            shift and go to state 14
    print                          shift and go to state 15
    input                          shift and go to state 16
    class_def                      shift and go to state 17
    enum                           shift and go to state 18
    try                            shift and go to state 19
    switch                         shift and go to state 20
    empty                          shift and go to state 21
    term                           shift and go to state 22
    declaration_modifier           shift and go to state 23
    varType                        shift and go to state 24
    factor                         shift and go to state 38

state 257

    (90) for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 90 (for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE .)


state 258

    (103) case -> CASE variable COLON statements BREAK . SEMICOLON

    SEMICOLON       shift and go to state 264


state 259

    (31) map_literal -> LBRACE map_elements RBRACE .

    SEMICOLON       reduce using rule 31 (map_literal -> LBRACE map_elements RBRACE .)
    ASSIGN_OPERATOR reduce using rule 31 (map_literal -> LBRACE map_elements RBRACE .)


state 260

    (32) map_elements -> map_elements COMMA . map_pair
    (35) map_pair -> . variable COLON variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    map_pair                       shift and go to state 265
    variable                       shift and go to state 254
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 261

    (35) map_pair -> variable COLON . variable
    (55) variable -> . INT
    (56) variable -> . DOUBLE
    (57) variable -> . STRING
    (58) variable -> . BOOL
    (59) variable -> . NULL
    (60) variable -> . ID
    (61) variable -> . expression
    (62) expression -> . expression PLUS term
    (63) expression -> . expression MINUS term
    (64) expression -> . term
    (65) term -> . term TIMES factor
    (66) term -> . term DIVIDE factor
    (67) term -> . term MODULE factor
    (68) term -> . factor
    (69) factor -> . ID LBRACKET expression RBRACKET
    (70) factor -> . ID DOT ID
    (71) factor -> . ID
    (72) factor -> . LPARENTHESIS expression RPARENTHESIS
    (73) factor -> . INT
    (74) factor -> . DOUBLE

    INT             shift and go to state 96
    DOUBLE          shift and go to state 97
    STRING          shift and go to state 98
    BOOL            shift and go to state 99
    NULL            shift and go to state 100
    ID              shift and go to state 101
    LPARENTHESIS    shift and go to state 29

    variable                       shift and go to state 266
    expression                     shift and go to state 102
    term                           shift and go to state 22
    factor                         shift and go to state 38

state 262

    (88) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 88 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE .)


state 263

    (89) for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .

    LBRACE          reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    LIST_TYPE       reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    MAP_TYPE        reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    ID              reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    IMPORT          reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    IF              reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    WHILE           reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    FOR             reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    PRINT           reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    CLASS           reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    ENUM            reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    TRY             reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    SWITCH          reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    VAR             reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    CONST           reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    FINAL           reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    INT_TYPE        reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    STRING_TYPE     reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    NUM_TYPE        reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE_TYPE     reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    BOOL_TYPE       reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    SET_TYPE        reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    VOID            reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    LPARENTHESIS    reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    INT             reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    DOUBLE          reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    $end            reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    RBRACE          reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    ELSE            reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)
    BREAK           reduce using rule 89 (for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE .)


state 264

    (103) case -> CASE variable COLON statements BREAK SEMICOLON .

    DEFAULT         reduce using rule 103 (case -> CASE variable COLON statements BREAK SEMICOLON .)
    CASE            reduce using rule 103 (case -> CASE variable COLON statements BREAK SEMICOLON .)


state 265

    (32) map_elements -> map_elements COMMA map_pair .

    RBRACE          reduce using rule 32 (map_elements -> map_elements COMMA map_pair .)
    COMMA           reduce using rule 32 (map_elements -> map_elements COMMA map_pair .)


state 266

    (35) map_pair -> variable COLON variable .

    RBRACE          reduce using rule 35 (map_pair -> variable COLON variable .)
    COMMA           reduce using rule 35 (map_pair -> variable COLON variable .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACE in state 0 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 0 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 0 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 2 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 2 resolved as shift
WARNING: shift/reduce conflict for TRY in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 2 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 2 resolved as shift
WARNING: shift/reduce conflict for VOID in state 2 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 2 resolved as shift
WARNING: shift/reduce conflict for INT in state 2 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 2 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 4 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 4 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 4 resolved as shift
WARNING: shift/reduce conflict for TRY in state 4 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 4 resolved as shift
WARNING: shift/reduce conflict for VAR in state 4 resolved as shift
WARNING: shift/reduce conflict for CONST in state 4 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 4 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for VOID in state 4 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 4 resolved as shift
WARNING: shift/reduce conflict for INT in state 4 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 4 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 52 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 52 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 52 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 52 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 52 resolved as shift
WARNING: shift/reduce conflict for TRY in state 52 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 52 resolved as shift
WARNING: shift/reduce conflict for VAR in state 52 resolved as shift
WARNING: shift/reduce conflict for CONST in state 52 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 52 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for VOID in state 52 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 52 resolved as shift
WARNING: shift/reduce conflict for INT in state 52 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 52 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 90 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 90 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for FOR in state 90 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 90 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 90 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 90 resolved as shift
WARNING: shift/reduce conflict for TRY in state 90 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 90 resolved as shift
WARNING: shift/reduce conflict for VAR in state 90 resolved as shift
WARNING: shift/reduce conflict for CONST in state 90 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 90 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 90 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 90 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 90 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 90 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 90 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 90 resolved as shift
WARNING: shift/reduce conflict for VOID in state 90 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 90 resolved as shift
WARNING: shift/reduce conflict for INT in state 90 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 90 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 133 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 133 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 133 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 133 resolved as shift
WARNING: shift/reduce conflict for IF in state 133 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 133 resolved as shift
WARNING: shift/reduce conflict for FOR in state 133 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 133 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 133 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 133 resolved as shift
WARNING: shift/reduce conflict for TRY in state 133 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 133 resolved as shift
WARNING: shift/reduce conflict for VAR in state 133 resolved as shift
WARNING: shift/reduce conflict for CONST in state 133 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 133 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 133 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 133 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 133 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 133 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 133 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 133 resolved as shift
WARNING: shift/reduce conflict for VOID in state 133 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 133 resolved as shift
WARNING: shift/reduce conflict for INT in state 133 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 133 resolved as shift
WARNING: shift/reduce conflict for RPARENTHESIS in state 144 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 145 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 145 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 145 resolved as shift
WARNING: shift/reduce conflict for ID in state 145 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 145 resolved as shift
WARNING: shift/reduce conflict for IF in state 145 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 145 resolved as shift
WARNING: shift/reduce conflict for FOR in state 145 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 145 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 145 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 145 resolved as shift
WARNING: shift/reduce conflict for TRY in state 145 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 145 resolved as shift
WARNING: shift/reduce conflict for VAR in state 145 resolved as shift
WARNING: shift/reduce conflict for CONST in state 145 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 145 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 145 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 145 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 145 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 145 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 145 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 145 resolved as shift
WARNING: shift/reduce conflict for VOID in state 145 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 145 resolved as shift
WARNING: shift/reduce conflict for INT in state 145 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 145 resolved as shift
WARNING: shift/reduce conflict for AND in state 175 resolved as shift
WARNING: shift/reduce conflict for OR in state 175 resolved as shift
WARNING: shift/reduce conflict for AND in state 176 resolved as shift
WARNING: shift/reduce conflict for OR in state 176 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 183 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 183 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 183 resolved as shift
WARNING: shift/reduce conflict for ID in state 183 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 183 resolved as shift
WARNING: shift/reduce conflict for IF in state 183 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 183 resolved as shift
WARNING: shift/reduce conflict for FOR in state 183 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 183 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 183 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 183 resolved as shift
WARNING: shift/reduce conflict for TRY in state 183 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 183 resolved as shift
WARNING: shift/reduce conflict for VAR in state 183 resolved as shift
WARNING: shift/reduce conflict for CONST in state 183 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 183 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 183 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 183 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 183 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 183 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 183 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 183 resolved as shift
WARNING: shift/reduce conflict for VOID in state 183 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 183 resolved as shift
WARNING: shift/reduce conflict for INT in state 183 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 183 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 194 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 194 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 194 resolved as shift
WARNING: shift/reduce conflict for ID in state 194 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 194 resolved as shift
WARNING: shift/reduce conflict for IF in state 194 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 194 resolved as shift
WARNING: shift/reduce conflict for FOR in state 194 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 194 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 194 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 194 resolved as shift
WARNING: shift/reduce conflict for TRY in state 194 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 194 resolved as shift
WARNING: shift/reduce conflict for VAR in state 194 resolved as shift
WARNING: shift/reduce conflict for CONST in state 194 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 194 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 194 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 194 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 194 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 194 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 194 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 194 resolved as shift
WARNING: shift/reduce conflict for VOID in state 194 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 194 resolved as shift
WARNING: shift/reduce conflict for INT in state 194 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 194 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 200 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 200 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 200 resolved as shift
WARNING: shift/reduce conflict for ID in state 200 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 200 resolved as shift
WARNING: shift/reduce conflict for IF in state 200 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 200 resolved as shift
WARNING: shift/reduce conflict for FOR in state 200 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 200 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 200 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 200 resolved as shift
WARNING: shift/reduce conflict for TRY in state 200 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 200 resolved as shift
WARNING: shift/reduce conflict for VAR in state 200 resolved as shift
WARNING: shift/reduce conflict for CONST in state 200 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 200 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 200 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 200 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 200 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 200 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 200 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 200 resolved as shift
WARNING: shift/reduce conflict for VOID in state 200 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 200 resolved as shift
WARNING: shift/reduce conflict for INT in state 200 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 200 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 201 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 201 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 201 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 201 resolved as shift
WARNING: shift/reduce conflict for ID in state 201 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 201 resolved as shift
WARNING: shift/reduce conflict for IF in state 201 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 201 resolved as shift
WARNING: shift/reduce conflict for FOR in state 201 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 201 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 201 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 201 resolved as shift
WARNING: shift/reduce conflict for TRY in state 201 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 201 resolved as shift
WARNING: shift/reduce conflict for VAR in state 201 resolved as shift
WARNING: shift/reduce conflict for CONST in state 201 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 201 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 201 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 201 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 201 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 201 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 201 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 201 resolved as shift
WARNING: shift/reduce conflict for VOID in state 201 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 201 resolved as shift
WARNING: shift/reduce conflict for INT in state 201 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 201 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 206 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 206 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 206 resolved as shift
WARNING: shift/reduce conflict for ID in state 206 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 206 resolved as shift
WARNING: shift/reduce conflict for IF in state 206 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 206 resolved as shift
WARNING: shift/reduce conflict for FOR in state 206 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 206 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 206 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 206 resolved as shift
WARNING: shift/reduce conflict for TRY in state 206 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 206 resolved as shift
WARNING: shift/reduce conflict for VAR in state 206 resolved as shift
WARNING: shift/reduce conflict for CONST in state 206 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 206 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 206 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 206 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 206 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 206 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 206 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 206 resolved as shift
WARNING: shift/reduce conflict for VOID in state 206 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 206 resolved as shift
WARNING: shift/reduce conflict for INT in state 206 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 206 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 210 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 210 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 210 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 210 resolved as shift
WARNING: shift/reduce conflict for ID in state 210 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 210 resolved as shift
WARNING: shift/reduce conflict for IF in state 210 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 210 resolved as shift
WARNING: shift/reduce conflict for FOR in state 210 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 210 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 210 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 210 resolved as shift
WARNING: shift/reduce conflict for TRY in state 210 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 210 resolved as shift
WARNING: shift/reduce conflict for VAR in state 210 resolved as shift
WARNING: shift/reduce conflict for CONST in state 210 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 210 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 210 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 210 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 210 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 210 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 210 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 210 resolved as shift
WARNING: shift/reduce conflict for VOID in state 210 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 210 resolved as shift
WARNING: shift/reduce conflict for INT in state 210 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 210 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 222 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 222 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 222 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 222 resolved as shift
WARNING: shift/reduce conflict for ID in state 222 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 222 resolved as shift
WARNING: shift/reduce conflict for IF in state 222 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 222 resolved as shift
WARNING: shift/reduce conflict for FOR in state 222 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 222 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 222 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 222 resolved as shift
WARNING: shift/reduce conflict for TRY in state 222 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 222 resolved as shift
WARNING: shift/reduce conflict for VAR in state 222 resolved as shift
WARNING: shift/reduce conflict for CONST in state 222 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 222 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 222 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 222 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 222 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 222 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 222 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 222 resolved as shift
WARNING: shift/reduce conflict for VOID in state 222 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 222 resolved as shift
WARNING: shift/reduce conflict for INT in state 222 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 222 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 236 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 236 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 236 resolved as shift
WARNING: shift/reduce conflict for ID in state 236 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 236 resolved as shift
WARNING: shift/reduce conflict for IF in state 236 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 236 resolved as shift
WARNING: shift/reduce conflict for FOR in state 236 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 236 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 236 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 236 resolved as shift
WARNING: shift/reduce conflict for TRY in state 236 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 236 resolved as shift
WARNING: shift/reduce conflict for VAR in state 236 resolved as shift
WARNING: shift/reduce conflict for CONST in state 236 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 236 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 236 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 236 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 236 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 236 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 236 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 236 resolved as shift
WARNING: shift/reduce conflict for VOID in state 236 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 236 resolved as shift
WARNING: shift/reduce conflict for INT in state 236 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 236 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 239 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 239 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 239 resolved as shift
WARNING: shift/reduce conflict for ID in state 239 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 239 resolved as shift
WARNING: shift/reduce conflict for IF in state 239 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 239 resolved as shift
WARNING: shift/reduce conflict for FOR in state 239 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 239 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 239 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 239 resolved as shift
WARNING: shift/reduce conflict for TRY in state 239 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 239 resolved as shift
WARNING: shift/reduce conflict for VAR in state 239 resolved as shift
WARNING: shift/reduce conflict for CONST in state 239 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 239 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 239 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 239 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 239 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 239 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 239 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 239 resolved as shift
WARNING: shift/reduce conflict for VOID in state 239 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 239 resolved as shift
WARNING: shift/reduce conflict for INT in state 239 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 239 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 240 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for ID in state 240 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 240 resolved as shift
WARNING: shift/reduce conflict for IF in state 240 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 240 resolved as shift
WARNING: shift/reduce conflict for FOR in state 240 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 240 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 240 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 240 resolved as shift
WARNING: shift/reduce conflict for TRY in state 240 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 240 resolved as shift
WARNING: shift/reduce conflict for VAR in state 240 resolved as shift
WARNING: shift/reduce conflict for CONST in state 240 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 240 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 240 resolved as shift
WARNING: shift/reduce conflict for VOID in state 240 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 240 resolved as shift
WARNING: shift/reduce conflict for INT in state 240 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 240 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 245 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 245 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 245 resolved as shift
WARNING: shift/reduce conflict for ID in state 245 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 245 resolved as shift
WARNING: shift/reduce conflict for IF in state 245 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 245 resolved as shift
WARNING: shift/reduce conflict for FOR in state 245 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 245 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 245 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 245 resolved as shift
WARNING: shift/reduce conflict for TRY in state 245 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 245 resolved as shift
WARNING: shift/reduce conflict for VAR in state 245 resolved as shift
WARNING: shift/reduce conflict for CONST in state 245 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 245 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 245 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 245 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 245 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 245 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 245 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 245 resolved as shift
WARNING: shift/reduce conflict for VOID in state 245 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 245 resolved as shift
WARNING: shift/reduce conflict for INT in state 245 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 245 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 246 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 246 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 246 resolved as shift
WARNING: shift/reduce conflict for ID in state 246 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 246 resolved as shift
WARNING: shift/reduce conflict for IF in state 246 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 246 resolved as shift
WARNING: shift/reduce conflict for FOR in state 246 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 246 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 246 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 246 resolved as shift
WARNING: shift/reduce conflict for TRY in state 246 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 246 resolved as shift
WARNING: shift/reduce conflict for VAR in state 246 resolved as shift
WARNING: shift/reduce conflict for CONST in state 246 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 246 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 246 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 246 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 246 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 246 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 246 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 246 resolved as shift
WARNING: shift/reduce conflict for VOID in state 246 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 246 resolved as shift
WARNING: shift/reduce conflict for INT in state 246 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 246 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 247 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 247 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 247 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 247 resolved as shift
WARNING: shift/reduce conflict for ID in state 247 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 247 resolved as shift
WARNING: shift/reduce conflict for IF in state 247 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 247 resolved as shift
WARNING: shift/reduce conflict for FOR in state 247 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 247 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 247 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 247 resolved as shift
WARNING: shift/reduce conflict for TRY in state 247 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 247 resolved as shift
WARNING: shift/reduce conflict for VAR in state 247 resolved as shift
WARNING: shift/reduce conflict for CONST in state 247 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 247 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 247 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 247 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 247 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 247 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 247 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 247 resolved as shift
WARNING: shift/reduce conflict for VOID in state 247 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 247 resolved as shift
WARNING: shift/reduce conflict for INT in state 247 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 247 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 248 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 248 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 248 resolved as shift
WARNING: shift/reduce conflict for ID in state 248 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 248 resolved as shift
WARNING: shift/reduce conflict for IF in state 248 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 248 resolved as shift
WARNING: shift/reduce conflict for FOR in state 248 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 248 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 248 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 248 resolved as shift
WARNING: shift/reduce conflict for TRY in state 248 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 248 resolved as shift
WARNING: shift/reduce conflict for VAR in state 248 resolved as shift
WARNING: shift/reduce conflict for CONST in state 248 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 248 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 248 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 248 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 248 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 248 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 248 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 248 resolved as shift
WARNING: shift/reduce conflict for VOID in state 248 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 248 resolved as shift
WARNING: shift/reduce conflict for INT in state 248 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 248 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 249 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 249 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 249 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 249 resolved as shift
WARNING: shift/reduce conflict for ID in state 249 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 249 resolved as shift
WARNING: shift/reduce conflict for IF in state 249 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 249 resolved as shift
WARNING: shift/reduce conflict for FOR in state 249 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 249 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 249 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 249 resolved as shift
WARNING: shift/reduce conflict for TRY in state 249 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 249 resolved as shift
WARNING: shift/reduce conflict for VAR in state 249 resolved as shift
WARNING: shift/reduce conflict for CONST in state 249 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 249 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 249 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 249 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 249 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 249 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 249 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 249 resolved as shift
WARNING: shift/reduce conflict for VOID in state 249 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 249 resolved as shift
WARNING: shift/reduce conflict for INT in state 249 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 249 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 255 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 255 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 255 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 255 resolved as shift
WARNING: shift/reduce conflict for ID in state 255 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 255 resolved as shift
WARNING: shift/reduce conflict for IF in state 255 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 255 resolved as shift
WARNING: shift/reduce conflict for FOR in state 255 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 255 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 255 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 255 resolved as shift
WARNING: shift/reduce conflict for TRY in state 255 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 255 resolved as shift
WARNING: shift/reduce conflict for VAR in state 255 resolved as shift
WARNING: shift/reduce conflict for CONST in state 255 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 255 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 255 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 255 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 255 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 255 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 255 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 255 resolved as shift
WARNING: shift/reduce conflict for VOID in state 255 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 255 resolved as shift
WARNING: shift/reduce conflict for INT in state 255 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 255 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 256 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 256 resolved as shift
WARNING: shift/reduce conflict for LIST_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for MAP_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for ID in state 256 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 256 resolved as shift
WARNING: shift/reduce conflict for IF in state 256 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 256 resolved as shift
WARNING: shift/reduce conflict for FOR in state 256 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 256 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 256 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 256 resolved as shift
WARNING: shift/reduce conflict for TRY in state 256 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 256 resolved as shift
WARNING: shift/reduce conflict for VAR in state 256 resolved as shift
WARNING: shift/reduce conflict for CONST in state 256 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 256 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for NUM_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for SET_TYPE in state 256 resolved as shift
WARNING: shift/reduce conflict for VOID in state 256 resolved as shift
WARNING: shift/reduce conflict for LPARENTHESIS in state 256 resolved as shift
WARNING: shift/reduce conflict for INT in state 256 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 256 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (program -> statements)
WARNING: rejected rule (empty -> <empty>) in state 2
WARNING: reduce/reduce conflict in state 96 resolved using rule (variable -> INT)
WARNING: rejected rule (factor -> INT) in state 96
WARNING: reduce/reduce conflict in state 97 resolved using rule (variable -> DOUBLE)
WARNING: rejected rule (factor -> DOUBLE) in state 97
WARNING: reduce/reduce conflict in state 101 resolved using rule (variable -> ID)
WARNING: rejected rule (factor -> ID) in state 101
WARNING: reduce/reduce conflict in state 248 resolved using rule (default_case -> DEFAULT COLON statements)
WARNING: rejected rule (empty -> <empty>) in state 248

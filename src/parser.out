Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    BREAK
    COLON
    COMMENT_BLOCK
    COMMENT_LINE
    CONTINUE
    DEFAULT
    DOT
    ELSE
    ENUM
    EXPORT
    FINALLY
    FOR
    IMPORT
    LATE
    LBRACKET
    NOT
    OR
    RBRACKET
    RETURN
    STATIC
    TYPEDEF
    WHILE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     statement -> declaration
Rule 3     statement -> assignation
Rule 4     statement -> function
Rule 5     statement -> if
Rule 6     assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON
Rule 7     declaration -> varType ID SEMICOLON
Rule 8     numeric -> INT
Rule 9     numeric -> DOUBLE
Rule 10    expression -> expression PLUS term
Rule 11    expression -> expression MINUS term
Rule 12    expression -> term
Rule 13    term -> term TIMES numeric
Rule 14    term -> term DIVIDE numeric
Rule 15    term -> term MODULE numeric
Rule 16    term -> numeric
Rule 17    variable -> INT
Rule 18    variable -> DOUBLE
Rule 19    variable -> STRING
Rule 20    variable -> BOOL
Rule 21    variable -> NULL
Rule 22    variable -> ID
Rule 23    variable -> expression
Rule 24    varType -> INT_TYPE
Rule 25    varType -> STRING_TYPE
Rule 26    varType -> NUM_TYPE
Rule 27    varType -> DOUBLE_TYPE
Rule 28    varType -> BOOL_TYPE
Rule 29    varType -> LIST_TYPE
Rule 30    varType -> MAP_TYPE
Rule 31    varType -> VAR
Rule 32    varType -> CONST
Rule 33    varType -> FINAL
Rule 34    varType -> VOID
Rule 35    booleanExpression -> variable EQUALS variable
Rule 36    booleanExpression -> variable NOT_EQUALS variable
Rule 37    booleanExpression -> variable GREATER_THAN variable
Rule 38    booleanExpression -> variable LESS_THAN variable
Rule 39    booleanExpression -> variable GREATER_THAN_OR_EQUALS variable
Rule 40    booleanExpression -> variable LESS_THAN_OR_EQUALS variable
Rule 41    if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
Rule 42    function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
Rule 43    parameter -> varType ID
Rule 44    parametersList -> parameter
Rule 45    parametersList -> parameter COMMA parametersList
Rule 46    parameters -> parametersList
Rule 47    parameters -> empty
Rule 48    empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
ASSIGN_OPERATOR      : 6
BOOL                 : 20
BOOL_TYPE            : 28
BREAK                : 
COLON                : 
COMMA                : 45
COMMENT_BLOCK        : 
COMMENT_LINE         : 
CONST                : 32
CONTINUE             : 
DEFAULT              : 
DIVIDE               : 14
DOT                  : 
DOUBLE               : 9 18
DOUBLE_TYPE          : 27
ELSE                 : 
ENUM                 : 
EQUALS               : 35
EXPORT               : 
FINAL                : 33
FINALLY              : 
FOR                  : 
GREATER_THAN         : 37
GREATER_THAN_OR_EQUALS : 39
ID                   : 6 7 22 42 43
IF                   : 41
IMPORT               : 
INT                  : 8 17
INT_TYPE             : 24
LATE                 : 
LBRACE               : 41 42
LBRACKET             : 
LESS_THAN            : 38
LESS_THAN_OR_EQUALS  : 40
LIST_TYPE            : 29
LPARENTHESIS         : 41 42
MAP_TYPE             : 30
MINUS                : 11
MODULE               : 15
NOT                  : 
NOT_EQUALS           : 36
NULL                 : 21
NUM_TYPE             : 26
OR                   : 
PLUS                 : 10
RBRACE               : 41 42
RBRACKET             : 
RETURN               : 
RPARENTHESIS         : 41 42
SEMICOLON            : 6 7
STATIC               : 
STRING               : 19
STRING_TYPE          : 25
TIMES                : 13
TYPEDEF              : 
VAR                  : 31
VOID                 : 34
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignation          : 3
booleanExpression    : 41
declaration          : 2
empty                : 47
expression           : 1 10 11 23
function             : 4
if                   : 5
numeric              : 13 14 15 16
parameter            : 44 45
parameters           : 42
parametersList       : 45 46
statement            : 41 42 0
term                 : 10 11 12 13 14 15
varType              : 6 7 42 43
variable             : 6 35 35 36 36 37 37 38 38 39 39 40 40

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) statement -> . declaration
    (3) statement -> . assignation
    (4) statement -> . function
    (5) statement -> . if
    (10) expression -> . expression PLUS term
    (11) expression -> . expression MINUS term
    (12) expression -> . term
    (7) declaration -> . varType ID SEMICOLON
    (6) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (42) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (41) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (24) varType -> . INT_TYPE
    (25) varType -> . STRING_TYPE
    (26) varType -> . NUM_TYPE
    (27) varType -> . DOUBLE_TYPE
    (28) varType -> . BOOL_TYPE
    (29) varType -> . LIST_TYPE
    (30) varType -> . MAP_TYPE
    (31) varType -> . VAR
    (32) varType -> . CONST
    (33) varType -> . FINAL
    (34) varType -> . VOID
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    IF              shift and go to state 9
    INT_TYPE        shift and go to state 11
    STRING_TYPE     shift and go to state 12
    NUM_TYPE        shift and go to state 13
    DOUBLE_TYPE     shift and go to state 14
    BOOL_TYPE       shift and go to state 15
    LIST_TYPE       shift and go to state 16
    MAP_TYPE        shift and go to state 17
    VAR             shift and go to state 18
    CONST           shift and go to state 19
    FINAL           shift and go to state 20
    VOID            shift and go to state 21
    INT             shift and go to state 22
    DOUBLE          shift and go to state 23

    statement                      shift and go to state 1
    expression                     shift and go to state 2
    declaration                    shift and go to state 3
    assignation                    shift and go to state 4
    function                       shift and go to state 5
    if                             shift and go to state 6
    term                           shift and go to state 7
    varType                        shift and go to state 8
    numeric                        shift and go to state 10

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (10) expression -> expression . PLUS term
    (11) expression -> expression . MINUS term

    $end            reduce using rule 1 (statement -> expression .)
    RBRACE          reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25


state 3

    (2) statement -> declaration .

    $end            reduce using rule 2 (statement -> declaration .)
    RBRACE          reduce using rule 2 (statement -> declaration .)


state 4

    (3) statement -> assignation .

    $end            reduce using rule 3 (statement -> assignation .)
    RBRACE          reduce using rule 3 (statement -> assignation .)


state 5

    (4) statement -> function .

    $end            reduce using rule 4 (statement -> function .)
    RBRACE          reduce using rule 4 (statement -> function .)


state 6

    (5) statement -> if .

    $end            reduce using rule 5 (statement -> if .)
    RBRACE          reduce using rule 5 (statement -> if .)


state 7

    (12) expression -> term .
    (13) term -> term . TIMES numeric
    (14) term -> term . DIVIDE numeric
    (15) term -> term . MODULE numeric

    PLUS            reduce using rule 12 (expression -> term .)
    MINUS           reduce using rule 12 (expression -> term .)
    $end            reduce using rule 12 (expression -> term .)
    EQUALS          reduce using rule 12 (expression -> term .)
    NOT_EQUALS      reduce using rule 12 (expression -> term .)
    GREATER_THAN    reduce using rule 12 (expression -> term .)
    LESS_THAN       reduce using rule 12 (expression -> term .)
    GREATER_THAN_OR_EQUALS reduce using rule 12 (expression -> term .)
    LESS_THAN_OR_EQUALS reduce using rule 12 (expression -> term .)
    SEMICOLON       reduce using rule 12 (expression -> term .)
    RPARENTHESIS    reduce using rule 12 (expression -> term .)
    RBRACE          reduce using rule 12 (expression -> term .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULE          shift and go to state 28


state 8

    (7) declaration -> varType . ID SEMICOLON
    (6) assignation -> varType . ID ASSIGN_OPERATOR variable SEMICOLON
    (42) function -> varType . ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE

    ID              shift and go to state 29


state 9

    (41) if -> IF . LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE

    LPARENTHESIS    shift and go to state 30


state 10

    (16) term -> numeric .

    TIMES           reduce using rule 16 (term -> numeric .)
    DIVIDE          reduce using rule 16 (term -> numeric .)
    MODULE          reduce using rule 16 (term -> numeric .)
    PLUS            reduce using rule 16 (term -> numeric .)
    MINUS           reduce using rule 16 (term -> numeric .)
    $end            reduce using rule 16 (term -> numeric .)
    EQUALS          reduce using rule 16 (term -> numeric .)
    NOT_EQUALS      reduce using rule 16 (term -> numeric .)
    GREATER_THAN    reduce using rule 16 (term -> numeric .)
    LESS_THAN       reduce using rule 16 (term -> numeric .)
    GREATER_THAN_OR_EQUALS reduce using rule 16 (term -> numeric .)
    LESS_THAN_OR_EQUALS reduce using rule 16 (term -> numeric .)
    SEMICOLON       reduce using rule 16 (term -> numeric .)
    RPARENTHESIS    reduce using rule 16 (term -> numeric .)
    RBRACE          reduce using rule 16 (term -> numeric .)


state 11

    (24) varType -> INT_TYPE .

    ID              reduce using rule 24 (varType -> INT_TYPE .)


state 12

    (25) varType -> STRING_TYPE .

    ID              reduce using rule 25 (varType -> STRING_TYPE .)


state 13

    (26) varType -> NUM_TYPE .

    ID              reduce using rule 26 (varType -> NUM_TYPE .)


state 14

    (27) varType -> DOUBLE_TYPE .

    ID              reduce using rule 27 (varType -> DOUBLE_TYPE .)


state 15

    (28) varType -> BOOL_TYPE .

    ID              reduce using rule 28 (varType -> BOOL_TYPE .)


state 16

    (29) varType -> LIST_TYPE .

    ID              reduce using rule 29 (varType -> LIST_TYPE .)


state 17

    (30) varType -> MAP_TYPE .

    ID              reduce using rule 30 (varType -> MAP_TYPE .)


state 18

    (31) varType -> VAR .

    ID              reduce using rule 31 (varType -> VAR .)


state 19

    (32) varType -> CONST .

    ID              reduce using rule 32 (varType -> CONST .)


state 20

    (33) varType -> FINAL .

    ID              reduce using rule 33 (varType -> FINAL .)


state 21

    (34) varType -> VOID .

    ID              reduce using rule 34 (varType -> VOID .)


state 22

    (8) numeric -> INT .

    TIMES           reduce using rule 8 (numeric -> INT .)
    DIVIDE          reduce using rule 8 (numeric -> INT .)
    MODULE          reduce using rule 8 (numeric -> INT .)
    PLUS            reduce using rule 8 (numeric -> INT .)
    MINUS           reduce using rule 8 (numeric -> INT .)
    $end            reduce using rule 8 (numeric -> INT .)
    EQUALS          reduce using rule 8 (numeric -> INT .)
    NOT_EQUALS      reduce using rule 8 (numeric -> INT .)
    GREATER_THAN    reduce using rule 8 (numeric -> INT .)
    LESS_THAN       reduce using rule 8 (numeric -> INT .)
    GREATER_THAN_OR_EQUALS reduce using rule 8 (numeric -> INT .)
    LESS_THAN_OR_EQUALS reduce using rule 8 (numeric -> INT .)
    SEMICOLON       reduce using rule 8 (numeric -> INT .)
    RPARENTHESIS    reduce using rule 8 (numeric -> INT .)
    RBRACE          reduce using rule 8 (numeric -> INT .)


state 23

    (9) numeric -> DOUBLE .

    TIMES           reduce using rule 9 (numeric -> DOUBLE .)
    DIVIDE          reduce using rule 9 (numeric -> DOUBLE .)
    MODULE          reduce using rule 9 (numeric -> DOUBLE .)
    PLUS            reduce using rule 9 (numeric -> DOUBLE .)
    MINUS           reduce using rule 9 (numeric -> DOUBLE .)
    $end            reduce using rule 9 (numeric -> DOUBLE .)
    EQUALS          reduce using rule 9 (numeric -> DOUBLE .)
    NOT_EQUALS      reduce using rule 9 (numeric -> DOUBLE .)
    GREATER_THAN    reduce using rule 9 (numeric -> DOUBLE .)
    LESS_THAN       reduce using rule 9 (numeric -> DOUBLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 9 (numeric -> DOUBLE .)
    LESS_THAN_OR_EQUALS reduce using rule 9 (numeric -> DOUBLE .)
    SEMICOLON       reduce using rule 9 (numeric -> DOUBLE .)
    RPARENTHESIS    reduce using rule 9 (numeric -> DOUBLE .)
    RBRACE          reduce using rule 9 (numeric -> DOUBLE .)


state 24

    (10) expression -> expression PLUS . term
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 22
    DOUBLE          shift and go to state 23

    term                           shift and go to state 31
    numeric                        shift and go to state 10

state 25

    (11) expression -> expression MINUS . term
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 22
    DOUBLE          shift and go to state 23

    term                           shift and go to state 32
    numeric                        shift and go to state 10

state 26

    (13) term -> term TIMES . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 22
    DOUBLE          shift and go to state 23

    numeric                        shift and go to state 33

state 27

    (14) term -> term DIVIDE . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 22
    DOUBLE          shift and go to state 23

    numeric                        shift and go to state 34

state 28

    (15) term -> term MODULE . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 22
    DOUBLE          shift and go to state 23

    numeric                        shift and go to state 35

state 29

    (7) declaration -> varType ID . SEMICOLON
    (6) assignation -> varType ID . ASSIGN_OPERATOR variable SEMICOLON
    (42) function -> varType ID . LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE

    SEMICOLON       shift and go to state 36
    ASSIGN_OPERATOR shift and go to state 37
    LPARENTHESIS    shift and go to state 38


state 30

    (41) if -> IF LPARENTHESIS . booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (35) booleanExpression -> . variable EQUALS variable
    (36) booleanExpression -> . variable NOT_EQUALS variable
    (37) booleanExpression -> . variable GREATER_THAN variable
    (38) booleanExpression -> . variable LESS_THAN variable
    (39) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (40) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (17) variable -> . INT
    (18) variable -> . DOUBLE
    (19) variable -> . STRING
    (20) variable -> . BOOL
    (21) variable -> . NULL
    (22) variable -> . ID
    (23) variable -> . expression
    (10) expression -> . expression PLUS term
    (11) expression -> . expression MINUS term
    (12) expression -> . term
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    NULL            shift and go to state 45
    ID              shift and go to state 46

    booleanExpression              shift and go to state 39
    variable                       shift and go to state 40
    expression                     shift and go to state 47
    term                           shift and go to state 7
    numeric                        shift and go to state 10

state 31

    (10) expression -> expression PLUS term .
    (13) term -> term . TIMES numeric
    (14) term -> term . DIVIDE numeric
    (15) term -> term . MODULE numeric

    PLUS            reduce using rule 10 (expression -> expression PLUS term .)
    MINUS           reduce using rule 10 (expression -> expression PLUS term .)
    $end            reduce using rule 10 (expression -> expression PLUS term .)
    EQUALS          reduce using rule 10 (expression -> expression PLUS term .)
    NOT_EQUALS      reduce using rule 10 (expression -> expression PLUS term .)
    GREATER_THAN    reduce using rule 10 (expression -> expression PLUS term .)
    LESS_THAN       reduce using rule 10 (expression -> expression PLUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 10 (expression -> expression PLUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 10 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 10 (expression -> expression PLUS term .)
    RPARENTHESIS    reduce using rule 10 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 10 (expression -> expression PLUS term .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULE          shift and go to state 28


state 32

    (11) expression -> expression MINUS term .
    (13) term -> term . TIMES numeric
    (14) term -> term . DIVIDE numeric
    (15) term -> term . MODULE numeric

    PLUS            reduce using rule 11 (expression -> expression MINUS term .)
    MINUS           reduce using rule 11 (expression -> expression MINUS term .)
    $end            reduce using rule 11 (expression -> expression MINUS term .)
    EQUALS          reduce using rule 11 (expression -> expression MINUS term .)
    NOT_EQUALS      reduce using rule 11 (expression -> expression MINUS term .)
    GREATER_THAN    reduce using rule 11 (expression -> expression MINUS term .)
    LESS_THAN       reduce using rule 11 (expression -> expression MINUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 11 (expression -> expression MINUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 11 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 11 (expression -> expression MINUS term .)
    RPARENTHESIS    reduce using rule 11 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 11 (expression -> expression MINUS term .)
    TIMES           shift and go to state 26
    DIVIDE          shift and go to state 27
    MODULE          shift and go to state 28


state 33

    (13) term -> term TIMES numeric .

    TIMES           reduce using rule 13 (term -> term TIMES numeric .)
    DIVIDE          reduce using rule 13 (term -> term TIMES numeric .)
    MODULE          reduce using rule 13 (term -> term TIMES numeric .)
    PLUS            reduce using rule 13 (term -> term TIMES numeric .)
    MINUS           reduce using rule 13 (term -> term TIMES numeric .)
    $end            reduce using rule 13 (term -> term TIMES numeric .)
    EQUALS          reduce using rule 13 (term -> term TIMES numeric .)
    NOT_EQUALS      reduce using rule 13 (term -> term TIMES numeric .)
    GREATER_THAN    reduce using rule 13 (term -> term TIMES numeric .)
    LESS_THAN       reduce using rule 13 (term -> term TIMES numeric .)
    GREATER_THAN_OR_EQUALS reduce using rule 13 (term -> term TIMES numeric .)
    LESS_THAN_OR_EQUALS reduce using rule 13 (term -> term TIMES numeric .)
    SEMICOLON       reduce using rule 13 (term -> term TIMES numeric .)
    RPARENTHESIS    reduce using rule 13 (term -> term TIMES numeric .)
    RBRACE          reduce using rule 13 (term -> term TIMES numeric .)


state 34

    (14) term -> term DIVIDE numeric .

    TIMES           reduce using rule 14 (term -> term DIVIDE numeric .)
    DIVIDE          reduce using rule 14 (term -> term DIVIDE numeric .)
    MODULE          reduce using rule 14 (term -> term DIVIDE numeric .)
    PLUS            reduce using rule 14 (term -> term DIVIDE numeric .)
    MINUS           reduce using rule 14 (term -> term DIVIDE numeric .)
    $end            reduce using rule 14 (term -> term DIVIDE numeric .)
    EQUALS          reduce using rule 14 (term -> term DIVIDE numeric .)
    NOT_EQUALS      reduce using rule 14 (term -> term DIVIDE numeric .)
    GREATER_THAN    reduce using rule 14 (term -> term DIVIDE numeric .)
    LESS_THAN       reduce using rule 14 (term -> term DIVIDE numeric .)
    GREATER_THAN_OR_EQUALS reduce using rule 14 (term -> term DIVIDE numeric .)
    LESS_THAN_OR_EQUALS reduce using rule 14 (term -> term DIVIDE numeric .)
    SEMICOLON       reduce using rule 14 (term -> term DIVIDE numeric .)
    RPARENTHESIS    reduce using rule 14 (term -> term DIVIDE numeric .)
    RBRACE          reduce using rule 14 (term -> term DIVIDE numeric .)


state 35

    (15) term -> term MODULE numeric .

    TIMES           reduce using rule 15 (term -> term MODULE numeric .)
    DIVIDE          reduce using rule 15 (term -> term MODULE numeric .)
    MODULE          reduce using rule 15 (term -> term MODULE numeric .)
    PLUS            reduce using rule 15 (term -> term MODULE numeric .)
    MINUS           reduce using rule 15 (term -> term MODULE numeric .)
    $end            reduce using rule 15 (term -> term MODULE numeric .)
    EQUALS          reduce using rule 15 (term -> term MODULE numeric .)
    NOT_EQUALS      reduce using rule 15 (term -> term MODULE numeric .)
    GREATER_THAN    reduce using rule 15 (term -> term MODULE numeric .)
    LESS_THAN       reduce using rule 15 (term -> term MODULE numeric .)
    GREATER_THAN_OR_EQUALS reduce using rule 15 (term -> term MODULE numeric .)
    LESS_THAN_OR_EQUALS reduce using rule 15 (term -> term MODULE numeric .)
    SEMICOLON       reduce using rule 15 (term -> term MODULE numeric .)
    RPARENTHESIS    reduce using rule 15 (term -> term MODULE numeric .)
    RBRACE          reduce using rule 15 (term -> term MODULE numeric .)


state 36

    (7) declaration -> varType ID SEMICOLON .

    $end            reduce using rule 7 (declaration -> varType ID SEMICOLON .)
    RBRACE          reduce using rule 7 (declaration -> varType ID SEMICOLON .)


state 37

    (6) assignation -> varType ID ASSIGN_OPERATOR . variable SEMICOLON
    (17) variable -> . INT
    (18) variable -> . DOUBLE
    (19) variable -> . STRING
    (20) variable -> . BOOL
    (21) variable -> . NULL
    (22) variable -> . ID
    (23) variable -> . expression
    (10) expression -> . expression PLUS term
    (11) expression -> . expression MINUS term
    (12) expression -> . term
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    NULL            shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 48
    expression                     shift and go to state 47
    term                           shift and go to state 7
    numeric                        shift and go to state 10

state 38

    (42) function -> varType ID LPARENTHESIS . parameters RPARENTHESIS LBRACE statement RBRACE
    (46) parameters -> . parametersList
    (47) parameters -> . empty
    (44) parametersList -> . parameter
    (45) parametersList -> . parameter COMMA parametersList
    (48) empty -> .
    (43) parameter -> . varType ID
    (24) varType -> . INT_TYPE
    (25) varType -> . STRING_TYPE
    (26) varType -> . NUM_TYPE
    (27) varType -> . DOUBLE_TYPE
    (28) varType -> . BOOL_TYPE
    (29) varType -> . LIST_TYPE
    (30) varType -> . MAP_TYPE
    (31) varType -> . VAR
    (32) varType -> . CONST
    (33) varType -> . FINAL
    (34) varType -> . VOID

    RPARENTHESIS    reduce using rule 48 (empty -> .)
    INT_TYPE        shift and go to state 11
    STRING_TYPE     shift and go to state 12
    NUM_TYPE        shift and go to state 13
    DOUBLE_TYPE     shift and go to state 14
    BOOL_TYPE       shift and go to state 15
    LIST_TYPE       shift and go to state 16
    MAP_TYPE        shift and go to state 17
    VAR             shift and go to state 18
    CONST           shift and go to state 19
    FINAL           shift and go to state 20
    VOID            shift and go to state 21

    varType                        shift and go to state 49
    parameters                     shift and go to state 50
    parametersList                 shift and go to state 51
    empty                          shift and go to state 52
    parameter                      shift and go to state 53

state 39

    (41) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS LBRACE statement RBRACE

    RPARENTHESIS    shift and go to state 54


state 40

    (35) booleanExpression -> variable . EQUALS variable
    (36) booleanExpression -> variable . NOT_EQUALS variable
    (37) booleanExpression -> variable . GREATER_THAN variable
    (38) booleanExpression -> variable . LESS_THAN variable
    (39) booleanExpression -> variable . GREATER_THAN_OR_EQUALS variable
    (40) booleanExpression -> variable . LESS_THAN_OR_EQUALS variable

    EQUALS          shift and go to state 55
    NOT_EQUALS      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    GREATER_THAN_OR_EQUALS shift and go to state 59
    LESS_THAN_OR_EQUALS shift and go to state 60


state 41

    (17) variable -> INT .
    (8) numeric -> INT .

  ! reduce/reduce conflict for EQUALS resolved using rule 8 (numeric -> INT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 8 (numeric -> INT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 8 (numeric -> INT .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 8 (numeric -> INT .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 8 (numeric -> INT .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 8 (numeric -> INT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 8 (numeric -> INT .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 8 (numeric -> INT .)
    TIMES           reduce using rule 8 (numeric -> INT .)
    DIVIDE          reduce using rule 8 (numeric -> INT .)
    MODULE          reduce using rule 8 (numeric -> INT .)
    PLUS            reduce using rule 8 (numeric -> INT .)
    MINUS           reduce using rule 8 (numeric -> INT .)
    EQUALS          reduce using rule 8 (numeric -> INT .)
    NOT_EQUALS      reduce using rule 8 (numeric -> INT .)
    GREATER_THAN    reduce using rule 8 (numeric -> INT .)
    LESS_THAN       reduce using rule 8 (numeric -> INT .)
    GREATER_THAN_OR_EQUALS reduce using rule 8 (numeric -> INT .)
    LESS_THAN_OR_EQUALS reduce using rule 8 (numeric -> INT .)
    SEMICOLON       reduce using rule 8 (numeric -> INT .)
    RPARENTHESIS    reduce using rule 8 (numeric -> INT .)

  ! EQUALS          [ reduce using rule 17 (variable -> INT .) ]
  ! NOT_EQUALS      [ reduce using rule 17 (variable -> INT .) ]
  ! GREATER_THAN    [ reduce using rule 17 (variable -> INT .) ]
  ! LESS_THAN       [ reduce using rule 17 (variable -> INT .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 17 (variable -> INT .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 17 (variable -> INT .) ]
  ! SEMICOLON       [ reduce using rule 17 (variable -> INT .) ]
  ! RPARENTHESIS    [ reduce using rule 17 (variable -> INT .) ]


state 42

    (18) variable -> DOUBLE .
    (9) numeric -> DOUBLE .

  ! reduce/reduce conflict for EQUALS resolved using rule 9 (numeric -> DOUBLE .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 9 (numeric -> DOUBLE .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 9 (numeric -> DOUBLE .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 9 (numeric -> DOUBLE .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUALS resolved using rule 9 (numeric -> DOUBLE .)
  ! reduce/reduce conflict for LESS_THAN_OR_EQUALS resolved using rule 9 (numeric -> DOUBLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 9 (numeric -> DOUBLE .)
  ! reduce/reduce conflict for RPARENTHESIS resolved using rule 9 (numeric -> DOUBLE .)
    TIMES           reduce using rule 9 (numeric -> DOUBLE .)
    DIVIDE          reduce using rule 9 (numeric -> DOUBLE .)
    MODULE          reduce using rule 9 (numeric -> DOUBLE .)
    PLUS            reduce using rule 9 (numeric -> DOUBLE .)
    MINUS           reduce using rule 9 (numeric -> DOUBLE .)
    EQUALS          reduce using rule 9 (numeric -> DOUBLE .)
    NOT_EQUALS      reduce using rule 9 (numeric -> DOUBLE .)
    GREATER_THAN    reduce using rule 9 (numeric -> DOUBLE .)
    LESS_THAN       reduce using rule 9 (numeric -> DOUBLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 9 (numeric -> DOUBLE .)
    LESS_THAN_OR_EQUALS reduce using rule 9 (numeric -> DOUBLE .)
    SEMICOLON       reduce using rule 9 (numeric -> DOUBLE .)
    RPARENTHESIS    reduce using rule 9 (numeric -> DOUBLE .)

  ! EQUALS          [ reduce using rule 18 (variable -> DOUBLE .) ]
  ! NOT_EQUALS      [ reduce using rule 18 (variable -> DOUBLE .) ]
  ! GREATER_THAN    [ reduce using rule 18 (variable -> DOUBLE .) ]
  ! LESS_THAN       [ reduce using rule 18 (variable -> DOUBLE .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 18 (variable -> DOUBLE .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 18 (variable -> DOUBLE .) ]
  ! SEMICOLON       [ reduce using rule 18 (variable -> DOUBLE .) ]
  ! RPARENTHESIS    [ reduce using rule 18 (variable -> DOUBLE .) ]


state 43

    (19) variable -> STRING .

    EQUALS          reduce using rule 19 (variable -> STRING .)
    NOT_EQUALS      reduce using rule 19 (variable -> STRING .)
    GREATER_THAN    reduce using rule 19 (variable -> STRING .)
    LESS_THAN       reduce using rule 19 (variable -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 19 (variable -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 19 (variable -> STRING .)
    SEMICOLON       reduce using rule 19 (variable -> STRING .)
    RPARENTHESIS    reduce using rule 19 (variable -> STRING .)


state 44

    (20) variable -> BOOL .

    EQUALS          reduce using rule 20 (variable -> BOOL .)
    NOT_EQUALS      reduce using rule 20 (variable -> BOOL .)
    GREATER_THAN    reduce using rule 20 (variable -> BOOL .)
    LESS_THAN       reduce using rule 20 (variable -> BOOL .)
    GREATER_THAN_OR_EQUALS reduce using rule 20 (variable -> BOOL .)
    LESS_THAN_OR_EQUALS reduce using rule 20 (variable -> BOOL .)
    SEMICOLON       reduce using rule 20 (variable -> BOOL .)
    RPARENTHESIS    reduce using rule 20 (variable -> BOOL .)


state 45

    (21) variable -> NULL .

    EQUALS          reduce using rule 21 (variable -> NULL .)
    NOT_EQUALS      reduce using rule 21 (variable -> NULL .)
    GREATER_THAN    reduce using rule 21 (variable -> NULL .)
    LESS_THAN       reduce using rule 21 (variable -> NULL .)
    GREATER_THAN_OR_EQUALS reduce using rule 21 (variable -> NULL .)
    LESS_THAN_OR_EQUALS reduce using rule 21 (variable -> NULL .)
    SEMICOLON       reduce using rule 21 (variable -> NULL .)
    RPARENTHESIS    reduce using rule 21 (variable -> NULL .)


state 46

    (22) variable -> ID .

    EQUALS          reduce using rule 22 (variable -> ID .)
    NOT_EQUALS      reduce using rule 22 (variable -> ID .)
    GREATER_THAN    reduce using rule 22 (variable -> ID .)
    LESS_THAN       reduce using rule 22 (variable -> ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 22 (variable -> ID .)
    LESS_THAN_OR_EQUALS reduce using rule 22 (variable -> ID .)
    SEMICOLON       reduce using rule 22 (variable -> ID .)
    RPARENTHESIS    reduce using rule 22 (variable -> ID .)


state 47

    (23) variable -> expression .
    (10) expression -> expression . PLUS term
    (11) expression -> expression . MINUS term

    EQUALS          reduce using rule 23 (variable -> expression .)
    NOT_EQUALS      reduce using rule 23 (variable -> expression .)
    GREATER_THAN    reduce using rule 23 (variable -> expression .)
    LESS_THAN       reduce using rule 23 (variable -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 23 (variable -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 23 (variable -> expression .)
    SEMICOLON       reduce using rule 23 (variable -> expression .)
    RPARENTHESIS    reduce using rule 23 (variable -> expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25


state 48

    (6) assignation -> varType ID ASSIGN_OPERATOR variable . SEMICOLON

    SEMICOLON       shift and go to state 61


state 49

    (43) parameter -> varType . ID

    ID              shift and go to state 62


state 50

    (42) function -> varType ID LPARENTHESIS parameters . RPARENTHESIS LBRACE statement RBRACE

    RPARENTHESIS    shift and go to state 63


state 51

    (46) parameters -> parametersList .

    RPARENTHESIS    reduce using rule 46 (parameters -> parametersList .)


state 52

    (47) parameters -> empty .

    RPARENTHESIS    reduce using rule 47 (parameters -> empty .)


state 53

    (44) parametersList -> parameter .
    (45) parametersList -> parameter . COMMA parametersList

    RPARENTHESIS    reduce using rule 44 (parametersList -> parameter .)
    COMMA           shift and go to state 64


state 54

    (41) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS . LBRACE statement RBRACE

    LBRACE          shift and go to state 65


state 55

    (35) booleanExpression -> variable EQUALS . variable
    (17) variable -> . INT
    (18) variable -> . DOUBLE
    (19) variable -> . STRING
    (20) variable -> . BOOL
    (21) variable -> . NULL
    (22) variable -> . ID
    (23) variable -> . expression
    (10) expression -> . expression PLUS term
    (11) expression -> . expression MINUS term
    (12) expression -> . term
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    NULL            shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 66
    expression                     shift and go to state 47
    term                           shift and go to state 7
    numeric                        shift and go to state 10

state 56

    (36) booleanExpression -> variable NOT_EQUALS . variable
    (17) variable -> . INT
    (18) variable -> . DOUBLE
    (19) variable -> . STRING
    (20) variable -> . BOOL
    (21) variable -> . NULL
    (22) variable -> . ID
    (23) variable -> . expression
    (10) expression -> . expression PLUS term
    (11) expression -> . expression MINUS term
    (12) expression -> . term
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    NULL            shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 67
    expression                     shift and go to state 47
    term                           shift and go to state 7
    numeric                        shift and go to state 10

state 57

    (37) booleanExpression -> variable GREATER_THAN . variable
    (17) variable -> . INT
    (18) variable -> . DOUBLE
    (19) variable -> . STRING
    (20) variable -> . BOOL
    (21) variable -> . NULL
    (22) variable -> . ID
    (23) variable -> . expression
    (10) expression -> . expression PLUS term
    (11) expression -> . expression MINUS term
    (12) expression -> . term
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    NULL            shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 68
    expression                     shift and go to state 47
    term                           shift and go to state 7
    numeric                        shift and go to state 10

state 58

    (38) booleanExpression -> variable LESS_THAN . variable
    (17) variable -> . INT
    (18) variable -> . DOUBLE
    (19) variable -> . STRING
    (20) variable -> . BOOL
    (21) variable -> . NULL
    (22) variable -> . ID
    (23) variable -> . expression
    (10) expression -> . expression PLUS term
    (11) expression -> . expression MINUS term
    (12) expression -> . term
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    NULL            shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 69
    expression                     shift and go to state 47
    term                           shift and go to state 7
    numeric                        shift and go to state 10

state 59

    (39) booleanExpression -> variable GREATER_THAN_OR_EQUALS . variable
    (17) variable -> . INT
    (18) variable -> . DOUBLE
    (19) variable -> . STRING
    (20) variable -> . BOOL
    (21) variable -> . NULL
    (22) variable -> . ID
    (23) variable -> . expression
    (10) expression -> . expression PLUS term
    (11) expression -> . expression MINUS term
    (12) expression -> . term
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    NULL            shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 70
    expression                     shift and go to state 47
    term                           shift and go to state 7
    numeric                        shift and go to state 10

state 60

    (40) booleanExpression -> variable LESS_THAN_OR_EQUALS . variable
    (17) variable -> . INT
    (18) variable -> . DOUBLE
    (19) variable -> . STRING
    (20) variable -> . BOOL
    (21) variable -> . NULL
    (22) variable -> . ID
    (23) variable -> . expression
    (10) expression -> . expression PLUS term
    (11) expression -> . expression MINUS term
    (12) expression -> . term
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    INT             shift and go to state 41
    DOUBLE          shift and go to state 42
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    NULL            shift and go to state 45
    ID              shift and go to state 46

    variable                       shift and go to state 71
    expression                     shift and go to state 47
    term                           shift and go to state 7
    numeric                        shift and go to state 10

state 61

    (6) assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .

    $end            reduce using rule 6 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)
    RBRACE          reduce using rule 6 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)


state 62

    (43) parameter -> varType ID .

    COMMA           reduce using rule 43 (parameter -> varType ID .)
    RPARENTHESIS    reduce using rule 43 (parameter -> varType ID .)


state 63

    (42) function -> varType ID LPARENTHESIS parameters RPARENTHESIS . LBRACE statement RBRACE

    LBRACE          shift and go to state 72


state 64

    (45) parametersList -> parameter COMMA . parametersList
    (44) parametersList -> . parameter
    (45) parametersList -> . parameter COMMA parametersList
    (43) parameter -> . varType ID
    (24) varType -> . INT_TYPE
    (25) varType -> . STRING_TYPE
    (26) varType -> . NUM_TYPE
    (27) varType -> . DOUBLE_TYPE
    (28) varType -> . BOOL_TYPE
    (29) varType -> . LIST_TYPE
    (30) varType -> . MAP_TYPE
    (31) varType -> . VAR
    (32) varType -> . CONST
    (33) varType -> . FINAL
    (34) varType -> . VOID

    INT_TYPE        shift and go to state 11
    STRING_TYPE     shift and go to state 12
    NUM_TYPE        shift and go to state 13
    DOUBLE_TYPE     shift and go to state 14
    BOOL_TYPE       shift and go to state 15
    LIST_TYPE       shift and go to state 16
    MAP_TYPE        shift and go to state 17
    VAR             shift and go to state 18
    CONST           shift and go to state 19
    FINAL           shift and go to state 20
    VOID            shift and go to state 21

    parameter                      shift and go to state 53
    parametersList                 shift and go to state 73
    varType                        shift and go to state 49

state 65

    (41) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE . statement RBRACE
    (1) statement -> . expression
    (2) statement -> . declaration
    (3) statement -> . assignation
    (4) statement -> . function
    (5) statement -> . if
    (10) expression -> . expression PLUS term
    (11) expression -> . expression MINUS term
    (12) expression -> . term
    (7) declaration -> . varType ID SEMICOLON
    (6) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (42) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (41) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (24) varType -> . INT_TYPE
    (25) varType -> . STRING_TYPE
    (26) varType -> . NUM_TYPE
    (27) varType -> . DOUBLE_TYPE
    (28) varType -> . BOOL_TYPE
    (29) varType -> . LIST_TYPE
    (30) varType -> . MAP_TYPE
    (31) varType -> . VAR
    (32) varType -> . CONST
    (33) varType -> . FINAL
    (34) varType -> . VOID
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    IF              shift and go to state 9
    INT_TYPE        shift and go to state 11
    STRING_TYPE     shift and go to state 12
    NUM_TYPE        shift and go to state 13
    DOUBLE_TYPE     shift and go to state 14
    BOOL_TYPE       shift and go to state 15
    LIST_TYPE       shift and go to state 16
    MAP_TYPE        shift and go to state 17
    VAR             shift and go to state 18
    CONST           shift and go to state 19
    FINAL           shift and go to state 20
    VOID            shift and go to state 21
    INT             shift and go to state 22
    DOUBLE          shift and go to state 23

    statement                      shift and go to state 74
    expression                     shift and go to state 2
    declaration                    shift and go to state 3
    assignation                    shift and go to state 4
    function                       shift and go to state 5
    if                             shift and go to state 6
    term                           shift and go to state 7
    varType                        shift and go to state 8
    numeric                        shift and go to state 10

state 66

    (35) booleanExpression -> variable EQUALS variable .

    RPARENTHESIS    reduce using rule 35 (booleanExpression -> variable EQUALS variable .)


state 67

    (36) booleanExpression -> variable NOT_EQUALS variable .

    RPARENTHESIS    reduce using rule 36 (booleanExpression -> variable NOT_EQUALS variable .)


state 68

    (37) booleanExpression -> variable GREATER_THAN variable .

    RPARENTHESIS    reduce using rule 37 (booleanExpression -> variable GREATER_THAN variable .)


state 69

    (38) booleanExpression -> variable LESS_THAN variable .

    RPARENTHESIS    reduce using rule 38 (booleanExpression -> variable LESS_THAN variable .)


state 70

    (39) booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 39 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)


state 71

    (40) booleanExpression -> variable LESS_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 40 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)


state 72

    (42) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE . statement RBRACE
    (1) statement -> . expression
    (2) statement -> . declaration
    (3) statement -> . assignation
    (4) statement -> . function
    (5) statement -> . if
    (10) expression -> . expression PLUS term
    (11) expression -> . expression MINUS term
    (12) expression -> . term
    (7) declaration -> . varType ID SEMICOLON
    (6) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (42) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (41) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (13) term -> . term TIMES numeric
    (14) term -> . term DIVIDE numeric
    (15) term -> . term MODULE numeric
    (16) term -> . numeric
    (24) varType -> . INT_TYPE
    (25) varType -> . STRING_TYPE
    (26) varType -> . NUM_TYPE
    (27) varType -> . DOUBLE_TYPE
    (28) varType -> . BOOL_TYPE
    (29) varType -> . LIST_TYPE
    (30) varType -> . MAP_TYPE
    (31) varType -> . VAR
    (32) varType -> . CONST
    (33) varType -> . FINAL
    (34) varType -> . VOID
    (8) numeric -> . INT
    (9) numeric -> . DOUBLE

    IF              shift and go to state 9
    INT_TYPE        shift and go to state 11
    STRING_TYPE     shift and go to state 12
    NUM_TYPE        shift and go to state 13
    DOUBLE_TYPE     shift and go to state 14
    BOOL_TYPE       shift and go to state 15
    LIST_TYPE       shift and go to state 16
    MAP_TYPE        shift and go to state 17
    VAR             shift and go to state 18
    CONST           shift and go to state 19
    FINAL           shift and go to state 20
    VOID            shift and go to state 21
    INT             shift and go to state 22
    DOUBLE          shift and go to state 23

    varType                        shift and go to state 8
    statement                      shift and go to state 75
    expression                     shift and go to state 2
    declaration                    shift and go to state 3
    assignation                    shift and go to state 4
    function                       shift and go to state 5
    if                             shift and go to state 6
    term                           shift and go to state 7
    numeric                        shift and go to state 10

state 73

    (45) parametersList -> parameter COMMA parametersList .

    RPARENTHESIS    reduce using rule 45 (parametersList -> parameter COMMA parametersList .)


state 74

    (41) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement . RBRACE

    RBRACE          shift and go to state 76


state 75

    (42) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement . RBRACE

    RBRACE          shift and go to state 77


state 76

    (41) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .

    $end            reduce using rule 41 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .)
    RBRACE          reduce using rule 41 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .)


state 77

    (42) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE .

    $end            reduce using rule 42 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE .)
    RBRACE          reduce using rule 42 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 41 resolved using rule (numeric -> INT)
WARNING: rejected rule (variable -> INT) in state 41
WARNING: reduce/reduce conflict in state 42 resolved using rule (numeric -> DOUBLE)
WARNING: rejected rule (variable -> DOUBLE) in state 42
WARNING: Rule (variable -> INT) is never reduced
WARNING: Rule (variable -> DOUBLE) is never reduced

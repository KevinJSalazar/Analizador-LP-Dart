Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    BREAK
    COLON
    COMMENT_BLOCK
    COMMENT_LINE
    CONTINUE
    DEFAULT
    DIVIDE
    DOT
    ELSE
    ENUM
    EXPORT
    FINALLY
    FOR
    IMPORT
    LATE
    LBRACKET
    MINUS
    NOT
    OR
    PLUS
    RBRACKET
    RETURN
    STATIC
    TIMES
    TYPEDEF
    WHILE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> declaration
Rule 2     statement -> assignation
Rule 3     statement -> function
Rule 4     statement -> if
Rule 5     assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON
Rule 6     declaration -> varType ID SEMICOLON
Rule 7     variable -> INT
Rule 8     variable -> DOUBLE
Rule 9     variable -> STRING
Rule 10    variable -> BOOL
Rule 11    variable -> NULL
Rule 12    variable -> ID
Rule 13    varType -> INT_TYPE
Rule 14    varType -> STRING_TYPE
Rule 15    varType -> NUM_TYPE
Rule 16    varType -> DOUBLE_TYPE
Rule 17    varType -> BOOL_TYPE
Rule 18    varType -> LIST_TYPE
Rule 19    varType -> MAP_TYPE
Rule 20    varType -> VAR
Rule 21    varType -> CONST
Rule 22    varType -> FINAL
Rule 23    varType -> VOID
Rule 24    booleanExpression -> variable EQUALS variable
Rule 25    booleanExpression -> variable NOT_EQUALS variable
Rule 26    booleanExpression -> variable GREATER_THAN variable
Rule 27    booleanExpression -> variable LESS_THAN variable
Rule 28    booleanExpression -> variable GREATER_THAN_OR_EQUALS variable
Rule 29    booleanExpression -> variable LESS_THAN_OR_EQUALS variable
Rule 30    if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
Rule 31    function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
Rule 32    parameter -> varType ID
Rule 33    parametersList -> parameter
Rule 34    parametersList -> parameter COMMA parametersList
Rule 35    parameters -> parametersList
Rule 36    parameters -> empty
Rule 37    empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
ASSIGN_OPERATOR      : 5
BOOL                 : 10
BOOL_TYPE            : 17
BREAK                : 
COLON                : 
COMMA                : 34
COMMENT_BLOCK        : 
COMMENT_LINE         : 
CONST                : 21
CONTINUE             : 
DEFAULT              : 
DIVIDE               : 
DOT                  : 
DOUBLE               : 8
DOUBLE_TYPE          : 16
ELSE                 : 
ENUM                 : 
EQUALS               : 24
EXPORT               : 
FINAL                : 22
FINALLY              : 
FOR                  : 
GREATER_THAN         : 26
GREATER_THAN_OR_EQUALS : 28
ID                   : 5 6 12 31 32
IF                   : 30
IMPORT               : 
INT                  : 7
INT_TYPE             : 13
LATE                 : 
LBRACE               : 30 31
LBRACKET             : 
LESS_THAN            : 27
LESS_THAN_OR_EQUALS  : 29
LIST_TYPE            : 18
LPARENTHESIS         : 30 31
MAP_TYPE             : 19
MINUS                : 
NOT                  : 
NOT_EQUALS           : 25
NULL                 : 11
NUM_TYPE             : 15
OR                   : 
PLUS                 : 
RBRACE               : 30 31
RBRACKET             : 
RETURN               : 
RPARENTHESIS         : 30 31
SEMICOLON            : 5 6
STATIC               : 
STRING               : 9
STRING_TYPE          : 14
TIMES                : 
TYPEDEF              : 
VAR                  : 20
VOID                 : 23
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignation          : 2
booleanExpression    : 30
declaration          : 1
empty                : 36
function             : 3
if                   : 4
parameter            : 33 34
parameters           : 31
parametersList       : 34 35
statement            : 30 31 0
varType              : 5 6 31 32
variable             : 5 24 24 25 25 26 26 27 27 28 28 29 29

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . declaration
    (2) statement -> . assignation
    (3) statement -> . function
    (4) statement -> . if
    (6) declaration -> . varType ID SEMICOLON
    (5) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (31) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (30) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (13) varType -> . INT_TYPE
    (14) varType -> . STRING_TYPE
    (15) varType -> . NUM_TYPE
    (16) varType -> . DOUBLE_TYPE
    (17) varType -> . BOOL_TYPE
    (18) varType -> . LIST_TYPE
    (19) varType -> . MAP_TYPE
    (20) varType -> . VAR
    (21) varType -> . CONST
    (22) varType -> . FINAL
    (23) varType -> . VOID

    IF              shift and go to state 7
    INT_TYPE        shift and go to state 8
    STRING_TYPE     shift and go to state 9
    NUM_TYPE        shift and go to state 10
    DOUBLE_TYPE     shift and go to state 11
    BOOL_TYPE       shift and go to state 12
    LIST_TYPE       shift and go to state 13
    MAP_TYPE        shift and go to state 14
    VAR             shift and go to state 15
    CONST           shift and go to state 16
    FINAL           shift and go to state 17
    VOID            shift and go to state 18

    statement                      shift and go to state 1
    declaration                    shift and go to state 2
    assignation                    shift and go to state 3
    function                       shift and go to state 4
    if                             shift and go to state 5
    varType                        shift and go to state 6

state 1

    (0) S' -> statement .



state 2

    (1) statement -> declaration .

    $end            reduce using rule 1 (statement -> declaration .)
    RBRACE          reduce using rule 1 (statement -> declaration .)


state 3

    (2) statement -> assignation .

    $end            reduce using rule 2 (statement -> assignation .)
    RBRACE          reduce using rule 2 (statement -> assignation .)


state 4

    (3) statement -> function .

    $end            reduce using rule 3 (statement -> function .)
    RBRACE          reduce using rule 3 (statement -> function .)


state 5

    (4) statement -> if .

    $end            reduce using rule 4 (statement -> if .)
    RBRACE          reduce using rule 4 (statement -> if .)


state 6

    (6) declaration -> varType . ID SEMICOLON
    (5) assignation -> varType . ID ASSIGN_OPERATOR variable SEMICOLON
    (31) function -> varType . ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE

    ID              shift and go to state 19


state 7

    (30) if -> IF . LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE

    LPARENTHESIS    shift and go to state 20


state 8

    (13) varType -> INT_TYPE .

    ID              reduce using rule 13 (varType -> INT_TYPE .)


state 9

    (14) varType -> STRING_TYPE .

    ID              reduce using rule 14 (varType -> STRING_TYPE .)


state 10

    (15) varType -> NUM_TYPE .

    ID              reduce using rule 15 (varType -> NUM_TYPE .)


state 11

    (16) varType -> DOUBLE_TYPE .

    ID              reduce using rule 16 (varType -> DOUBLE_TYPE .)


state 12

    (17) varType -> BOOL_TYPE .

    ID              reduce using rule 17 (varType -> BOOL_TYPE .)


state 13

    (18) varType -> LIST_TYPE .

    ID              reduce using rule 18 (varType -> LIST_TYPE .)


state 14

    (19) varType -> MAP_TYPE .

    ID              reduce using rule 19 (varType -> MAP_TYPE .)


state 15

    (20) varType -> VAR .

    ID              reduce using rule 20 (varType -> VAR .)


state 16

    (21) varType -> CONST .

    ID              reduce using rule 21 (varType -> CONST .)


state 17

    (22) varType -> FINAL .

    ID              reduce using rule 22 (varType -> FINAL .)


state 18

    (23) varType -> VOID .

    ID              reduce using rule 23 (varType -> VOID .)


state 19

    (6) declaration -> varType ID . SEMICOLON
    (5) assignation -> varType ID . ASSIGN_OPERATOR variable SEMICOLON
    (31) function -> varType ID . LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE

    SEMICOLON       shift and go to state 21
    ASSIGN_OPERATOR shift and go to state 22
    LPARENTHESIS    shift and go to state 23


state 20

    (30) if -> IF LPARENTHESIS . booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (24) booleanExpression -> . variable EQUALS variable
    (25) booleanExpression -> . variable NOT_EQUALS variable
    (26) booleanExpression -> . variable GREATER_THAN variable
    (27) booleanExpression -> . variable LESS_THAN variable
    (28) booleanExpression -> . variable GREATER_THAN_OR_EQUALS variable
    (29) booleanExpression -> . variable LESS_THAN_OR_EQUALS variable
    (7) variable -> . INT
    (8) variable -> . DOUBLE
    (9) variable -> . STRING
    (10) variable -> . BOOL
    (11) variable -> . NULL
    (12) variable -> . ID

    INT             shift and go to state 26
    DOUBLE          shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ID              shift and go to state 31

    booleanExpression              shift and go to state 24
    variable                       shift and go to state 25

state 21

    (6) declaration -> varType ID SEMICOLON .

    $end            reduce using rule 6 (declaration -> varType ID SEMICOLON .)
    RBRACE          reduce using rule 6 (declaration -> varType ID SEMICOLON .)


state 22

    (5) assignation -> varType ID ASSIGN_OPERATOR . variable SEMICOLON
    (7) variable -> . INT
    (8) variable -> . DOUBLE
    (9) variable -> . STRING
    (10) variable -> . BOOL
    (11) variable -> . NULL
    (12) variable -> . ID

    INT             shift and go to state 26
    DOUBLE          shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ID              shift and go to state 31

    variable                       shift and go to state 32

state 23

    (31) function -> varType ID LPARENTHESIS . parameters RPARENTHESIS LBRACE statement RBRACE
    (35) parameters -> . parametersList
    (36) parameters -> . empty
    (33) parametersList -> . parameter
    (34) parametersList -> . parameter COMMA parametersList
    (37) empty -> .
    (32) parameter -> . varType ID
    (13) varType -> . INT_TYPE
    (14) varType -> . STRING_TYPE
    (15) varType -> . NUM_TYPE
    (16) varType -> . DOUBLE_TYPE
    (17) varType -> . BOOL_TYPE
    (18) varType -> . LIST_TYPE
    (19) varType -> . MAP_TYPE
    (20) varType -> . VAR
    (21) varType -> . CONST
    (22) varType -> . FINAL
    (23) varType -> . VOID

    RPARENTHESIS    reduce using rule 37 (empty -> .)
    INT_TYPE        shift and go to state 8
    STRING_TYPE     shift and go to state 9
    NUM_TYPE        shift and go to state 10
    DOUBLE_TYPE     shift and go to state 11
    BOOL_TYPE       shift and go to state 12
    LIST_TYPE       shift and go to state 13
    MAP_TYPE        shift and go to state 14
    VAR             shift and go to state 15
    CONST           shift and go to state 16
    FINAL           shift and go to state 17
    VOID            shift and go to state 18

    varType                        shift and go to state 33
    parameters                     shift and go to state 34
    parametersList                 shift and go to state 35
    empty                          shift and go to state 36
    parameter                      shift and go to state 37

state 24

    (30) if -> IF LPARENTHESIS booleanExpression . RPARENTHESIS LBRACE statement RBRACE

    RPARENTHESIS    shift and go to state 38


state 25

    (24) booleanExpression -> variable . EQUALS variable
    (25) booleanExpression -> variable . NOT_EQUALS variable
    (26) booleanExpression -> variable . GREATER_THAN variable
    (27) booleanExpression -> variable . LESS_THAN variable
    (28) booleanExpression -> variable . GREATER_THAN_OR_EQUALS variable
    (29) booleanExpression -> variable . LESS_THAN_OR_EQUALS variable

    EQUALS          shift and go to state 39
    NOT_EQUALS      shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESS_THAN       shift and go to state 42
    GREATER_THAN_OR_EQUALS shift and go to state 43
    LESS_THAN_OR_EQUALS shift and go to state 44


state 26

    (7) variable -> INT .

    EQUALS          reduce using rule 7 (variable -> INT .)
    NOT_EQUALS      reduce using rule 7 (variable -> INT .)
    GREATER_THAN    reduce using rule 7 (variable -> INT .)
    LESS_THAN       reduce using rule 7 (variable -> INT .)
    GREATER_THAN_OR_EQUALS reduce using rule 7 (variable -> INT .)
    LESS_THAN_OR_EQUALS reduce using rule 7 (variable -> INT .)
    SEMICOLON       reduce using rule 7 (variable -> INT .)
    RPARENTHESIS    reduce using rule 7 (variable -> INT .)


state 27

    (8) variable -> DOUBLE .

    EQUALS          reduce using rule 8 (variable -> DOUBLE .)
    NOT_EQUALS      reduce using rule 8 (variable -> DOUBLE .)
    GREATER_THAN    reduce using rule 8 (variable -> DOUBLE .)
    LESS_THAN       reduce using rule 8 (variable -> DOUBLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 8 (variable -> DOUBLE .)
    LESS_THAN_OR_EQUALS reduce using rule 8 (variable -> DOUBLE .)
    SEMICOLON       reduce using rule 8 (variable -> DOUBLE .)
    RPARENTHESIS    reduce using rule 8 (variable -> DOUBLE .)


state 28

    (9) variable -> STRING .

    EQUALS          reduce using rule 9 (variable -> STRING .)
    NOT_EQUALS      reduce using rule 9 (variable -> STRING .)
    GREATER_THAN    reduce using rule 9 (variable -> STRING .)
    LESS_THAN       reduce using rule 9 (variable -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 9 (variable -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 9 (variable -> STRING .)
    SEMICOLON       reduce using rule 9 (variable -> STRING .)
    RPARENTHESIS    reduce using rule 9 (variable -> STRING .)


state 29

    (10) variable -> BOOL .

    EQUALS          reduce using rule 10 (variable -> BOOL .)
    NOT_EQUALS      reduce using rule 10 (variable -> BOOL .)
    GREATER_THAN    reduce using rule 10 (variable -> BOOL .)
    LESS_THAN       reduce using rule 10 (variable -> BOOL .)
    GREATER_THAN_OR_EQUALS reduce using rule 10 (variable -> BOOL .)
    LESS_THAN_OR_EQUALS reduce using rule 10 (variable -> BOOL .)
    SEMICOLON       reduce using rule 10 (variable -> BOOL .)
    RPARENTHESIS    reduce using rule 10 (variable -> BOOL .)


state 30

    (11) variable -> NULL .

    EQUALS          reduce using rule 11 (variable -> NULL .)
    NOT_EQUALS      reduce using rule 11 (variable -> NULL .)
    GREATER_THAN    reduce using rule 11 (variable -> NULL .)
    LESS_THAN       reduce using rule 11 (variable -> NULL .)
    GREATER_THAN_OR_EQUALS reduce using rule 11 (variable -> NULL .)
    LESS_THAN_OR_EQUALS reduce using rule 11 (variable -> NULL .)
    SEMICOLON       reduce using rule 11 (variable -> NULL .)
    RPARENTHESIS    reduce using rule 11 (variable -> NULL .)


state 31

    (12) variable -> ID .

    EQUALS          reduce using rule 12 (variable -> ID .)
    NOT_EQUALS      reduce using rule 12 (variable -> ID .)
    GREATER_THAN    reduce using rule 12 (variable -> ID .)
    LESS_THAN       reduce using rule 12 (variable -> ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 12 (variable -> ID .)
    LESS_THAN_OR_EQUALS reduce using rule 12 (variable -> ID .)
    SEMICOLON       reduce using rule 12 (variable -> ID .)
    RPARENTHESIS    reduce using rule 12 (variable -> ID .)


state 32

    (5) assignation -> varType ID ASSIGN_OPERATOR variable . SEMICOLON

    SEMICOLON       shift and go to state 45


state 33

    (32) parameter -> varType . ID

    ID              shift and go to state 46


state 34

    (31) function -> varType ID LPARENTHESIS parameters . RPARENTHESIS LBRACE statement RBRACE

    RPARENTHESIS    shift and go to state 47


state 35

    (35) parameters -> parametersList .

    RPARENTHESIS    reduce using rule 35 (parameters -> parametersList .)


state 36

    (36) parameters -> empty .

    RPARENTHESIS    reduce using rule 36 (parameters -> empty .)


state 37

    (33) parametersList -> parameter .
    (34) parametersList -> parameter . COMMA parametersList

    RPARENTHESIS    reduce using rule 33 (parametersList -> parameter .)
    COMMA           shift and go to state 48


state 38

    (30) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS . LBRACE statement RBRACE

    LBRACE          shift and go to state 49


state 39

    (24) booleanExpression -> variable EQUALS . variable
    (7) variable -> . INT
    (8) variable -> . DOUBLE
    (9) variable -> . STRING
    (10) variable -> . BOOL
    (11) variable -> . NULL
    (12) variable -> . ID

    INT             shift and go to state 26
    DOUBLE          shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ID              shift and go to state 31

    variable                       shift and go to state 50

state 40

    (25) booleanExpression -> variable NOT_EQUALS . variable
    (7) variable -> . INT
    (8) variable -> . DOUBLE
    (9) variable -> . STRING
    (10) variable -> . BOOL
    (11) variable -> . NULL
    (12) variable -> . ID

    INT             shift and go to state 26
    DOUBLE          shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ID              shift and go to state 31

    variable                       shift and go to state 51

state 41

    (26) booleanExpression -> variable GREATER_THAN . variable
    (7) variable -> . INT
    (8) variable -> . DOUBLE
    (9) variable -> . STRING
    (10) variable -> . BOOL
    (11) variable -> . NULL
    (12) variable -> . ID

    INT             shift and go to state 26
    DOUBLE          shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ID              shift and go to state 31

    variable                       shift and go to state 52

state 42

    (27) booleanExpression -> variable LESS_THAN . variable
    (7) variable -> . INT
    (8) variable -> . DOUBLE
    (9) variable -> . STRING
    (10) variable -> . BOOL
    (11) variable -> . NULL
    (12) variable -> . ID

    INT             shift and go to state 26
    DOUBLE          shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ID              shift and go to state 31

    variable                       shift and go to state 53

state 43

    (28) booleanExpression -> variable GREATER_THAN_OR_EQUALS . variable
    (7) variable -> . INT
    (8) variable -> . DOUBLE
    (9) variable -> . STRING
    (10) variable -> . BOOL
    (11) variable -> . NULL
    (12) variable -> . ID

    INT             shift and go to state 26
    DOUBLE          shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ID              shift and go to state 31

    variable                       shift and go to state 54

state 44

    (29) booleanExpression -> variable LESS_THAN_OR_EQUALS . variable
    (7) variable -> . INT
    (8) variable -> . DOUBLE
    (9) variable -> . STRING
    (10) variable -> . BOOL
    (11) variable -> . NULL
    (12) variable -> . ID

    INT             shift and go to state 26
    DOUBLE          shift and go to state 27
    STRING          shift and go to state 28
    BOOL            shift and go to state 29
    NULL            shift and go to state 30
    ID              shift and go to state 31

    variable                       shift and go to state 55

state 45

    (5) assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .

    $end            reduce using rule 5 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)
    RBRACE          reduce using rule 5 (assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON .)


state 46

    (32) parameter -> varType ID .

    COMMA           reduce using rule 32 (parameter -> varType ID .)
    RPARENTHESIS    reduce using rule 32 (parameter -> varType ID .)


state 47

    (31) function -> varType ID LPARENTHESIS parameters RPARENTHESIS . LBRACE statement RBRACE

    LBRACE          shift and go to state 56


state 48

    (34) parametersList -> parameter COMMA . parametersList
    (33) parametersList -> . parameter
    (34) parametersList -> . parameter COMMA parametersList
    (32) parameter -> . varType ID
    (13) varType -> . INT_TYPE
    (14) varType -> . STRING_TYPE
    (15) varType -> . NUM_TYPE
    (16) varType -> . DOUBLE_TYPE
    (17) varType -> . BOOL_TYPE
    (18) varType -> . LIST_TYPE
    (19) varType -> . MAP_TYPE
    (20) varType -> . VAR
    (21) varType -> . CONST
    (22) varType -> . FINAL
    (23) varType -> . VOID

    INT_TYPE        shift and go to state 8
    STRING_TYPE     shift and go to state 9
    NUM_TYPE        shift and go to state 10
    DOUBLE_TYPE     shift and go to state 11
    BOOL_TYPE       shift and go to state 12
    LIST_TYPE       shift and go to state 13
    MAP_TYPE        shift and go to state 14
    VAR             shift and go to state 15
    CONST           shift and go to state 16
    FINAL           shift and go to state 17
    VOID            shift and go to state 18

    parameter                      shift and go to state 37
    parametersList                 shift and go to state 57
    varType                        shift and go to state 33

state 49

    (30) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE . statement RBRACE
    (1) statement -> . declaration
    (2) statement -> . assignation
    (3) statement -> . function
    (4) statement -> . if
    (6) declaration -> . varType ID SEMICOLON
    (5) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (31) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (30) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (13) varType -> . INT_TYPE
    (14) varType -> . STRING_TYPE
    (15) varType -> . NUM_TYPE
    (16) varType -> . DOUBLE_TYPE
    (17) varType -> . BOOL_TYPE
    (18) varType -> . LIST_TYPE
    (19) varType -> . MAP_TYPE
    (20) varType -> . VAR
    (21) varType -> . CONST
    (22) varType -> . FINAL
    (23) varType -> . VOID

    IF              shift and go to state 7
    INT_TYPE        shift and go to state 8
    STRING_TYPE     shift and go to state 9
    NUM_TYPE        shift and go to state 10
    DOUBLE_TYPE     shift and go to state 11
    BOOL_TYPE       shift and go to state 12
    LIST_TYPE       shift and go to state 13
    MAP_TYPE        shift and go to state 14
    VAR             shift and go to state 15
    CONST           shift and go to state 16
    FINAL           shift and go to state 17
    VOID            shift and go to state 18

    statement                      shift and go to state 58
    declaration                    shift and go to state 2
    assignation                    shift and go to state 3
    function                       shift and go to state 4
    if                             shift and go to state 5
    varType                        shift and go to state 6

state 50

    (24) booleanExpression -> variable EQUALS variable .

    RPARENTHESIS    reduce using rule 24 (booleanExpression -> variable EQUALS variable .)


state 51

    (25) booleanExpression -> variable NOT_EQUALS variable .

    RPARENTHESIS    reduce using rule 25 (booleanExpression -> variable NOT_EQUALS variable .)


state 52

    (26) booleanExpression -> variable GREATER_THAN variable .

    RPARENTHESIS    reduce using rule 26 (booleanExpression -> variable GREATER_THAN variable .)


state 53

    (27) booleanExpression -> variable LESS_THAN variable .

    RPARENTHESIS    reduce using rule 27 (booleanExpression -> variable LESS_THAN variable .)


state 54

    (28) booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 28 (booleanExpression -> variable GREATER_THAN_OR_EQUALS variable .)


state 55

    (29) booleanExpression -> variable LESS_THAN_OR_EQUALS variable .

    RPARENTHESIS    reduce using rule 29 (booleanExpression -> variable LESS_THAN_OR_EQUALS variable .)


state 56

    (31) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE . statement RBRACE
    (1) statement -> . declaration
    (2) statement -> . assignation
    (3) statement -> . function
    (4) statement -> . if
    (6) declaration -> . varType ID SEMICOLON
    (5) assignation -> . varType ID ASSIGN_OPERATOR variable SEMICOLON
    (31) function -> . varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE
    (30) if -> . IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE
    (13) varType -> . INT_TYPE
    (14) varType -> . STRING_TYPE
    (15) varType -> . NUM_TYPE
    (16) varType -> . DOUBLE_TYPE
    (17) varType -> . BOOL_TYPE
    (18) varType -> . LIST_TYPE
    (19) varType -> . MAP_TYPE
    (20) varType -> . VAR
    (21) varType -> . CONST
    (22) varType -> . FINAL
    (23) varType -> . VOID

    IF              shift and go to state 7
    INT_TYPE        shift and go to state 8
    STRING_TYPE     shift and go to state 9
    NUM_TYPE        shift and go to state 10
    DOUBLE_TYPE     shift and go to state 11
    BOOL_TYPE       shift and go to state 12
    LIST_TYPE       shift and go to state 13
    MAP_TYPE        shift and go to state 14
    VAR             shift and go to state 15
    CONST           shift and go to state 16
    FINAL           shift and go to state 17
    VOID            shift and go to state 18

    varType                        shift and go to state 6
    statement                      shift and go to state 59
    declaration                    shift and go to state 2
    assignation                    shift and go to state 3
    function                       shift and go to state 4
    if                             shift and go to state 5

state 57

    (34) parametersList -> parameter COMMA parametersList .

    RPARENTHESIS    reduce using rule 34 (parametersList -> parameter COMMA parametersList .)


state 58

    (30) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement . RBRACE

    RBRACE          shift and go to state 60


state 59

    (31) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement . RBRACE

    RBRACE          shift and go to state 61


state 60

    (30) if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .

    $end            reduce using rule 30 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .)
    RBRACE          reduce using rule 30 (if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE .)


state 61

    (31) function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE .

    $end            reduce using rule 31 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE .)
    RBRACE          reduce using rule 31 (function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE .)


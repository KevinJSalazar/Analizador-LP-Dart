
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND ASSIGN_OPERATOR BOOL BOOL_TYPE BREAK COLON COMMA COMMENT_BLOCK COMMENT_LINE CONST CONTINUE DEFAULT DIVIDE DOT DOUBLE DOUBLE_TYPE ELSE ENUM EQUALS EXPORT FINAL FINALLY FOR GREATER_THAN GREATER_THAN_OR_EQUALS ID IF IMPORT INT INT_TYPE LATE LBRACE LBRACKET LESS_THAN LESS_THAN_OR_EQUALS LIST_TYPE LPARENTHESIS MAP_TYPE MINUS NOT NOT_EQUALS NULL NULL_TYPE NUM_TYPE OR PLUS RBRACE RBRACKET RETURN RPARENTHESIS SEMICOLON SET_TYPE STATIC STRING STRING_TYPE TILDE TIMES TYPEDEF VAR VOID WHILEvariable : INT \n| DOUBLE \n| STRING \n| BOOL  \n| NULLvarType : INT_TYPE \n| STRING_TYPE \n| NUM_TYPE \n| DOUBLE_TYPE \n| BOOL_TYPE \n| LIST_TYPE \n| MAP_TYPE \n| VAR \n| CONST \n| FINALbooleanExpression : variable EQUALS variable\n| variable NOT_EQUALS variable\n| variable GREATER_THAN variable\n| variable LESS_THAN variable\n| variable GREATER_THAN_OR_EQUALS variable\n| variable LESS_THAN_OR_EQUALS variable\ndeclaration : CONST ID ASSIGN_OPERATOR variable SEMICOLON\n| VAR ID ASSIGN_OPERATOR variable SEMICOLON\n| FINAL ID ASSIGN_OPERATOR variable SEMICOLON\n'
    
_lr_action_items = {'INT':([0,],[2,]),'DOUBLE':([0,],[3,]),'STRING':([0,],[4,]),'BOOL':([0,],[5,]),'NULL':([0,],[6,]),'$end':([1,2,3,4,5,6,],[0,-1,-2,-3,-4,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'variable':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> variable","S'",1,None,None,None),
  ('variable -> INT','variable',1,'p_variable','yacc.py',6),
  ('variable -> DOUBLE','variable',1,'p_variable','yacc.py',7),
  ('variable -> STRING','variable',1,'p_variable','yacc.py',8),
  ('variable -> BOOL','variable',1,'p_variable','yacc.py',9),
  ('variable -> NULL','variable',1,'p_variable','yacc.py',10),
  ('varType -> INT_TYPE','varType',1,'p_varType','yacc.py',13),
  ('varType -> STRING_TYPE','varType',1,'p_varType','yacc.py',14),
  ('varType -> NUM_TYPE','varType',1,'p_varType','yacc.py',15),
  ('varType -> DOUBLE_TYPE','varType',1,'p_varType','yacc.py',16),
  ('varType -> BOOL_TYPE','varType',1,'p_varType','yacc.py',17),
  ('varType -> LIST_TYPE','varType',1,'p_varType','yacc.py',18),
  ('varType -> MAP_TYPE','varType',1,'p_varType','yacc.py',19),
  ('varType -> VAR','varType',1,'p_varType','yacc.py',20),
  ('varType -> CONST','varType',1,'p_varType','yacc.py',21),
  ('varType -> FINAL','varType',1,'p_varType','yacc.py',22),
  ('booleanExpression -> variable EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',25),
  ('booleanExpression -> variable NOT_EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',26),
  ('booleanExpression -> variable GREATER_THAN variable','booleanExpression',3,'p_booleanExpression','yacc.py',27),
  ('booleanExpression -> variable LESS_THAN variable','booleanExpression',3,'p_booleanExpression','yacc.py',28),
  ('booleanExpression -> variable GREATER_THAN_OR_EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',29),
  ('booleanExpression -> variable LESS_THAN_OR_EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',30),
  ('declaration -> CONST ID ASSIGN_OPERATOR variable SEMICOLON','declaration',5,'p_declaration','yacc.py',35),
  ('declaration -> VAR ID ASSIGN_OPERATOR variable SEMICOLON','declaration',5,'p_declaration','yacc.py',36),
  ('declaration -> FINAL ID ASSIGN_OPERATOR variable SEMICOLON','declaration',5,'p_declaration','yacc.py',37),
]

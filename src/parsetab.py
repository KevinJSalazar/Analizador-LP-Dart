
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statementABSTRACT AND ASSIGN_OPERATOR BOOL BOOL_TYPE BREAK COLON COMMA COMMENT_BLOCK COMMENT_LINE CONST CONTINUE DEFAULT DIVIDE DOT DOUBLE DOUBLE_TYPE ELSE ENUM EQUALS EXPORT FINAL FINALLY FOR GREATER_THAN GREATER_THAN_OR_EQUALS ID IF IMPORT INT INT_TYPE LATE LBRACE LBRACKET LESS_THAN LESS_THAN_OR_EQUALS LIST_TYPE LPARENTHESIS MAP_TYPE MINUS MODULE NOT NOT_EQUALS NULL NUM_TYPE OR PLUS RBRACE RBRACKET RETURN RPARENTHESIS SEMICOLON STATIC STRING STRING_TYPE TIMES TYPEDEF VAR VOID WHILEstatement : expression\n| declaration\n| assignation\n| function\n| if\n| while\n| for\n| listassignation : varType ID ASSIGN_OPERATOR variable SEMICOLONdeclaration : varType ID SEMICOLONnumeric : INT\n| DOUBLEexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES numericterm : term DIVIDE numericterm : term MODULE numericterm : numericvariable : INT \n| DOUBLE \n| STRING \n| BOOL  \n| NULL\n| ID\n| expression\nvarType : INT_TYPE \n| STRING_TYPE \n| NUM_TYPE \n| DOUBLE_TYPE \n| BOOL_TYPE \n| LIST_TYPE \n| MAP_TYPE \n| VAR \n| CONST \n| FINAL\n| VOIDprimitive : INT_TYPE\n| STRING_TYPE\n| NUM_TYPE\n| DOUBLE_TYPE\n| BOOL_TYPEbooleanExpression : variable EQUALS variable\n| variable NOT_EQUALS variable\n| variable GREATER_THAN variable\n| variable LESS_THAN variable\n| variable GREATER_THAN_OR_EQUALS variable\n| variable LESS_THAN_OR_EQUALS variable\nif : IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE\n| IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE\n| IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACEwhile : WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE\n| WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACEfor : FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE\n| FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACElist : LIST_TYPE LESS_THAN primitive GREATER_THAN increment : ID PLUS PLUSfunction : varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACEparameter : varType IDparametersList : parameter\n| parameter COMMA parametersListparameters : parametersList\n| emptyempty : '
    
_lr_action_items = {'IF':([0,87,94,96,111,113,],[12,12,12,12,12,12,]),'WHILE':([0,87,94,96,111,113,],[13,13,13,13,13,13,]),'FOR':([0,87,94,96,111,113,],[14,14,14,14,14,14,]),'LIST_TYPE':([0,37,46,86,87,94,96,111,113,],[15,59,59,59,15,15,15,15,15,]),'INT_TYPE':([0,37,38,46,86,87,94,96,111,113,],[17,17,61,17,17,17,17,17,17,17,]),'STRING_TYPE':([0,37,38,46,86,87,94,96,111,113,],[18,18,62,18,18,18,18,18,18,18,]),'NUM_TYPE':([0,37,38,46,86,87,94,96,111,113,],[19,19,63,19,19,19,19,19,19,19,]),'DOUBLE_TYPE':([0,37,38,46,86,87,94,96,111,113,],[20,20,64,20,20,20,20,20,20,20,]),'BOOL_TYPE':([0,37,38,46,86,87,94,96,111,113,],[21,21,65,21,21,21,21,21,21,21,]),'MAP_TYPE':([0,37,46,86,87,94,96,111,113,],[22,22,22,22,22,22,22,22,22,]),'VAR':([0,37,46,86,87,94,96,111,113,],[23,23,23,23,23,23,23,23,23,]),'CONST':([0,37,46,86,87,94,96,111,113,],[24,24,24,24,24,24,24,24,24,]),'FINAL':([0,37,46,86,87,94,96,111,113,],[25,25,25,25,25,25,25,25,25,]),'VOID':([0,37,46,86,87,94,96,111,113,],[26,26,26,26,26,26,26,26,26,]),'INT':([0,29,30,31,32,33,35,36,45,57,73,74,75,76,77,78,83,87,94,96,111,113,],[27,27,27,27,27,27,49,49,49,49,49,49,49,49,49,49,-9,27,27,27,27,27,]),'DOUBLE':([0,29,30,31,32,33,35,36,45,57,73,74,75,76,77,78,83,87,94,96,111,113,],[28,28,28,28,28,28,50,50,50,50,50,50,50,50,50,50,-9,28,28,28,28,28,]),'$end':([1,2,3,4,5,6,7,8,9,10,16,27,28,39,40,41,42,43,44,82,83,99,101,105,106,109,115,117,118,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-15,-19,-11,-12,-13,-14,-16,-17,-18,-10,-56,-9,-51,-53,-49,-52,-58,-55,-54,-50,]),'RBRACE':([2,3,4,5,6,7,8,9,10,16,27,28,39,40,41,42,43,44,82,83,87,94,98,99,100,101,104,105,106,109,111,114,115,116,117,118,],[-1,-2,-3,-4,-5,-6,-7,-8,-15,-19,-11,-12,-13,-14,-16,-17,-18,-10,-56,-9,99,101,105,-51,106,-53,109,-49,-52,-58,115,117,-55,118,-54,-50,]),'PLUS':([2,10,16,27,28,39,40,41,42,43,49,50,55,103,108,],[29,-15,-19,-11,-12,-13,-14,-16,-17,-18,-11,-12,29,108,112,]),'MINUS':([2,10,16,27,28,39,40,41,42,43,49,50,55,],[30,-15,-19,-11,-12,-13,-14,-16,-17,-18,-11,-12,30,]),'EQUALS':([10,16,27,28,39,40,41,42,43,48,49,50,51,52,53,54,55,],[-15,-19,-11,-12,-13,-14,-16,-17,-18,73,-11,-12,-22,-23,-24,-25,-26,]),'NOT_EQUALS':([10,16,27,28,39,40,41,42,43,48,49,50,51,52,53,54,55,],[-15,-19,-11,-12,-13,-14,-16,-17,-18,74,-11,-12,-22,-23,-24,-25,-26,]),'GREATER_THAN':([10,16,27,28,39,40,41,42,43,48,49,50,51,52,53,54,55,60,61,62,63,64,65,],[-15,-19,-11,-12,-13,-14,-16,-17,-18,75,-11,-12,-22,-23,-24,-25,-26,82,-38,-39,-40,-41,-42,]),'LESS_THAN':([10,15,16,27,28,39,40,41,42,43,48,49,50,51,52,53,54,55,],[-15,38,-19,-11,-12,-13,-14,-16,-17,-18,76,-11,-12,-22,-23,-24,-25,-26,]),'GREATER_THAN_OR_EQUALS':([10,16,27,28,39,40,41,42,43,48,49,50,51,52,53,54,55,],[-15,-19,-11,-12,-13,-14,-16,-17,-18,77,-11,-12,-22,-23,-24,-25,-26,]),'LESS_THAN_OR_EQUALS':([10,16,27,28,39,40,41,42,43,48,49,50,51,52,53,54,55,],[-15,-19,-11,-12,-13,-14,-16,-17,-18,78,-11,-12,-22,-23,-24,-25,-26,]),'SEMICOLON':([10,16,27,28,34,39,40,41,42,43,49,50,51,52,53,54,55,66,80,88,89,90,91,92,93,],[-15,-19,-11,-12,44,-13,-14,-16,-17,-18,-11,-12,-22,-23,-24,-25,-26,83,95,-43,-44,-45,-46,-47,-48,]),'RPARENTHESIS':([10,16,27,28,39,40,41,42,43,46,47,49,50,51,52,53,54,55,56,68,69,70,71,84,88,89,90,91,92,93,97,102,112,],[-15,-19,-11,-12,-13,-14,-16,-17,-18,-64,72,-11,-12,-22,-23,-24,-25,-26,79,85,-62,-63,-60,-59,-43,-44,-45,-46,-47,-48,-61,107,-57,]),'TIMES':([10,16,27,28,39,40,41,42,43,49,50,],[31,-19,-11,-12,31,31,-16,-17,-18,-11,-12,]),'DIVIDE':([10,16,27,28,39,40,41,42,43,49,50,],[32,-19,-11,-12,32,32,-16,-17,-18,-11,-12,]),'MODULE':([10,16,27,28,39,40,41,42,43,49,50,],[33,-19,-11,-12,33,33,-16,-17,-18,-11,-12,]),'ID':([11,15,17,18,19,20,21,22,23,24,25,26,35,36,45,57,58,59,67,73,74,75,76,77,78,83,95,],[34,-32,-27,-28,-29,-30,-31,-33,-34,-35,-36,-37,54,54,54,54,81,-32,84,54,54,54,54,54,54,-9,103,]),'LPARENTHESIS':([12,13,14,34,],[35,36,37,46,]),'ASSIGN_OPERATOR':([34,81,],[45,45,]),'STRING':([35,36,45,57,73,74,75,76,77,78,83,],[51,51,51,51,51,51,51,51,51,51,-9,]),'BOOL':([35,36,45,57,73,74,75,76,77,78,83,],[52,52,52,52,52,52,52,52,52,52,-9,]),'NULL':([35,36,45,57,73,74,75,76,77,78,83,],[53,53,53,53,53,53,53,53,53,53,-9,]),'COMMA':([71,84,],[86,-59,]),'LBRACE':([72,79,85,107,110,],[87,94,96,111,113,]),'ELSE':([105,],[110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,87,94,96,111,113,],[1,98,100,104,114,116,]),'expression':([0,35,36,45,57,73,74,75,76,77,78,87,94,96,111,113,],[2,55,55,55,55,55,55,55,55,55,55,2,2,2,2,2,]),'declaration':([0,87,94,96,111,113,],[3,3,3,3,3,3,]),'assignation':([0,37,87,94,96,111,113,],[4,57,4,4,4,4,4,]),'function':([0,87,94,96,111,113,],[5,5,5,5,5,5,]),'if':([0,87,94,96,111,113,],[6,6,6,6,6,6,]),'while':([0,87,94,96,111,113,],[7,7,7,7,7,7,]),'for':([0,87,94,96,111,113,],[8,8,8,8,8,8,]),'list':([0,87,94,96,111,113,],[9,9,9,9,9,9,]),'term':([0,29,30,35,36,45,57,73,74,75,76,77,78,87,94,96,111,113,],[10,39,40,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'varType':([0,37,46,86,87,94,96,111,113,],[11,58,67,67,11,11,11,11,11,]),'numeric':([0,29,30,31,32,33,35,36,45,57,73,74,75,76,77,78,87,94,96,111,113,],[16,16,16,41,42,43,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'booleanExpression':([35,36,57,],[47,56,80,]),'variable':([35,36,45,57,73,74,75,76,77,78,],[48,48,66,48,88,89,90,91,92,93,]),'primitive':([38,],[60,]),'parameters':([46,],[68,]),'parametersList':([46,86,],[69,97,]),'empty':([46,],[70,]),'parameter':([46,86,],[71,71,]),'increment':([95,],[102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','yacc.py',7),
  ('statement -> declaration','statement',1,'p_statement','yacc.py',8),
  ('statement -> assignation','statement',1,'p_statement','yacc.py',9),
  ('statement -> function','statement',1,'p_statement','yacc.py',10),
  ('statement -> if','statement',1,'p_statement','yacc.py',11),
  ('statement -> while','statement',1,'p_statement','yacc.py',12),
  ('statement -> for','statement',1,'p_statement','yacc.py',13),
  ('statement -> list','statement',1,'p_statement','yacc.py',14),
  ('assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON','assignation',5,'p_assignation','yacc.py',17),
  ('declaration -> varType ID SEMICOLON','declaration',3,'p_declaration','yacc.py',20),
  ('numeric -> INT','numeric',1,'p_numeric','yacc.py',23),
  ('numeric -> DOUBLE','numeric',1,'p_numeric','yacc.py',24),
  ('expression -> expression PLUS term','expression',3,'p_plusOperation','yacc.py',27),
  ('expression -> expression MINUS term','expression',3,'p_minuxOperation','yacc.py',29),
  ('expression -> term','expression',1,'p_expressionTerm','yacc.py',32),
  ('term -> term TIMES numeric','term',3,'p_termTimes','yacc.py',35),
  ('term -> term DIVIDE numeric','term',3,'p_termDivide','yacc.py',38),
  ('term -> term MODULE numeric','term',3,'p_termModule','yacc.py',41),
  ('term -> numeric','term',1,'p_termValue','yacc.py',44),
  ('variable -> INT','variable',1,'p_variable','yacc.py',47),
  ('variable -> DOUBLE','variable',1,'p_variable','yacc.py',48),
  ('variable -> STRING','variable',1,'p_variable','yacc.py',49),
  ('variable -> BOOL','variable',1,'p_variable','yacc.py',50),
  ('variable -> NULL','variable',1,'p_variable','yacc.py',51),
  ('variable -> ID','variable',1,'p_variable','yacc.py',52),
  ('variable -> expression','variable',1,'p_variable','yacc.py',53),
  ('varType -> INT_TYPE','varType',1,'p_varType','yacc.py',57),
  ('varType -> STRING_TYPE','varType',1,'p_varType','yacc.py',58),
  ('varType -> NUM_TYPE','varType',1,'p_varType','yacc.py',59),
  ('varType -> DOUBLE_TYPE','varType',1,'p_varType','yacc.py',60),
  ('varType -> BOOL_TYPE','varType',1,'p_varType','yacc.py',61),
  ('varType -> LIST_TYPE','varType',1,'p_varType','yacc.py',62),
  ('varType -> MAP_TYPE','varType',1,'p_varType','yacc.py',63),
  ('varType -> VAR','varType',1,'p_varType','yacc.py',64),
  ('varType -> CONST','varType',1,'p_varType','yacc.py',65),
  ('varType -> FINAL','varType',1,'p_varType','yacc.py',66),
  ('varType -> VOID','varType',1,'p_varType','yacc.py',67),
  ('primitive -> INT_TYPE','primitive',1,'p_primitive','yacc.py',70),
  ('primitive -> STRING_TYPE','primitive',1,'p_primitive','yacc.py',71),
  ('primitive -> NUM_TYPE','primitive',1,'p_primitive','yacc.py',72),
  ('primitive -> DOUBLE_TYPE','primitive',1,'p_primitive','yacc.py',73),
  ('primitive -> BOOL_TYPE','primitive',1,'p_primitive','yacc.py',74),
  ('booleanExpression -> variable EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',77),
  ('booleanExpression -> variable NOT_EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',78),
  ('booleanExpression -> variable GREATER_THAN variable','booleanExpression',3,'p_booleanExpression','yacc.py',79),
  ('booleanExpression -> variable LESS_THAN variable','booleanExpression',3,'p_booleanExpression','yacc.py',80),
  ('booleanExpression -> variable GREATER_THAN_OR_EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',81),
  ('booleanExpression -> variable LESS_THAN_OR_EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',82),
  ('if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE','if',7,'p_if','yacc.py',85),
  ('if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE','if',11,'p_if','yacc.py',86),
  ('if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE','if',6,'p_if','yacc.py',87),
  ('while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE','while',7,'p_while','yacc.py',90),
  ('while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE','while',6,'p_while','yacc.py',91),
  ('for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE','for',10,'p_for','yacc.py',94),
  ('for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE','for',9,'p_for','yacc.py',95),
  ('list -> LIST_TYPE LESS_THAN primitive GREATER_THAN','list',4,'p_list','yacc.py',98),
  ('increment -> ID PLUS PLUS','increment',3,'p_increment','yacc.py',101),
  ('function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE','function',8,'p_function','yacc.py',104),
  ('parameter -> varType ID','parameter',2,'p_parameter','yacc.py',107),
  ('parametersList -> parameter','parametersList',1,'p_parametersList','yacc.py',110),
  ('parametersList -> parameter COMMA parametersList','parametersList',3,'p_parametersList','yacc.py',111),
  ('parameters -> parametersList','parameters',1,'p_parameters','yacc.py',114),
  ('parameters -> empty','parameters',1,'p_parameters','yacc.py',115),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',118),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programABSTRACT AND ARROW ASSIGN_OPERATOR BOOL BOOL_TYPE BREAK CASE CLASS COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DOT DOUBLE DOUBLE_TYPE ELSE ENUM EQUALS EXPORT FALSE FINAL FINALLY FOR GREATER_THAN GREATER_THAN_OR_EQUALS ID IF IMPORT INCREMENT INT INT_TYPE LATE LBRACE LBRACKET LESS_THAN LESS_THAN_OR_EQUALS LIST_TYPE LPARENTHESIS MAP_TYPE MINUS MODULE NOT NOT_EQUALS NULL NULL_TYPE NUM_TYPE OR PLUS PRINT RBRACE RBRACKET READ RETURN RPARENTHESIS SEMICOLON SET_TYPE STATIC STDIN STRING STRING_TYPE SWITCH TIMES TRUE TRY TYPEDEF VAR VOID WHILEprogram : statementsstatements : statements statement\n| statementstatement : expression SEMICOLON\n| declaration\n| assignation\n| assignation_no_type\n| function\n| if\n| while\n| for\n| print\n| input\n| class_def\n| enum\n| try\n| switch\n| list\n| set\n| map\n| emptydeclaration : varType ID SEMICOLONassignation : varType ID ASSIGN_OPERATOR variable SEMICOLONassignation_no_type : ID ASSIGN_OPERATOR variable SEMICOLONexpression : expression PLUS term\n| expression MINUS termexpression : termterm : term TIMES factor\n| term DIVIDE factor\n| term MODULE factorterm : factorfactor : INT\n| DOUBLEvariable : INT \n| DOUBLE \n| STRING \n| BOOL  \n| NULL\n| ID\n| expressionvarType : INT_TYPE \n| STRING_TYPE \n| NUM_TYPE \n| DOUBLE_TYPE \n| BOOL_TYPE \n| LIST_TYPE \n| MAP_TYPE \n| SET_TYPE\n| VAR \n| CONST \n| FINAL \n| VOIDbooleanExpression : variable EQUALS variable\n| variable NOT_EQUALS variable\n| variable GREATER_THAN variable\n| variable LESS_THAN variable\n| variable GREATER_THAN_OR_EQUALS variable\n| variable LESS_THAN_OR_EQUALS variableif : IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE\n| IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE ELSE LBRACE statements RBRACEwhile : WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACEfor : FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACEincrement : ID INCREMENTprint : PRINT LPARENTHESIS expression RPARENTHESIS SEMICOLONinput : ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLONclass_def : CLASS ID LBRACE class_members RBRACEclass_members : class_members class_member\n| class_memberclass_member : varType ID SEMICOLON\n| functionfunction : varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACEenum : ENUM ID LBRACE enum_values RBRACEenum_values : enum_values COMMA ID\n| IDtry : TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACEswitch : SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACEcases : cases case\n| casecase : CASE variable COLON statements BREAK SEMICOLONdefault_case : DEFAULT COLON statementsparameters : parameters COMMA parameter\n| parameter\n| emptyparameter : varType IDlist : emptyset : emptymap : emptyempty :'
    
_lr_action_items = {'ID':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,29,30,34,35,36,37,38,39,40,41,42,43,44,45,48,49,56,57,58,63,64,70,71,85,86,89,90,93,97,100,101,102,103,104,105,112,118,123,130,131,132,133,136,137,140,143,144,149,152,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[24,24,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,55,61,62,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-2,-4,73,73,73,24,73,-22,73,73,108,114,24,119,-24,73,73,73,73,73,73,135,-23,24,24,146,-64,-66,-72,148,24,24,24,24,73,24,-59,-61,24,-71,-65,24,-75,-76,24,24,24,24,24,24,24,-62,-60,]),'IF':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,63,70,90,97,118,123,130,132,133,136,140,143,144,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[25,25,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,25,-22,25,-24,-23,25,25,-64,-66,-72,25,25,25,25,25,-59,-61,25,-71,-65,25,-75,-76,25,25,25,25,25,25,25,-62,-60,]),'WHILE':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,63,70,90,97,118,123,130,132,133,136,140,143,144,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[26,26,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,26,-22,26,-24,-23,26,26,-64,-66,-72,26,26,26,26,26,-59,-61,26,-71,-65,26,-75,-76,26,26,26,26,26,26,26,-62,-60,]),'FOR':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,63,70,90,97,118,123,130,132,133,136,140,143,144,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[27,27,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,27,-22,27,-24,-23,27,27,-64,-66,-72,27,27,27,27,27,-59,-61,27,-71,-65,27,-75,-76,27,27,27,27,27,27,27,-62,-60,]),'PRINT':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,63,70,90,97,118,123,130,132,133,136,140,143,144,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[28,28,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,28,-22,28,-24,-23,28,28,-64,-66,-72,28,28,28,28,28,-59,-61,28,-71,-65,28,-75,-76,28,28,28,28,28,28,28,-62,-60,]),'CLASS':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,63,70,90,97,118,123,130,132,133,136,140,143,144,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[29,29,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,29,-22,29,-24,-23,29,29,-64,-66,-72,29,29,29,29,29,-59,-61,29,-71,-65,29,-75,-76,29,29,29,29,29,29,29,-62,-60,]),'ENUM':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,63,70,90,97,118,123,130,132,133,136,140,143,144,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[30,30,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,30,-22,30,-24,-23,30,30,-64,-66,-72,30,30,30,30,30,-59,-61,30,-71,-65,30,-75,-76,30,30,30,30,30,30,30,-62,-60,]),'TRY':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,63,70,90,97,118,123,130,132,133,136,140,143,144,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[31,31,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,31,-22,31,-24,-23,31,31,-64,-66,-72,31,31,31,31,31,-59,-61,31,-71,-65,31,-75,-76,31,31,31,31,31,31,31,-62,-60,]),'SWITCH':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,63,70,90,97,118,123,130,132,133,136,140,143,144,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[32,32,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,32,-22,32,-24,-23,32,32,-64,-66,-72,32,32,32,32,32,-59,-61,32,-71,-65,32,-75,-76,32,32,32,32,32,32,32,-62,-60,]),'INT_TYPE':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[34,34,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,34,34,-22,34,34,34,-24,34,-68,-70,-23,34,34,34,-64,-66,-67,-72,34,34,34,-69,34,34,-59,-61,34,-71,-65,34,-75,-76,34,34,34,34,34,34,34,-62,-60,]),'STRING_TYPE':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[35,35,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,35,35,-22,35,35,35,-24,35,-68,-70,-23,35,35,35,-64,-66,-67,-72,35,35,35,-69,35,35,-59,-61,35,-71,-65,35,-75,-76,35,35,35,35,35,35,35,-62,-60,]),'NUM_TYPE':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[36,36,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,36,36,-22,36,36,36,-24,36,-68,-70,-23,36,36,36,-64,-66,-67,-72,36,36,36,-69,36,36,-59,-61,36,-71,-65,36,-75,-76,36,36,36,36,36,36,36,-62,-60,]),'DOUBLE_TYPE':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[37,37,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,37,37,-22,37,37,37,-24,37,-68,-70,-23,37,37,37,-64,-66,-67,-72,37,37,37,-69,37,37,-59,-61,37,-71,-65,37,-75,-76,37,37,37,37,37,37,37,-62,-60,]),'BOOL_TYPE':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[38,38,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,38,38,-22,38,38,38,-24,38,-68,-70,-23,38,38,38,-64,-66,-67,-72,38,38,38,-69,38,38,-59,-61,38,-71,-65,38,-75,-76,38,38,38,38,38,38,38,-62,-60,]),'LIST_TYPE':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[39,39,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,39,39,-22,39,39,39,-24,39,-68,-70,-23,39,39,39,-64,-66,-67,-72,39,39,39,-69,39,39,-59,-61,39,-71,-65,39,-75,-76,39,39,39,39,39,39,39,-62,-60,]),'MAP_TYPE':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[40,40,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,40,40,-22,40,40,40,-24,40,-68,-70,-23,40,40,40,-64,-66,-67,-72,40,40,40,-69,40,40,-59,-61,40,-71,-65,40,-75,-76,40,40,40,40,40,40,40,-62,-60,]),'SET_TYPE':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[41,41,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,41,41,-22,41,41,41,-24,41,-68,-70,-23,41,41,41,-64,-66,-67,-72,41,41,41,-69,41,41,-59,-61,41,-71,-65,41,-75,-76,41,41,41,41,41,41,41,-62,-60,]),'VAR':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[42,42,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,42,42,-22,42,42,42,-24,42,-68,-70,-23,42,42,42,-64,-66,-67,-72,42,42,42,-69,42,42,-59,-61,42,-71,-65,42,-75,-76,42,42,42,42,42,42,42,-62,-60,]),'CONST':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[43,43,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,43,43,-22,43,43,43,-24,43,-68,-70,-23,43,43,43,-64,-66,-67,-72,43,43,43,-69,43,43,-59,-61,43,-71,-65,43,-75,-76,43,43,43,43,43,43,43,-62,-60,]),'FINAL':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[44,44,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,44,44,-22,44,44,44,-24,44,-68,-70,-23,44,44,44,-64,-66,-67,-72,44,44,44,-69,44,44,-59,-61,44,-71,-65,44,-75,-76,44,44,44,44,44,44,44,-62,-60,]),'VOID':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,59,63,70,72,88,90,97,110,111,113,118,121,123,130,132,133,134,136,140,143,144,147,149,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[45,45,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,45,45,-22,45,45,45,-24,45,-68,-70,-23,45,45,45,-64,-66,-67,-72,45,45,45,-69,45,45,-59,-61,45,-71,-65,45,-75,-76,45,45,45,45,45,45,45,-62,-60,]),'INT':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,50,51,52,53,54,56,57,58,60,63,64,70,71,85,90,97,100,101,102,103,104,105,118,123,130,132,133,136,140,143,144,149,152,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[46,46,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,46,46,46,46,46,76,76,76,46,46,76,-22,76,76,46,-24,76,76,76,76,76,76,-23,46,46,-64,-66,-72,46,46,46,46,76,46,-59,-61,46,-71,-65,46,-75,-76,46,46,46,46,46,46,46,-62,-60,]),'DOUBLE':([0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,50,51,52,53,54,56,57,58,60,63,64,70,71,85,90,97,100,101,102,103,104,105,118,123,130,132,133,136,140,143,144,149,152,153,155,156,159,164,165,167,168,169,170,171,172,173,174,175,176,177,179,],[47,47,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,47,47,47,47,47,77,77,77,47,47,77,-22,77,77,47,-24,77,77,77,77,77,77,-23,47,47,-64,-66,-72,47,47,47,47,77,47,-59,-61,47,-71,-65,47,-75,-76,47,47,47,47,47,47,47,-62,-60,]),'$end':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,70,97,118,132,133,136,155,156,164,165,168,169,177,179,],[-88,0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,-22,-24,-23,-64,-66,-72,-59,-61,-71,-65,-75,-76,-62,-60,]),'RBRACE':([3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,63,70,90,97,110,111,113,114,115,118,123,130,132,133,134,136,140,143,144,147,148,149,153,155,156,159,160,164,165,167,168,169,170,172,173,174,176,177,179,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,-88,-22,116,-24,133,-68,-70,-74,136,-23,-88,-88,-64,-66,-67,-72,-88,155,156,-69,-73,-88,164,-59,-61,168,169,-71,-65,-88,-75,-76,-88,-88,177,-80,179,-62,-60,]),'BREAK':([3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,48,49,70,97,118,132,133,136,155,156,164,165,168,169,171,175,177,179,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-4,-22,-24,-23,-64,-66,-72,-59,-61,-71,-65,-75,-76,-88,178,-62,-60,]),'SEMICOLON':([4,22,33,46,47,55,65,66,67,68,69,73,74,76,77,78,79,80,81,92,107,109,124,125,126,127,128,129,135,154,178,],[49,-27,-31,-32,-33,70,-25,-26,-28,-29,-30,-39,97,-32,-33,-36,-37,-38,-40,118,131,132,-53,-54,-55,-56,-57,-58,147,165,180,]),'PLUS':([4,22,33,46,47,65,66,67,68,69,76,77,81,87,],[50,-27,-31,-32,-33,-25,-26,-28,-29,-30,-32,-33,50,50,]),'MINUS':([4,22,33,46,47,65,66,67,68,69,76,77,81,87,],[51,-27,-31,-32,-33,-25,-26,-28,-29,-30,-32,-33,51,51,]),'EQUALS':([22,33,46,47,65,66,67,68,69,73,76,77,78,79,80,81,83,],[-27,-31,-32,-33,-25,-26,-28,-29,-30,-39,-32,-33,-36,-37,-38,-40,100,]),'NOT_EQUALS':([22,33,46,47,65,66,67,68,69,73,76,77,78,79,80,81,83,],[-27,-31,-32,-33,-25,-26,-28,-29,-30,-39,-32,-33,-36,-37,-38,-40,101,]),'GREATER_THAN':([22,33,46,47,65,66,67,68,69,73,76,77,78,79,80,81,83,],[-27,-31,-32,-33,-25,-26,-28,-29,-30,-39,-32,-33,-36,-37,-38,-40,102,]),'LESS_THAN':([22,33,46,47,65,66,67,68,69,73,76,77,78,79,80,81,83,],[-27,-31,-32,-33,-25,-26,-28,-29,-30,-39,-32,-33,-36,-37,-38,-40,103,]),'GREATER_THAN_OR_EQUALS':([22,33,46,47,65,66,67,68,69,73,76,77,78,79,80,81,83,],[-27,-31,-32,-33,-25,-26,-28,-29,-30,-39,-32,-33,-36,-37,-38,-40,104,]),'LESS_THAN_OR_EQUALS':([22,33,46,47,65,66,67,68,69,73,76,77,78,79,80,81,83,],[-27,-31,-32,-33,-25,-26,-28,-29,-30,-39,-32,-33,-36,-37,-38,-40,105,]),'RPARENTHESIS':([22,33,46,47,65,66,67,68,69,72,73,76,77,78,79,80,81,82,84,87,91,94,95,96,119,124,125,126,127,128,129,141,142,145,158,],[-27,-31,-32,-33,-25,-26,-28,-29,-30,-88,-39,-32,-33,-36,-37,-38,-40,99,106,109,117,120,-82,-83,-84,-53,-54,-55,-56,-57,-58,-81,154,157,-63,]),'COLON':([22,33,46,47,65,66,67,68,69,73,76,77,78,79,80,81,162,163,],[-27,-31,-32,-33,-25,-26,-28,-29,-30,-39,-32,-33,-36,-37,-38,-40,170,171,]),'TIMES':([22,33,46,47,65,66,67,68,69,76,77,],[52,-31,-32,-33,52,52,-28,-29,-30,-32,-33,]),'DIVIDE':([22,33,46,47,65,66,67,68,69,76,77,],[53,-31,-32,-33,53,53,-28,-29,-30,-32,-33,]),'MODULE':([22,33,46,47,65,66,67,68,69,76,77,],[54,-31,-32,-33,54,54,-28,-29,-30,-32,-33,]),'ASSIGN_OPERATOR':([24,55,108,],[56,71,71,]),'LPARENTHESIS':([25,26,27,28,32,55,122,135,],[57,58,59,60,64,72,142,72,]),'LBRACE':([31,61,62,99,106,117,120,138,157,166,],[63,88,89,123,130,139,140,149,167,172,]),'STDIN':([56,],[75,]),'STRING':([56,57,58,64,71,85,100,101,102,103,104,105,118,152,],[78,78,78,78,78,78,78,78,78,78,78,78,-23,78,]),'BOOL':([56,57,58,64,71,85,100,101,102,103,104,105,118,152,],[79,79,79,79,79,79,79,79,79,79,79,79,-23,79,]),'NULL':([56,57,58,64,71,85,100,101,102,103,104,105,118,152,],[80,80,80,80,80,80,80,80,80,80,80,80,-23,80,]),'COMMA':([72,94,95,96,114,115,119,141,148,],[-88,121,-82,-83,-74,137,-84,-81,-73,]),'DOT':([75,],[98,]),'READ':([98,],[122,]),'FINALLY':([116,],[138,]),'CASE':([139,150,151,161,180,],[152,152,-78,-77,-79,]),'INCREMENT':([146,],[158,]),'DEFAULT':([150,151,161,180,],[162,-78,-77,-79,]),'ELSE':([155,],[166,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,63,123,130,140,149,167,170,171,172,],[2,90,143,144,153,159,173,174,175,176,]),'statement':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[3,48,3,48,3,3,3,48,48,3,48,48,3,3,3,3,48,48,48,48,]),'expression':([0,2,56,57,58,60,63,64,71,85,90,100,101,102,103,104,105,123,130,140,143,144,149,152,153,159,167,170,171,172,173,174,175,176,],[4,4,81,81,81,87,4,81,81,81,4,81,81,81,81,81,81,4,4,4,4,4,4,81,4,4,4,4,4,4,4,4,4,4,]),'declaration':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'assignation':([0,2,59,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[6,6,85,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'assignation_no_type':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'function':([0,2,63,88,90,110,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[8,8,8,113,8,113,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'if':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'while':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'for':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'print':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'input':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'class_def':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'enum':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'try':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'switch':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'list':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'set':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'map':([0,2,63,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'empty':([0,2,63,72,90,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[21,21,21,96,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'term':([0,2,50,51,56,57,58,60,63,64,71,85,90,100,101,102,103,104,105,123,130,140,143,144,149,152,153,159,167,170,171,172,173,174,175,176,],[22,22,65,66,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'varType':([0,2,59,63,72,88,90,110,121,123,130,140,143,144,149,153,159,167,170,171,172,173,174,175,176,],[23,23,86,23,93,112,23,112,93,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'factor':([0,2,50,51,52,53,54,56,57,58,60,63,64,71,85,90,100,101,102,103,104,105,123,130,140,143,144,149,152,153,159,167,170,171,172,173,174,175,176,],[33,33,33,33,67,68,69,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'variable':([56,57,58,64,71,85,100,101,102,103,104,105,152,],[74,83,83,91,92,83,124,125,126,127,128,129,163,]),'booleanExpression':([57,58,85,],[82,84,107,]),'parameters':([72,],[94,]),'parameter':([72,121,],[95,141,]),'class_members':([88,],[110,]),'class_member':([88,110,],[111,134,]),'enum_values':([89,],[115,]),'increment':([131,],[145,]),'cases':([139,],[150,]),'case':([139,150,],[151,161,]),'default_case':([150,],[160,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','analizadorSintax.py',16),
  ('statements -> statements statement','statements',2,'p_statements','analizadorSintax.py',20),
  ('statements -> statement','statements',1,'p_statements','analizadorSintax.py',21),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','analizadorSintax.py',29),
  ('statement -> declaration','statement',1,'p_statement','analizadorSintax.py',30),
  ('statement -> assignation','statement',1,'p_statement','analizadorSintax.py',31),
  ('statement -> assignation_no_type','statement',1,'p_statement','analizadorSintax.py',32),
  ('statement -> function','statement',1,'p_statement','analizadorSintax.py',33),
  ('statement -> if','statement',1,'p_statement','analizadorSintax.py',34),
  ('statement -> while','statement',1,'p_statement','analizadorSintax.py',35),
  ('statement -> for','statement',1,'p_statement','analizadorSintax.py',36),
  ('statement -> print','statement',1,'p_statement','analizadorSintax.py',37),
  ('statement -> input','statement',1,'p_statement','analizadorSintax.py',38),
  ('statement -> class_def','statement',1,'p_statement','analizadorSintax.py',39),
  ('statement -> enum','statement',1,'p_statement','analizadorSintax.py',40),
  ('statement -> try','statement',1,'p_statement','analizadorSintax.py',41),
  ('statement -> switch','statement',1,'p_statement','analizadorSintax.py',42),
  ('statement -> list','statement',1,'p_statement','analizadorSintax.py',43),
  ('statement -> set','statement',1,'p_statement','analizadorSintax.py',44),
  ('statement -> map','statement',1,'p_statement','analizadorSintax.py',45),
  ('statement -> empty','statement',1,'p_statement','analizadorSintax.py',46),
  ('declaration -> varType ID SEMICOLON','declaration',3,'p_declaration','analizadorSintax.py',50),
  ('assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON','assignation',5,'p_assignation','analizadorSintax.py',56),
  ('assignation_no_type -> ID ASSIGN_OPERATOR variable SEMICOLON','assignation_no_type',4,'p_assignation_no_type','analizadorSintax.py',72),
  ('expression -> expression PLUS term','expression',3,'p_expression_operations','analizadorSintax.py',85),
  ('expression -> expression MINUS term','expression',3,'p_expression_operations','analizadorSintax.py',86),
  ('expression -> term','expression',1,'p_expression_term','analizadorSintax.py',91),
  ('term -> term TIMES factor','term',3,'p_term_operations','analizadorSintax.py',95),
  ('term -> term DIVIDE factor','term',3,'p_term_operations','analizadorSintax.py',96),
  ('term -> term MODULE factor','term',3,'p_term_operations','analizadorSintax.py',97),
  ('term -> factor','term',1,'p_term_factor','analizadorSintax.py',102),
  ('factor -> INT','factor',1,'p_factor_numeric','analizadorSintax.py',106),
  ('factor -> DOUBLE','factor',1,'p_factor_numeric','analizadorSintax.py',107),
  ('variable -> INT','variable',1,'p_variable','analizadorSintax.py',112),
  ('variable -> DOUBLE','variable',1,'p_variable','analizadorSintax.py',113),
  ('variable -> STRING','variable',1,'p_variable','analizadorSintax.py',114),
  ('variable -> BOOL','variable',1,'p_variable','analizadorSintax.py',115),
  ('variable -> NULL','variable',1,'p_variable','analizadorSintax.py',116),
  ('variable -> ID','variable',1,'p_variable','analizadorSintax.py',117),
  ('variable -> expression','variable',1,'p_variable','analizadorSintax.py',118),
  ('varType -> INT_TYPE','varType',1,'p_varType','analizadorSintax.py',134),
  ('varType -> STRING_TYPE','varType',1,'p_varType','analizadorSintax.py',135),
  ('varType -> NUM_TYPE','varType',1,'p_varType','analizadorSintax.py',136),
  ('varType -> DOUBLE_TYPE','varType',1,'p_varType','analizadorSintax.py',137),
  ('varType -> BOOL_TYPE','varType',1,'p_varType','analizadorSintax.py',138),
  ('varType -> LIST_TYPE','varType',1,'p_varType','analizadorSintax.py',139),
  ('varType -> MAP_TYPE','varType',1,'p_varType','analizadorSintax.py',140),
  ('varType -> SET_TYPE','varType',1,'p_varType','analizadorSintax.py',141),
  ('varType -> VAR','varType',1,'p_varType','analizadorSintax.py',142),
  ('varType -> CONST','varType',1,'p_varType','analizadorSintax.py',143),
  ('varType -> FINAL','varType',1,'p_varType','analizadorSintax.py',144),
  ('varType -> VOID','varType',1,'p_varType','analizadorSintax.py',145),
  ('booleanExpression -> variable EQUALS variable','booleanExpression',3,'p_boolean_expression','analizadorSintax.py',151),
  ('booleanExpression -> variable NOT_EQUALS variable','booleanExpression',3,'p_boolean_expression','analizadorSintax.py',152),
  ('booleanExpression -> variable GREATER_THAN variable','booleanExpression',3,'p_boolean_expression','analizadorSintax.py',153),
  ('booleanExpression -> variable LESS_THAN variable','booleanExpression',3,'p_boolean_expression','analizadorSintax.py',154),
  ('booleanExpression -> variable GREATER_THAN_OR_EQUALS variable','booleanExpression',3,'p_boolean_expression','analizadorSintax.py',155),
  ('booleanExpression -> variable LESS_THAN_OR_EQUALS variable','booleanExpression',3,'p_boolean_expression','analizadorSintax.py',156),
  ('if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE','if',7,'p_if','analizadorSintax.py',160),
  ('if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE ELSE LBRACE statements RBRACE','if',11,'p_if','analizadorSintax.py',161),
  ('while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE','while',7,'p_while','analizadorSintax.py',164),
  ('for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE','for',10,'p_for','analizadorSintax.py',167),
  ('increment -> ID INCREMENT','increment',2,'p_increment','analizadorSintax.py',170),
  ('print -> PRINT LPARENTHESIS expression RPARENTHESIS SEMICOLON','print',5,'p_print','analizadorSintax.py',173),
  ('input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON','input',8,'p_input','analizadorSintax.py',176),
  ('class_def -> CLASS ID LBRACE class_members RBRACE','class_def',5,'p_class_def','analizadorSintax.py',179),
  ('class_members -> class_members class_member','class_members',2,'p_class_members','analizadorSintax.py',182),
  ('class_members -> class_member','class_members',1,'p_class_members','analizadorSintax.py',183),
  ('class_member -> varType ID SEMICOLON','class_member',3,'p_class_member','analizadorSintax.py',186),
  ('class_member -> function','class_member',1,'p_class_member','analizadorSintax.py',187),
  ('function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE','function',8,'p_function','analizadorSintax.py',190),
  ('enum -> ENUM ID LBRACE enum_values RBRACE','enum',5,'p_enum','analizadorSintax.py',194),
  ('enum_values -> enum_values COMMA ID','enum_values',3,'p_enum_values','analizadorSintax.py',197),
  ('enum_values -> ID','enum_values',1,'p_enum_values','analizadorSintax.py',198),
  ('try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE','try',8,'p_try','analizadorSintax.py',202),
  ('switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE','switch',8,'p_switch','analizadorSintax.py',206),
  ('cases -> cases case','cases',2,'p_cases','analizadorSintax.py',209),
  ('cases -> case','cases',1,'p_cases','analizadorSintax.py',210),
  ('case -> CASE variable COLON statements BREAK SEMICOLON','case',6,'p_case','analizadorSintax.py',213),
  ('default_case -> DEFAULT COLON statements','default_case',3,'p_default_case','analizadorSintax.py',216),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','analizadorSintax.py',220),
  ('parameters -> parameter','parameters',1,'p_parameters','analizadorSintax.py',221),
  ('parameters -> empty','parameters',1,'p_parameters','analizadorSintax.py',222),
  ('parameter -> varType ID','parameter',2,'p_parameter','analizadorSintax.py',225),
  ('list -> empty','list',1,'p_list','analizadorSintax.py',228),
  ('set -> empty','set',1,'p_set','analizadorSintax.py',229),
  ('map -> empty','map',1,'p_map','analizadorSintax.py',230),
  ('empty -> <empty>','empty',0,'p_empty','analizadorSintax.py',232),
]

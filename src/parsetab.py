
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programnonassocIFXnonassocELSEABSTRACT AND ARROW ASSIGN_OPERATOR BOOL BOOL_TYPE BREAK CASE CLASS COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_EQUALS DOT DOUBLE DOUBLE_TYPE ELSE ENUM EQUALS EXPORT FALSE FINAL FINALLY FOR GREATER_THAN GREATER_THAN_OR_EQUALS ID IF IMPORT IN INCREMENT INT INT_TYPE LATE LBRACE LBRACKET LESS_THAN LESS_THAN_OR_EQUALS LIST_TYPE LPARENTHESIS MAP_TYPE MINUS MINUS_EQUALS MODULE NOT NOT_EQUALS NULL NULL_TYPE NUM_TYPE OR PLUS PLUS_EQUALS PRINT RBRACE RBRACKET READ RETURN RPARENTHESIS SEMICOLON SET_TYPE STATIC STDIN STRING STRING_TYPE SWITCH TIMES TIMES_EQUALS TRUE TRY TYPEDEF VAR VOID WHILEprogram : statementsstatements : statements statement\n                  | statementstatement : LBRACE statements RBRACEstatement : expression SEMICOLON\n                 | declaration SEMICOLON\n                 | assignation SEMICOLON\n                 | increment SEMICOLON\n                 | decrement SEMICOLON\n                 | import SEMICOLON\n                 | function\n                 | if\n                 | while\n                 | for\n                 | print\n                 | input\n                 | class_def\n                 | enum\n                 | try\n                 | switch\n                 | emptydeclaration : declaration_modifier varType ID \n                   | declaration_modifier ID \n                   | varType IDdeclaration : LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literallist_literal : LBRACKET list_elements RBRACKETlist_elements : list_elements COMMA variable\n                     | variable\n                     | emptydeclaration : MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literalmap_literal : LBRACE map_elements RBRACEmap_elements : map_elements COMMA map_pair\n                   | map_pair\n                   | emptymap_pair : variable COLON variableimport : IMPORT STRING SEMICOLONassignation : ID PLUS_EQUALS expression\n                   | ID MINUS_EQUALS expression\n                   | ID TIMES_EQUALS expression\n                   | ID DIVIDE_EQUALS expressionassignation : declaration ASSIGN_OPERATOR variableassignation : ID ASSIGN_OPERATOR variablevarType   : INT_TYPE \n                 | STRING_TYPE \n                 | NUM_TYPE \n                 | DOUBLE_TYPE \n                 | BOOL_TYPE \n                 | LIST_TYPE \n                 | MAP_TYPE \n                 | SET_TYPE\n                 | VOIDdeclaration_modifier : VAR \n                            | CONST \n                            | FINALvariable : INT\n                | DOUBLE\n                | STRING\n                | BOOL\n                | NULL\n                | ID\n                | expressionexpression : expression PLUS term\n                  | expression MINUS termexpression : termterm : term TIMES factor\n            | term DIVIDE factor\n            | term MODULE factorterm : factorfactor : ID LBRACKET expression RBRACKETfactor : ID DOT IDfactor : IDfactor : LPARENTHESIS expression RPARENTHESISfactor : INT\n              | DOUBLEbooleanExpression : variable EQUALS variable\n                         | variable NOT_EQUALS variable\n                         | variable GREATER_THAN variable\n                         | variable LESS_THAN variable\n                         | variable GREATER_THAN_OR_EQUALS variable\n                         | variable LESS_THAN_OR_EQUALS variablebooleanExpression : booleanExpression AND booleanExpression\n                         | booleanExpression OR booleanExpressionbooleanExpression : LPARENTHESIS booleanExpression RPARENTHESISbooleanExpression : variableif : IF LPARENTHESIS booleanExpression RPARENTHESIS statement %prec IFXif : IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statementwhile : WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACEfor : FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE\n           | FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACEfor : FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACEincrement : ID INCREMENTdecrement : ID DECREMENTfunction : varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACEfunction : varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLONtypedef : TYPEDEF ID ASSIGN_OPERATOR varType function LPARENTHESIS parameters RPARENTHESIS SEMICOLONenum : ENUM ID LBRACE enum_values RBRACEenum_values : enum_values COMMA ID\n                   | IDtry : TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACEswitch : SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACEcases : cases case\n             | casecase : CASE variable COLON statements BREAK SEMICOLONdefault_case : DEFAULT COLON statementsparameters : parameters COMMA parameter\n                  | parameter\n                  | emptyparameter : varType IDprint : PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLONinput : ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLONclass_def : CLASS ID LBRACE class_members RBRACEclass_members : class_members class_member\n                     | class_memberclass_member : varType ID SEMICOLON\n                    | functionempty :'
    
_lr_action_items = {'LBRACE':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,36,51,52,53,56,58,59,60,61,88,89,90,92,133,145,154,166,168,174,183,186,187,190,192,194,200,201,206,210,216,217,221,222,227,228,229,233,234,235,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[4,4,-3,4,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,90,-2,4,-5,-6,-7,-8,-9,-10,131,132,4,-4,4,4,183,193,194,-85,4,-109,-111,-96,206,4,4,4,4,4,-86,-87,236,4,-93,-94,-110,244,245,246,4,-99,-100,4,4,4,4,4,4,4,4,4,-90,-88,-89,]),'LIST_TYPE':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,23,39,40,41,51,52,53,56,58,59,60,61,79,80,86,90,92,107,131,133,142,145,159,160,162,169,174,183,186,187,188,190,194,200,201,204,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[26,26,-3,26,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,67,-52,-53,-54,-2,26,-5,-6,-7,-8,-9,-10,67,67,128,26,-4,67,67,26,67,26,67,-113,-115,67,-85,26,-109,-111,-112,-96,26,26,26,-114,26,26,-86,-87,26,-93,-94,-110,26,-99,-100,26,26,26,26,26,26,26,26,26,-90,-88,-89,]),'MAP_TYPE':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,23,39,40,41,51,52,53,56,58,59,60,61,79,80,86,90,92,107,131,133,142,145,159,160,162,169,174,183,186,187,188,190,194,200,201,204,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[27,27,-3,27,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,68,-52,-53,-54,-2,27,-5,-6,-7,-8,-9,-10,68,68,129,27,-4,68,68,27,68,27,68,-113,-115,68,-85,27,-109,-111,-112,-96,27,27,27,-114,27,27,-86,-87,27,-93,-94,-110,27,-99,-100,27,27,27,27,27,27,27,27,27,-90,-88,-89,]),'ID':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,23,24,26,27,29,34,35,39,40,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,70,71,72,73,74,77,78,84,85,86,87,90,91,92,120,125,128,129,132,133,135,141,145,146,147,148,149,150,151,152,153,155,157,161,174,183,185,186,187,190,191,194,195,199,200,201,202,206,209,210,214,216,217,222,227,228,229,236,237,238,239,240,242,244,245,246,247,248,249,255,256,257,260,261,262,263,],[25,25,-3,25,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,66,69,-48,-49,83,88,89,-52,-53,-54,-43,-44,-45,-46,-47,-50,-51,-2,25,-5,83,83,-6,101,-7,-8,-9,-10,83,83,83,106,-48,-49,83,83,83,83,101,114,83,101,101,126,101,25,101,-4,101,156,-48,-49,163,25,167,171,25,101,101,101,101,101,101,101,101,101,101,189,-85,25,203,-109,-111,-96,205,25,83,215,25,25,220,25,101,25,101,-86,-87,25,-93,-94,-110,25,-99,-100,25,25,101,101,25,25,25,25,25,25,25,-90,101,101,-88,-89,]),'IMPORT':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[28,28,-3,28,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,28,-5,-6,-7,-8,-9,-10,28,-4,28,28,-85,28,-109,-111,-96,28,28,28,28,28,-86,-87,28,-93,-94,-110,28,-99,-100,28,28,28,28,28,28,28,28,28,-90,-88,-89,]),'IF':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[30,30,-3,30,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,30,-5,-6,-7,-8,-9,-10,30,-4,30,30,-85,30,-109,-111,-96,30,30,30,30,30,-86,-87,30,-93,-94,-110,30,-99,-100,30,30,30,30,30,30,30,30,30,-90,-88,-89,]),'WHILE':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[31,31,-3,31,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,31,-5,-6,-7,-8,-9,-10,31,-4,31,31,-85,31,-109,-111,-96,31,31,31,31,31,-86,-87,31,-93,-94,-110,31,-99,-100,31,31,31,31,31,31,31,31,31,-90,-88,-89,]),'FOR':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[32,32,-3,32,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,32,-5,-6,-7,-8,-9,-10,32,-4,32,32,-85,32,-109,-111,-96,32,32,32,32,32,-86,-87,32,-93,-94,-110,32,-99,-100,32,32,32,32,32,32,32,32,32,-90,-88,-89,]),'PRINT':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[33,33,-3,33,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,33,-5,-6,-7,-8,-9,-10,33,-4,33,33,-85,33,-109,-111,-96,33,33,33,33,33,-86,-87,33,-93,-94,-110,33,-99,-100,33,33,33,33,33,33,33,33,33,-90,-88,-89,]),'CLASS':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[34,34,-3,34,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,34,-5,-6,-7,-8,-9,-10,34,-4,34,34,-85,34,-109,-111,-96,34,34,34,34,34,-86,-87,34,-93,-94,-110,34,-99,-100,34,34,34,34,34,34,34,34,34,-90,-88,-89,]),'ENUM':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[35,35,-3,35,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,35,-5,-6,-7,-8,-9,-10,35,-4,35,35,-85,35,-109,-111,-96,35,35,35,35,35,-86,-87,35,-93,-94,-110,35,-99,-100,35,35,35,35,35,35,35,35,35,-90,-88,-89,]),'TRY':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[36,36,-3,36,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,36,-5,-6,-7,-8,-9,-10,36,-4,36,36,-85,36,-109,-111,-96,36,36,36,36,36,-86,-87,36,-93,-94,-110,36,-99,-100,36,36,36,36,36,36,36,36,36,-90,-88,-89,]),'SWITCH':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[37,37,-3,37,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,37,-5,-6,-7,-8,-9,-10,37,-4,37,37,-85,37,-109,-111,-96,37,37,37,37,37,-86,-87,37,-93,-94,-110,37,-99,-100,37,37,37,37,37,37,37,37,37,-90,-88,-89,]),'VAR':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,86,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[39,39,-3,39,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,39,-5,-6,-7,-8,-9,-10,39,39,-4,39,39,-85,39,-109,-111,-96,39,39,39,39,39,-86,-87,39,-93,-94,-110,39,-99,-100,39,39,39,39,39,39,39,39,39,-90,-88,-89,]),'CONST':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,86,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[40,40,-3,40,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,40,-5,-6,-7,-8,-9,-10,40,40,-4,40,40,-85,40,-109,-111,-96,40,40,40,40,40,-86,-87,40,-93,-94,-110,40,-99,-100,40,40,40,40,40,40,40,40,40,-90,-88,-89,]),'FINAL':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,51,52,53,56,58,59,60,61,86,90,92,133,145,174,183,186,187,190,194,200,201,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[41,41,-3,41,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,41,-5,-6,-7,-8,-9,-10,41,41,-4,41,41,-85,41,-109,-111,-96,41,41,41,41,41,-86,-87,41,-93,-94,-110,41,-99,-100,41,41,41,41,41,41,41,41,41,-90,-88,-89,]),'INT_TYPE':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,23,39,40,41,51,52,53,56,58,59,60,61,79,80,86,90,92,107,131,133,142,145,159,160,162,169,174,183,186,187,188,190,194,200,201,204,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[42,42,-3,42,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,42,-52,-53,-54,-2,42,-5,-6,-7,-8,-9,-10,42,42,42,42,-4,42,42,42,42,42,42,-113,-115,42,-85,42,-109,-111,-112,-96,42,42,42,-114,42,42,-86,-87,42,-93,-94,-110,42,-99,-100,42,42,42,42,42,42,42,42,42,-90,-88,-89,]),'STRING_TYPE':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,23,39,40,41,51,52,53,56,58,59,60,61,79,80,86,90,92,107,131,133,142,145,159,160,162,169,174,183,186,187,188,190,194,200,201,204,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[43,43,-3,43,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,43,-52,-53,-54,-2,43,-5,-6,-7,-8,-9,-10,43,43,43,43,-4,43,43,43,43,43,43,-113,-115,43,-85,43,-109,-111,-112,-96,43,43,43,-114,43,43,-86,-87,43,-93,-94,-110,43,-99,-100,43,43,43,43,43,43,43,43,43,-90,-88,-89,]),'NUM_TYPE':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,23,39,40,41,51,52,53,56,58,59,60,61,79,80,86,90,92,107,131,133,142,145,159,160,162,169,174,183,186,187,188,190,194,200,201,204,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[44,44,-3,44,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,44,-52,-53,-54,-2,44,-5,-6,-7,-8,-9,-10,44,44,44,44,-4,44,44,44,44,44,44,-113,-115,44,-85,44,-109,-111,-112,-96,44,44,44,-114,44,44,-86,-87,44,-93,-94,-110,44,-99,-100,44,44,44,44,44,44,44,44,44,-90,-88,-89,]),'DOUBLE_TYPE':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,23,39,40,41,51,52,53,56,58,59,60,61,79,80,86,90,92,107,131,133,142,145,159,160,162,169,174,183,186,187,188,190,194,200,201,204,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[45,45,-3,45,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,45,-52,-53,-54,-2,45,-5,-6,-7,-8,-9,-10,45,45,45,45,-4,45,45,45,45,45,45,-113,-115,45,-85,45,-109,-111,-112,-96,45,45,45,-114,45,45,-86,-87,45,-93,-94,-110,45,-99,-100,45,45,45,45,45,45,45,45,45,-90,-88,-89,]),'BOOL_TYPE':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,23,39,40,41,51,52,53,56,58,59,60,61,79,80,86,90,92,107,131,133,142,145,159,160,162,169,174,183,186,187,188,190,194,200,201,204,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[46,46,-3,46,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,46,-52,-53,-54,-2,46,-5,-6,-7,-8,-9,-10,46,46,46,46,-4,46,46,46,46,46,46,-113,-115,46,-85,46,-109,-111,-112,-96,46,46,46,-114,46,46,-86,-87,46,-93,-94,-110,46,-99,-100,46,46,46,46,46,46,46,46,46,-90,-88,-89,]),'SET_TYPE':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,23,39,40,41,51,52,53,56,58,59,60,61,79,80,86,90,92,107,131,133,142,145,159,160,162,169,174,183,186,187,188,190,194,200,201,204,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[47,47,-3,47,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,47,-52,-53,-54,-2,47,-5,-6,-7,-8,-9,-10,47,47,47,47,-4,47,47,47,47,47,47,-113,-115,47,-85,47,-109,-111,-112,-96,47,47,47,-114,47,47,-86,-87,47,-93,-94,-110,47,-99,-100,47,47,47,47,47,47,47,47,47,-90,-88,-89,]),'VOID':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,23,39,40,41,51,52,53,56,58,59,60,61,79,80,86,90,92,107,131,133,142,145,159,160,162,169,174,183,186,187,188,190,194,200,201,204,206,210,216,217,222,227,228,229,236,237,238,239,240,245,246,247,248,249,255,256,257,262,263,],[48,48,-3,48,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,48,-52,-53,-54,-2,48,-5,-6,-7,-8,-9,-10,48,48,48,48,-4,48,48,48,48,48,48,-113,-115,48,-85,48,-109,-111,-112,-96,48,48,48,-114,48,48,-86,-87,48,-93,-94,-110,48,-99,-100,48,48,48,48,48,48,48,48,48,-90,-88,-89,]),'LPARENTHESIS':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,29,30,31,32,33,37,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,70,71,72,73,74,78,84,85,87,90,91,92,120,133,145,146,147,148,149,150,151,152,153,155,157,170,174,183,186,187,189,190,194,195,200,201,206,209,210,214,216,217,222,227,228,229,236,237,238,239,240,242,244,245,246,247,248,249,255,256,257,260,261,262,263,],[29,29,-3,29,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,29,84,85,86,87,91,-2,29,-5,29,29,-6,29,-7,-8,-9,-10,29,29,29,107,29,29,29,29,29,29,120,120,29,29,29,-4,120,29,29,120,120,29,29,29,29,29,29,120,29,197,-85,29,-109,-111,107,-96,29,29,29,29,29,29,29,29,-86,-87,29,-93,-94,-110,29,-99,-100,29,29,29,29,29,29,29,29,29,29,29,-90,29,29,-88,-89,]),'INT':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,29,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,71,72,73,74,78,84,85,87,90,91,92,120,133,145,146,147,148,149,150,151,152,153,155,157,174,183,186,187,190,194,195,200,201,206,209,210,214,216,217,222,227,228,229,236,237,238,239,240,242,244,245,246,247,248,249,255,256,257,260,261,262,263,],[49,49,-3,49,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,49,-2,49,-5,49,49,-6,96,-7,-8,-9,-10,49,49,49,49,49,49,49,96,49,96,96,96,49,96,-4,96,49,49,96,96,96,96,96,96,96,96,96,96,-85,49,-109,-111,-96,49,49,49,49,49,96,49,96,-86,-87,49,-93,-94,-110,49,-99,-100,49,49,96,96,49,49,49,49,49,49,49,-90,96,96,-88,-89,]),'DOUBLE':([0,2,3,4,11,12,13,14,15,16,17,18,19,20,21,29,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,71,72,73,74,78,84,85,87,90,91,92,120,133,145,146,147,148,149,150,151,152,153,155,157,174,183,186,187,190,194,195,200,201,206,209,210,214,216,217,222,227,228,229,236,237,238,239,240,242,244,245,246,247,248,249,255,256,257,260,261,262,263,],[50,50,-3,50,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,50,-2,50,-5,50,50,-6,97,-7,-8,-9,-10,50,50,50,50,50,50,50,97,50,97,97,97,50,97,-4,97,50,50,97,97,97,97,97,97,97,97,97,97,-85,50,-109,-111,-96,50,50,50,50,50,97,50,97,-86,-87,50,-93,-94,-110,50,-99,-100,50,50,97,97,50,50,50,50,50,50,50,-90,97,97,-88,-89,]),'$end':([0,1,2,3,11,12,13,14,15,16,17,18,19,20,21,51,53,56,58,59,60,61,92,145,174,186,187,190,200,216,217,227,228,229,237,238,257,262,263,],[-116,0,-1,-3,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-5,-6,-7,-8,-9,-10,-4,-116,-85,-109,-111,-96,-116,-86,-87,-93,-94,-110,-99,-100,-90,-88,-89,]),'RBRACE':([3,4,11,12,13,14,15,16,17,18,19,20,21,22,38,49,50,51,52,53,56,58,59,60,61,83,90,92,93,94,96,97,98,99,100,101,102,103,104,105,114,119,133,140,145,159,160,162,163,164,174,183,186,187,188,190,194,200,201,204,205,206,210,216,217,222,223,227,228,229,236,237,238,239,244,245,246,247,248,251,252,253,255,256,257,262,263,265,266,],[-3,-116,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-64,-68,-73,-74,-2,92,-5,-6,-7,-8,-9,-10,-71,-116,-4,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-70,-72,165,-69,-116,187,-113,-115,-98,190,-85,-116,-109,-111,-112,-96,-116,-116,217,-114,-97,-116,227,-86,-87,237,238,-93,-94,-110,-116,-99,-100,-116,-116,-116,-116,257,-104,259,-33,-34,262,263,-90,-88,-89,-32,-35,]),'BREAK':([3,11,12,13,14,15,16,17,18,19,20,21,51,53,56,58,59,60,61,92,145,174,186,187,190,200,216,217,227,228,229,237,238,240,249,257,262,263,],[-3,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-2,-5,-6,-7,-8,-9,-10,-4,-116,-85,-109,-111,-96,-116,-86,-87,-93,-94,-110,-99,-100,-116,258,-90,-88,-89,]),'SEMICOLON':([5,6,7,8,9,10,22,25,38,49,50,66,69,75,76,81,83,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,109,110,111,112,114,118,119,122,124,140,158,173,175,176,177,178,179,180,181,182,184,189,211,212,213,241,243,258,259,],[53,56,58,59,60,61,-64,-71,-68,-73,-74,-23,-24,-91,-92,118,-71,-62,-63,-41,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-22,-37,-38,-39,-40,-42,-70,-36,-72,-84,155,-69,186,-83,-81,-82,-75,-76,-77,-78,-79,-80,202,204,228,229,-25,-26,-30,264,-31,]),'PLUS':([5,22,25,38,49,50,82,83,93,94,96,97,101,102,103,104,105,108,109,110,111,114,115,119,140,144,211,],[54,-64,-71,-68,-73,-74,54,-71,-62,-63,-73,-74,-71,54,-65,-66,-67,54,54,54,54,-70,54,-72,-69,54,54,]),'MINUS':([5,22,25,38,49,50,82,83,93,94,96,97,101,102,103,104,105,108,109,110,111,114,115,119,140,144,211,],[55,-64,-71,-68,-73,-74,55,-71,-62,-63,-73,-74,-71,55,-65,-66,-67,55,55,55,55,-70,55,-72,-69,55,55,]),'ASSIGN_OPERATOR':([6,25,66,69,106,126,127,156,171,213,215,241,243,259,],[57,74,-23,-24,-22,157,57,-24,198,-25,233,-26,-30,-31,]),'ELSE':([11,12,13,14,15,16,17,18,19,20,21,53,56,58,59,60,61,92,145,174,186,187,190,200,216,217,227,228,229,237,238,257,262,263,],[-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-5,-6,-7,-8,-9,-10,-4,-116,200,-109,-111,-96,-116,-86,-87,-93,-94,-110,-99,-100,-90,-88,-89,]),'RPARENTHESIS':([22,38,49,50,75,76,82,83,93,94,96,97,98,99,100,101,102,103,104,105,107,114,119,121,122,123,130,134,136,137,138,140,143,144,167,173,175,176,177,178,179,180,181,182,196,197,203,218,219,],[-64,-68,-73,-74,-91,-92,119,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-116,-70,-72,145,-84,154,158,166,168,-106,-107,-69,173,119,-108,-83,-81,-82,-75,-76,-77,-78,-79,-80,-105,212,221,234,235,]),'RBRACKET':([22,38,49,50,83,93,94,96,97,98,99,100,101,102,103,104,105,114,115,119,140,214,230,231,232,250,],[-64,-68,-73,-74,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-70,140,-72,-69,-116,241,-28,-29,-27,]),'EQUALS':([22,38,49,50,83,93,94,96,97,98,99,100,101,102,103,104,105,114,119,122,140,144,],[-64,-68,-73,-74,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-70,-72,148,-69,-61,]),'NOT_EQUALS':([22,38,49,50,83,93,94,96,97,98,99,100,101,102,103,104,105,114,119,122,140,144,],[-64,-68,-73,-74,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-70,-72,149,-69,-61,]),'GREATER_THAN':([22,38,42,43,44,45,46,47,48,49,50,67,68,83,93,94,96,97,98,99,100,101,102,103,104,105,114,116,119,122,140,144,172,],[-64,-68,-43,-44,-45,-46,-47,-50,-51,-73,-74,-48,-49,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-70,141,-72,150,-69,-61,199,]),'LESS_THAN':([22,26,27,38,49,50,83,93,94,96,97,98,99,100,101,102,103,104,105,114,119,122,128,129,140,144,],[-64,79,80,-68,-73,-74,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-70,-72,151,79,80,-69,-61,]),'GREATER_THAN_OR_EQUALS':([22,38,49,50,83,93,94,96,97,98,99,100,101,102,103,104,105,114,119,122,140,144,],[-64,-68,-73,-74,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-70,-72,152,-69,-61,]),'LESS_THAN_OR_EQUALS':([22,38,49,50,83,93,94,96,97,98,99,100,101,102,103,104,105,114,119,122,140,144,],[-64,-68,-73,-74,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-70,-72,153,-69,-61,]),'AND':([22,38,49,50,83,93,94,96,97,98,99,100,101,102,103,104,105,114,119,121,122,123,140,143,144,173,175,176,177,178,179,180,181,182,184,],[-64,-68,-73,-74,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-70,-72,146,-84,146,-69,146,-61,-83,146,146,-75,-76,-77,-78,-79,-80,146,]),'OR':([22,38,49,50,83,93,94,96,97,98,99,100,101,102,103,104,105,114,119,121,122,123,140,143,144,173,175,176,177,178,179,180,181,182,184,],[-64,-68,-73,-74,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-70,-72,147,-84,147,-69,147,-61,-83,147,147,-75,-76,-77,-78,-79,-80,147,]),'COLON':([22,38,49,50,83,93,94,96,97,98,99,100,101,102,103,104,105,114,119,140,225,226,254,],[-64,-68,-73,-74,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-70,-72,-69,239,240,261,]),'COMMA':([22,38,42,43,44,45,46,47,48,49,50,67,68,83,93,94,96,97,98,99,100,101,102,103,104,105,107,114,117,119,136,137,138,140,163,164,167,196,205,214,230,231,232,244,250,251,252,253,265,266,],[-64,-68,-43,-44,-45,-46,-47,-50,-51,-73,-74,-48,-49,-71,-62,-63,-55,-56,-57,-58,-59,-60,-61,-65,-66,-67,-116,-70,142,-72,169,-106,-107,-69,-98,191,-108,-105,-97,-116,242,-28,-29,-116,-27,260,-33,-34,-32,-35,]),'TIMES':([22,25,38,49,50,83,93,94,96,97,101,103,104,105,114,119,140,],[62,-71,-68,-73,-74,-71,62,62,-73,-74,-71,-65,-66,-67,-70,-72,-69,]),'DIVIDE':([22,25,38,49,50,83,93,94,96,97,101,103,104,105,114,119,140,],[63,-71,-68,-73,-74,-71,63,63,-73,-74,-71,-65,-66,-67,-70,-72,-69,]),'MODULE':([22,25,38,49,50,83,93,94,96,97,101,103,104,105,114,119,140,],[64,-71,-68,-73,-74,-71,64,64,-73,-74,-71,-65,-66,-67,-70,-72,-69,]),'PLUS_EQUALS':([25,126,],[70,70,]),'MINUS_EQUALS':([25,126,],[71,71,]),'TIMES_EQUALS':([25,126,],[72,72,]),'DIVIDE_EQUALS':([25,126,],[73,73,]),'INCREMENT':([25,220,],[75,75,]),'DECREMENT':([25,220,],[76,76,]),'LBRACKET':([25,83,101,198,],[78,78,78,214,]),'DOT':([25,83,101,113,],[77,77,77,139,]),'STRING':([28,57,74,84,85,87,91,120,146,147,148,149,150,151,152,153,155,157,209,214,242,244,260,261,],[81,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'BOOL':([57,74,84,85,87,91,120,146,147,148,149,150,151,152,153,155,157,209,214,242,244,260,261,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'NULL':([57,74,84,85,87,91,120,146,147,148,149,150,151,152,153,155,157,209,214,242,244,260,261,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'STDIN':([74,],[113,]),'READ':([139,],[170,]),'IN':([156,],[185,]),'FINALLY':([165,],[192,]),'ARROW':([168,],[195,]),'CASE':([193,207,208,224,264,],[209,209,-102,-101,-103,]),'DEFAULT':([207,208,224,264,],[225,-102,-101,-103,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,4,90,183,194,206,236,239,240,245,246,],[2,52,133,201,210,222,247,248,249,255,256,]),'statement':([0,2,4,52,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[3,51,3,51,3,51,174,3,3,216,51,3,51,51,3,3,3,3,3,51,51,51,51,51,]),'expression':([0,2,4,29,52,57,70,71,72,73,74,78,84,85,87,90,91,120,133,145,146,147,148,149,150,151,152,153,155,157,183,194,195,200,201,206,209,210,214,222,236,239,240,242,244,245,246,247,248,249,255,256,260,261,],[5,5,5,82,5,102,108,109,110,111,102,115,102,102,102,5,102,144,5,5,102,102,102,102,102,102,102,102,102,102,5,5,211,5,5,5,102,5,102,5,5,5,5,102,102,5,5,5,5,5,5,5,102,102,]),'declaration':([0,2,4,52,86,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[6,6,6,6,127,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'assignation':([0,2,4,52,86,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[7,7,7,7,124,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'increment':([0,2,4,52,90,133,145,183,194,200,201,202,206,210,222,236,239,240,245,246,247,248,249,255,256,],[8,8,8,8,8,8,8,8,8,8,8,218,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'decrement':([0,2,4,52,90,133,145,183,194,200,201,202,206,210,222,236,239,240,245,246,247,248,249,255,256,],[9,9,9,9,9,9,9,9,9,9,9,219,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'import':([0,2,4,52,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'function':([0,2,4,52,90,131,133,145,159,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[11,11,11,11,11,162,11,11,162,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'if':([0,2,4,52,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'while':([0,2,4,52,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'for':([0,2,4,52,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'print':([0,2,4,52,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'input':([0,2,4,52,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'class_def':([0,2,4,52,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'enum':([0,2,4,52,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'try':([0,2,4,52,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'switch':([0,2,4,52,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'empty':([0,2,4,52,90,107,133,145,183,194,200,201,206,210,214,222,236,239,240,244,245,246,247,248,249,255,256,],[21,21,21,21,21,138,21,21,21,21,21,21,21,21,232,21,21,21,21,253,21,21,21,21,21,21,21,]),'term':([0,2,4,29,52,54,55,57,70,71,72,73,74,78,84,85,87,90,91,120,133,145,146,147,148,149,150,151,152,153,155,157,183,194,195,200,201,206,209,210,214,222,236,239,240,242,244,245,246,247,248,249,255,256,260,261,],[22,22,22,22,22,93,94,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'declaration_modifier':([0,2,4,52,86,90,133,145,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'varType':([0,2,4,23,52,79,80,86,90,107,131,133,142,145,159,169,183,194,200,201,206,210,222,236,239,240,245,246,247,248,249,255,256,],[24,24,24,65,24,116,117,125,24,135,161,24,172,24,161,135,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'factor':([0,2,4,29,52,54,55,57,62,63,64,70,71,72,73,74,78,84,85,87,90,91,120,133,145,146,147,148,149,150,151,152,153,155,157,183,194,195,200,201,206,209,210,214,222,236,239,240,242,244,245,246,247,248,249,255,256,260,261,],[38,38,38,38,38,38,38,38,103,104,105,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'variable':([57,74,84,85,87,91,120,146,147,148,149,150,151,152,153,155,157,209,214,242,244,260,261,],[95,112,122,122,130,134,122,122,122,177,178,179,180,181,182,122,112,226,231,250,254,254,266,]),'booleanExpression':([84,85,120,146,147,155,],[121,123,143,175,176,184,]),'parameters':([107,],[136,]),'parameter':([107,169,],[137,196,]),'class_members':([131,],[159,]),'class_member':([131,159,],[160,188,]),'enum_values':([132,],[164,]),'cases':([193,],[207,]),'case':([193,207,],[208,224,]),'list_literal':([198,],[213,]),'default_case':([207,],[223,]),'list_elements':([214,],[230,]),'map_literal':([233,],[243,]),'map_elements':([244,],[251,]),'map_pair':([244,260,],[252,265,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','analizadorSintax.py',16),
  ('statements -> statements statement','statements',2,'p_statements','analizadorSintax.py',20),
  ('statements -> statement','statements',1,'p_statements','analizadorSintax.py',21),
  ('statement -> LBRACE statements RBRACE','statement',3,'p_statement_block','analizadorSintax.py',29),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','analizadorSintax.py',33),
  ('statement -> declaration SEMICOLON','statement',2,'p_statement','analizadorSintax.py',34),
  ('statement -> assignation SEMICOLON','statement',2,'p_statement','analizadorSintax.py',35),
  ('statement -> increment SEMICOLON','statement',2,'p_statement','analizadorSintax.py',36),
  ('statement -> decrement SEMICOLON','statement',2,'p_statement','analizadorSintax.py',37),
  ('statement -> import SEMICOLON','statement',2,'p_statement','analizadorSintax.py',38),
  ('statement -> function','statement',1,'p_statement','analizadorSintax.py',39),
  ('statement -> if','statement',1,'p_statement','analizadorSintax.py',40),
  ('statement -> while','statement',1,'p_statement','analizadorSintax.py',41),
  ('statement -> for','statement',1,'p_statement','analizadorSintax.py',42),
  ('statement -> print','statement',1,'p_statement','analizadorSintax.py',43),
  ('statement -> input','statement',1,'p_statement','analizadorSintax.py',44),
  ('statement -> class_def','statement',1,'p_statement','analizadorSintax.py',45),
  ('statement -> enum','statement',1,'p_statement','analizadorSintax.py',46),
  ('statement -> try','statement',1,'p_statement','analizadorSintax.py',47),
  ('statement -> switch','statement',1,'p_statement','analizadorSintax.py',48),
  ('statement -> empty','statement',1,'p_statement','analizadorSintax.py',49),
  ('declaration -> declaration_modifier varType ID','declaration',3,'p_declaration','analizadorSintax.py',53),
  ('declaration -> declaration_modifier ID','declaration',2,'p_declaration','analizadorSintax.py',54),
  ('declaration -> varType ID','declaration',2,'p_declaration','analizadorSintax.py',55),
  ('declaration -> LIST_TYPE LESS_THAN varType GREATER_THAN ID ASSIGN_OPERATOR list_literal','declaration',7,'p_declaration_list_init','analizadorSintax.py',64),
  ('list_literal -> LBRACKET list_elements RBRACKET','list_literal',3,'p_list_literal','analizadorSintax.py',68),
  ('list_elements -> list_elements COMMA variable','list_elements',3,'p_list_elements','analizadorSintax.py',72),
  ('list_elements -> variable','list_elements',1,'p_list_elements','analizadorSintax.py',73),
  ('list_elements -> empty','list_elements',1,'p_list_elements','analizadorSintax.py',74),
  ('declaration -> MAP_TYPE LESS_THAN varType COMMA varType GREATER_THAN ID ASSIGN_OPERATOR map_literal','declaration',9,'p_declaration_map_init','analizadorSintax.py',83),
  ('map_literal -> LBRACE map_elements RBRACE','map_literal',3,'p_map_literal','analizadorSintax.py',87),
  ('map_elements -> map_elements COMMA map_pair','map_elements',3,'p_map_elements','analizadorSintax.py',91),
  ('map_elements -> map_pair','map_elements',1,'p_map_elements','analizadorSintax.py',92),
  ('map_elements -> empty','map_elements',1,'p_map_elements','analizadorSintax.py',93),
  ('map_pair -> variable COLON variable','map_pair',3,'p_map_pair','analizadorSintax.py',102),
  ('import -> IMPORT STRING SEMICOLON','import',3,'p_import','analizadorSintax.py',106),
  ('assignation -> ID PLUS_EQUALS expression','assignation',3,'p_compound_assignation','analizadorSintax.py',111),
  ('assignation -> ID MINUS_EQUALS expression','assignation',3,'p_compound_assignation','analizadorSintax.py',112),
  ('assignation -> ID TIMES_EQUALS expression','assignation',3,'p_compound_assignation','analizadorSintax.py',113),
  ('assignation -> ID DIVIDE_EQUALS expression','assignation',3,'p_compound_assignation','analizadorSintax.py',114),
  ('assignation -> declaration ASSIGN_OPERATOR variable','assignation',3,'p_assignation','analizadorSintax.py',118),
  ('assignation -> ID ASSIGN_OPERATOR variable','assignation',3,'p_assignation_no_type','analizadorSintax.py',122),
  ('varType -> INT_TYPE','varType',1,'p_varType','analizadorSintax.py',126),
  ('varType -> STRING_TYPE','varType',1,'p_varType','analizadorSintax.py',127),
  ('varType -> NUM_TYPE','varType',1,'p_varType','analizadorSintax.py',128),
  ('varType -> DOUBLE_TYPE','varType',1,'p_varType','analizadorSintax.py',129),
  ('varType -> BOOL_TYPE','varType',1,'p_varType','analizadorSintax.py',130),
  ('varType -> LIST_TYPE','varType',1,'p_varType','analizadorSintax.py',131),
  ('varType -> MAP_TYPE','varType',1,'p_varType','analizadorSintax.py',132),
  ('varType -> SET_TYPE','varType',1,'p_varType','analizadorSintax.py',133),
  ('varType -> VOID','varType',1,'p_varType','analizadorSintax.py',134),
  ('declaration_modifier -> VAR','declaration_modifier',1,'p_declaration_modifier','analizadorSintax.py',137),
  ('declaration_modifier -> CONST','declaration_modifier',1,'p_declaration_modifier','analizadorSintax.py',138),
  ('declaration_modifier -> FINAL','declaration_modifier',1,'p_declaration_modifier','analizadorSintax.py',139),
  ('variable -> INT','variable',1,'p_variable','analizadorSintax.py',143),
  ('variable -> DOUBLE','variable',1,'p_variable','analizadorSintax.py',144),
  ('variable -> STRING','variable',1,'p_variable','analizadorSintax.py',145),
  ('variable -> BOOL','variable',1,'p_variable','analizadorSintax.py',146),
  ('variable -> NULL','variable',1,'p_variable','analizadorSintax.py',147),
  ('variable -> ID','variable',1,'p_variable','analizadorSintax.py',148),
  ('variable -> expression','variable',1,'p_variable','analizadorSintax.py',149),
  ('expression -> expression PLUS term','expression',3,'p_expression_operations','analizadorSintax.py',153),
  ('expression -> expression MINUS term','expression',3,'p_expression_operations','analizadorSintax.py',154),
  ('expression -> term','expression',1,'p_expression_term','analizadorSintax.py',158),
  ('term -> term TIMES factor','term',3,'p_term_operations','analizadorSintax.py',162),
  ('term -> term DIVIDE factor','term',3,'p_term_operations','analizadorSintax.py',163),
  ('term -> term MODULE factor','term',3,'p_term_operations','analizadorSintax.py',164),
  ('term -> factor','term',1,'p_term_factor','analizadorSintax.py',168),
  ('factor -> ID LBRACKET expression RBRACKET','factor',4,'p_variable_array_access','analizadorSintax.py',172),
  ('factor -> ID DOT ID','factor',3,'p_variable_member_access','analizadorSintax.py',176),
  ('factor -> ID','factor',1,'p_factor_id','analizadorSintax.py',180),
  ('factor -> LPARENTHESIS expression RPARENTHESIS','factor',3,'p_factor_parens','analizadorSintax.py',184),
  ('factor -> INT','factor',1,'p_factor_numeric','analizadorSintax.py',188),
  ('factor -> DOUBLE','factor',1,'p_factor_numeric','analizadorSintax.py',189),
  ('booleanExpression -> variable EQUALS variable','booleanExpression',3,'p_boolean_expression_comparison','analizadorSintax.py',197),
  ('booleanExpression -> variable NOT_EQUALS variable','booleanExpression',3,'p_boolean_expression_comparison','analizadorSintax.py',198),
  ('booleanExpression -> variable GREATER_THAN variable','booleanExpression',3,'p_boolean_expression_comparison','analizadorSintax.py',199),
  ('booleanExpression -> variable LESS_THAN variable','booleanExpression',3,'p_boolean_expression_comparison','analizadorSintax.py',200),
  ('booleanExpression -> variable GREATER_THAN_OR_EQUALS variable','booleanExpression',3,'p_boolean_expression_comparison','analizadorSintax.py',201),
  ('booleanExpression -> variable LESS_THAN_OR_EQUALS variable','booleanExpression',3,'p_boolean_expression_comparison','analizadorSintax.py',202),
  ('booleanExpression -> booleanExpression AND booleanExpression','booleanExpression',3,'p_boolean_expression_logic','analizadorSintax.py',206),
  ('booleanExpression -> booleanExpression OR booleanExpression','booleanExpression',3,'p_boolean_expression_logic','analizadorSintax.py',207),
  ('booleanExpression -> LPARENTHESIS booleanExpression RPARENTHESIS','booleanExpression',3,'p_boolean_expression_paren','analizadorSintax.py',211),
  ('booleanExpression -> variable','booleanExpression',1,'p_boolean_expression_variable','analizadorSintax.py',215),
  ('if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement','if',5,'p_if','analizadorSintax.py',221),
  ('if -> IF LPARENTHESIS booleanExpression RPARENTHESIS statement ELSE statement','if',7,'p_if_else','analizadorSintax.py',226),
  ('while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statements RBRACE','while',7,'p_while','analizadorSintax.py',230),
  ('for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statements RBRACE','for',11,'p_for','analizadorSintax.py',233),
  ('for -> FOR LPARENTHESIS assignation SEMICOLON booleanExpression SEMICOLON decrement RPARENTHESIS LBRACE statements RBRACE','for',11,'p_for','analizadorSintax.py',234),
  ('for -> FOR LPARENTHESIS varType ID IN ID RPARENTHESIS LBRACE statements RBRACE','for',10,'p_for_in','analizadorSintax.py',238),
  ('increment -> ID INCREMENT','increment',2,'p_increment','analizadorSintax.py',242),
  ('decrement -> ID DECREMENT','decrement',2,'p_decrement','analizadorSintax.py',246),
  ('function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statements RBRACE','function',8,'p_function','analizadorSintax.py',251),
  ('function -> varType ID LPARENTHESIS parameters RPARENTHESIS ARROW expression SEMICOLON','function',8,'p_function_arrow','analizadorSintax.py',254),
  ('typedef -> TYPEDEF ID ASSIGN_OPERATOR varType function LPARENTHESIS parameters RPARENTHESIS SEMICOLON','typedef',9,'p_typedef','analizadorSintax.py',258),
  ('enum -> ENUM ID LBRACE enum_values RBRACE','enum',5,'p_enum','analizadorSintax.py',262),
  ('enum_values -> enum_values COMMA ID','enum_values',3,'p_enum_values','analizadorSintax.py',265),
  ('enum_values -> ID','enum_values',1,'p_enum_values','analizadorSintax.py',266),
  ('try -> TRY LBRACE statements RBRACE FINALLY LBRACE statements RBRACE','try',8,'p_try','analizadorSintax.py',270),
  ('switch -> SWITCH LPARENTHESIS variable RPARENTHESIS LBRACE cases default_case RBRACE','switch',8,'p_switch','analizadorSintax.py',274),
  ('cases -> cases case','cases',2,'p_cases','analizadorSintax.py',277),
  ('cases -> case','cases',1,'p_cases','analizadorSintax.py',278),
  ('case -> CASE variable COLON statements BREAK SEMICOLON','case',6,'p_case','analizadorSintax.py',281),
  ('default_case -> DEFAULT COLON statements','default_case',3,'p_default_case','analizadorSintax.py',284),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','analizadorSintax.py',288),
  ('parameters -> parameter','parameters',1,'p_parameters','analizadorSintax.py',289),
  ('parameters -> empty','parameters',1,'p_parameters','analizadorSintax.py',290),
  ('parameter -> varType ID','parameter',2,'p_parameter','analizadorSintax.py',293),
  ('print -> PRINT LPARENTHESIS variable RPARENTHESIS SEMICOLON','print',5,'p_print','analizadorSintax.py',297),
  ('input -> ID ASSIGN_OPERATOR STDIN DOT READ LPARENTHESIS RPARENTHESIS SEMICOLON','input',8,'p_input','analizadorSintax.py',300),
  ('class_def -> CLASS ID LBRACE class_members RBRACE','class_def',5,'p_class_def','analizadorSintax.py',304),
  ('class_members -> class_members class_member','class_members',2,'p_class_members','analizadorSintax.py',307),
  ('class_members -> class_member','class_members',1,'p_class_members','analizadorSintax.py',308),
  ('class_member -> varType ID SEMICOLON','class_member',3,'p_class_member','analizadorSintax.py',311),
  ('class_member -> function','class_member',1,'p_class_member','analizadorSintax.py',312),
  ('empty -> <empty>','empty',0,'p_empty','analizadorSintax.py',316),
]

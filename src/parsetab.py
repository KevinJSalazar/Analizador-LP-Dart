
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statementABSTRACT AND ASSIGN_OPERATOR BOOL BOOL_TYPE BREAK COLON COMMA COMMENT_BLOCK COMMENT_LINE CONST CONTINUE DEFAULT DIVIDE DOT DOUBLE DOUBLE_TYPE ELSE ENUM EQUALS EXPORT FINAL FINALLY FOR GREATER_THAN GREATER_THAN_OR_EQUALS ID IF IMPORT INT INT_TYPE LATE LBRACE LBRACKET LESS_THAN LESS_THAN_OR_EQUALS LIST_TYPE LPARENTHESIS MAP_TYPE MINUS MODULE NOT NOT_EQUALS NULL NUM_TYPE OR PLUS RBRACE RBRACKET RETURN RPARENTHESIS SEMICOLON SET_TYPE STATIC STRING STRING_TYPE TIMES TYPEDEF VAR VOID WHILEstatement : expression\n| declaration\n| assignation\n| function\n| if\n| while\n| for\n| list\n| set\n| mapassignation : varType ID ASSIGN_OPERATOR variable SEMICOLONdeclaration : varType ID SEMICOLONnumeric : INT\n| DOUBLEexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES numericterm : term DIVIDE numericterm : term MODULE numericterm : numericvariable : INT \n| DOUBLE \n| STRING \n| BOOL  \n| NULL\n| ID\n| expression\nvarType : INT_TYPE \n| STRING_TYPE \n| NUM_TYPE \n| DOUBLE_TYPE \n| BOOL_TYPE \n| LIST_TYPE \n| MAP_TYPE \n| VAR \n| CONST \n| FINAL\n| VOIDprimitive : INT_TYPE\n| STRING_TYPE\n| NUM_TYPE\n| DOUBLE_TYPE\n| BOOL_TYPEbooleanExpression : variable EQUALS variable\n| variable NOT_EQUALS variable\n| variable GREATER_THAN variable\n| variable LESS_THAN variable\n| variable GREATER_THAN_OR_EQUALS variable\n| variable LESS_THAN_OR_EQUALS variable\nif : IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE\n| IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE\n| IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACEwhile : WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE\n| WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACEfor : FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE\n| FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACElistIntValue : listIntValue COMMA INT\n| INT\n| listStringValue : listStringValue COMMA STRING\n| STRING\n| listDoubleValue : listDoubleValue COMMA DOUBLE \n| DOUBLE\n| listBoolValue : listBoolValue COMMA BOOL\n| BOOL\n| mapValues : mapValues COMMA mapPairmapValues : mapPairmapPair : variable COLON variablelist : LIST_TYPE LESS_THAN INT_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACKET listIntValue RBRACKET SEMICOLON\n| LIST_TYPE LESS_THAN STRING_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACKET listStringValue RBRACKET SEMICOLON\n| LIST_TYPE LESS_THAN DOUBLE_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACKET listDoubleValue RBRACKET SEMICOLON\n| LIST_TYPE LESS_THAN BOOL_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACKET listBoolValue RBRACKET SEMICOLONset : SET_TYPE LESS_THAN STRING_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACE listStringValue RBRACE SEMICOLON\n| SET_TYPE LESS_THAN DOUBLE_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACE listDoubleValue RBRACE SEMICOLON\n| SET_TYPE LESS_THAN INT_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACE listIntValue RBRACE SEMICOLON\n| SET_TYPE LESS_THAN BOOL_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACE listBoolValue RBRACE SEMICOLONmap : MAP_TYPE LESS_THAN primitive COMMA primitive GREATER_THAN ID ASSIGN_OPERATOR LBRACE mapValues RBRACE SEMICOLONincrement : ID PLUS PLUSfunction : varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACEparameter : varType IDparametersList : parameter\n| parameter COMMA parametersListparameters : parametersList\n| emptyempty : '
    
_lr_action_items = {'IF':([0,109,116,127,160,175,],[14,14,14,14,14,14,]),'WHILE':([0,109,116,127,160,175,],[15,15,15,15,15,15,]),'FOR':([0,109,116,127,160,175,],[16,16,16,16,16,16,]),'LIST_TYPE':([0,40,51,108,109,116,127,160,175,],[17,64,64,64,17,17,17,17,17,]),'SET_TYPE':([0,109,116,127,160,175,],[22,22,22,22,22,22,]),'MAP_TYPE':([0,40,51,108,109,116,127,160,175,],[23,65,65,65,23,23,23,23,23,]),'INT_TYPE':([0,40,41,42,43,51,104,108,109,116,127,160,175,],[18,18,66,72,75,18,75,18,18,18,18,18,18,]),'STRING_TYPE':([0,40,41,42,43,51,104,108,109,116,127,160,175,],[19,19,67,70,76,19,76,19,19,19,19,19,19,]),'NUM_TYPE':([0,40,43,51,104,108,109,116,127,160,175,],[25,25,77,25,77,25,25,25,25,25,25,]),'DOUBLE_TYPE':([0,40,41,42,43,51,104,108,109,116,127,160,175,],[20,20,68,71,78,20,78,20,20,20,20,20,20,]),'BOOL_TYPE':([0,40,41,42,43,51,104,108,109,116,127,160,175,],[21,21,69,73,79,21,79,21,21,21,21,21,21,]),'VAR':([0,40,51,108,109,116,127,160,175,],[26,26,26,26,26,26,26,26,26,]),'CONST':([0,40,51,108,109,116,127,160,175,],[27,27,27,27,27,27,27,27,27,]),'FINAL':([0,40,51,108,109,116,127,160,175,],[28,28,28,28,28,28,28,28,28,]),'VOID':([0,40,51,108,109,116,127,160,175,],[29,29,29,29,29,29,29,29,29,]),'INT':([0,32,33,34,35,36,38,39,50,62,87,88,89,90,91,92,105,109,116,127,149,155,160,175,179,190,209,211,],[30,30,30,30,30,30,54,54,54,54,54,54,54,54,54,54,-11,30,30,30,163,163,30,30,194,54,54,54,]),'DOUBLE':([0,32,33,34,35,36,38,39,50,62,87,88,89,90,91,92,105,109,116,127,151,154,160,175,183,190,209,211,],[31,31,31,31,31,31,55,55,55,55,55,55,55,55,55,55,-11,31,31,31,167,167,31,31,198,55,55,55,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,24,30,31,44,45,46,47,48,49,105,130,132,145,146,158,177,192,193,195,197,199,201,202,203,204,208,213,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-17,-21,-13,-14,-15,-16,-18,-19,-20,-12,-11,-53,-55,-51,-54,-83,-57,-56,-73,-74,-75,-76,-77,-78,-79,-80,-52,-81,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,24,30,31,44,45,46,47,48,49,54,55,56,57,58,59,60,105,109,116,129,130,131,132,144,145,146,153,154,155,156,158,160,163,165,167,169,170,171,172,173,176,177,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,212,213,214,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-17,-21,-13,-14,-15,-16,-18,-19,-20,-12,-13,-14,-24,-25,-26,-27,-28,-11,130,132,145,-53,146,-55,158,-51,-54,-63,-66,-60,-69,-83,177,-59,-62,-65,-68,186,187,188,189,192,-57,208,-56,-73,-58,-74,-61,-75,-64,-76,-67,-77,-78,-79,-80,210,-71,-52,-70,-81,-72,]),'PLUS':([2,12,24,30,31,44,45,46,47,48,54,55,60,134,148,],[32,-17,-21,-13,-14,-15,-16,-18,-19,-20,-13,-14,32,148,161,]),'MINUS':([2,12,24,30,31,44,45,46,47,48,54,55,60,],[33,-17,-21,-13,-14,-15,-16,-18,-19,-20,-13,-14,33,]),'EQUALS':([12,24,30,31,44,45,46,47,48,53,54,55,56,57,58,59,60,],[-17,-21,-13,-14,-15,-16,-18,-19,-20,87,-13,-14,-24,-25,-26,-27,-28,]),'NOT_EQUALS':([12,24,30,31,44,45,46,47,48,53,54,55,56,57,58,59,60,],[-17,-21,-13,-14,-15,-16,-18,-19,-20,88,-13,-14,-24,-25,-26,-27,-28,]),'GREATER_THAN':([12,24,30,31,44,45,46,47,48,53,54,55,56,57,58,59,60,66,67,68,69,70,71,72,73,75,76,77,78,79,126,],[-17,-21,-13,-14,-15,-16,-18,-19,-20,89,-13,-14,-24,-25,-26,-27,-28,96,97,98,99,100,101,102,103,-40,-41,-42,-43,-44,143,]),'LESS_THAN':([12,17,22,23,24,30,31,44,45,46,47,48,53,54,55,56,57,58,59,60,],[-17,41,42,43,-21,-13,-14,-15,-16,-18,-19,-20,90,-13,-14,-24,-25,-26,-27,-28,]),'GREATER_THAN_OR_EQUALS':([12,24,30,31,44,45,46,47,48,53,54,55,56,57,58,59,60,],[-17,-21,-13,-14,-15,-16,-18,-19,-20,91,-13,-14,-24,-25,-26,-27,-28,]),'LESS_THAN_OR_EQUALS':([12,24,30,31,44,45,46,47,48,53,54,55,56,57,58,59,60,],[-17,-21,-13,-14,-15,-16,-18,-19,-20,92,-13,-14,-24,-25,-26,-27,-28,]),'SEMICOLON':([12,24,30,31,37,44,45,46,47,48,54,55,56,57,58,59,60,80,94,110,111,112,113,114,115,178,180,182,184,186,187,188,189,210,],[-17,-21,-13,-14,49,-15,-16,-18,-19,-20,-13,-14,-24,-25,-26,-27,-28,105,117,-45,-46,-47,-48,-49,-50,193,195,197,199,201,202,203,204,213,]),'RPARENTHESIS':([12,24,30,31,44,45,46,47,48,51,52,54,55,56,57,58,59,60,61,82,83,84,85,106,110,111,112,113,114,115,128,133,161,],[-17,-21,-13,-14,-15,-16,-18,-19,-20,-89,86,-13,-14,-24,-25,-26,-27,-28,93,107,-87,-88,-85,-84,-45,-46,-47,-48,-49,-50,-86,147,-82,]),'COLON':([12,24,30,31,44,45,46,47,48,54,55,56,57,58,59,60,207,],[-17,-21,-13,-14,-15,-16,-18,-19,-20,-13,-14,-24,-25,-26,-27,-28,211,]),'COMMA':([12,24,30,31,44,45,46,47,48,54,55,56,57,58,59,60,74,75,76,77,78,79,85,106,149,150,151,152,153,154,155,156,162,163,164,165,166,167,168,169,170,171,172,173,194,196,198,200,205,206,212,214,],[-17,-21,-13,-14,-15,-16,-18,-19,-20,-13,-14,-24,-25,-26,-27,-28,104,-40,-41,-42,-43,-44,108,-84,-60,-63,-66,-69,-63,-66,-60,-69,179,-59,181,-62,183,-65,185,-68,181,183,179,185,-58,-61,-64,-67,209,-71,-70,-72,]),'TIMES':([12,24,30,31,44,45,46,47,48,54,55,],[34,-21,-13,-14,34,34,-18,-19,-20,-13,-14,]),'DIVIDE':([12,24,30,31,44,45,46,47,48,54,55,],[35,-21,-13,-14,35,35,-18,-19,-20,-13,-14,]),'MODULE':([12,24,30,31,44,45,46,47,48,54,55,],[36,-21,-13,-14,36,36,-18,-19,-20,-13,-14,]),'ID':([13,17,18,19,20,21,23,25,26,27,28,29,38,39,50,62,63,64,65,81,87,88,89,90,91,92,96,97,98,99,100,101,102,103,105,117,143,190,209,211,],[37,-34,-29,-30,-32,-33,-35,-31,-36,-37,-38,-39,59,59,59,59,95,-34,-35,106,59,59,59,59,59,59,118,119,120,121,122,123,124,125,-11,134,157,59,59,59,]),'LPARENTHESIS':([14,15,16,37,],[38,39,40,51,]),'ASSIGN_OPERATOR':([37,95,118,119,120,121,122,123,124,125,157,],[50,50,135,136,137,138,139,140,141,142,174,]),'STRING':([38,39,50,62,87,88,89,90,91,92,105,150,153,181,190,209,211,],[56,56,56,56,56,56,56,56,56,56,-11,165,165,196,56,56,56,]),'BOOL':([38,39,50,62,87,88,89,90,91,92,105,152,156,185,190,209,211,],[57,57,57,57,57,57,57,57,57,57,-11,169,169,200,57,57,57,]),'NULL':([38,39,50,62,87,88,89,90,91,92,105,190,209,211,],[58,58,58,58,58,58,58,58,58,58,-11,58,58,58,]),'LBRACE':([86,93,107,139,140,141,142,147,159,174,],[109,116,127,153,154,155,156,160,175,190,]),'LBRACKET':([135,136,137,138,],[149,150,151,152,]),'ELSE':([145,],[159,]),'RBRACKET':([149,150,151,152,162,163,164,165,166,167,168,169,194,196,198,200,],[-60,-63,-66,-69,178,-59,180,-62,182,-65,184,-68,-58,-61,-64,-67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,109,116,127,160,175,],[1,129,131,144,176,191,]),'expression':([0,38,39,50,62,87,88,89,90,91,92,109,116,127,160,175,190,209,211,],[2,60,60,60,60,60,60,60,60,60,60,2,2,2,2,2,60,60,60,]),'declaration':([0,109,116,127,160,175,],[3,3,3,3,3,3,]),'assignation':([0,40,109,116,127,160,175,],[4,62,4,4,4,4,4,]),'function':([0,109,116,127,160,175,],[5,5,5,5,5,5,]),'if':([0,109,116,127,160,175,],[6,6,6,6,6,6,]),'while':([0,109,116,127,160,175,],[7,7,7,7,7,7,]),'for':([0,109,116,127,160,175,],[8,8,8,8,8,8,]),'list':([0,109,116,127,160,175,],[9,9,9,9,9,9,]),'set':([0,109,116,127,160,175,],[10,10,10,10,10,10,]),'map':([0,109,116,127,160,175,],[11,11,11,11,11,11,]),'term':([0,32,33,38,39,50,62,87,88,89,90,91,92,109,116,127,160,175,190,209,211,],[12,44,45,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'varType':([0,40,51,108,109,116,127,160,175,],[13,63,81,81,13,13,13,13,13,]),'numeric':([0,32,33,34,35,36,38,39,50,62,87,88,89,90,91,92,109,116,127,160,175,190,209,211,],[24,24,24,46,47,48,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'booleanExpression':([38,39,62,],[52,61,94,]),'variable':([38,39,50,62,87,88,89,90,91,92,190,209,211,],[53,53,80,53,110,111,112,113,114,115,207,207,214,]),'primitive':([43,104,],[74,126,]),'parameters':([51,],[82,]),'parametersList':([51,108,],[83,128,]),'empty':([51,],[84,]),'parameter':([51,108,],[85,85,]),'increment':([117,],[133,]),'listIntValue':([149,155,],[162,172,]),'listStringValue':([150,153,],[164,170,]),'listDoubleValue':([151,154,],[166,171,]),'listBoolValue':([152,156,],[168,173,]),'mapValues':([190,],[205,]),'mapPair':([190,209,],[206,212,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','yacc.py',7),
  ('statement -> declaration','statement',1,'p_statement','yacc.py',8),
  ('statement -> assignation','statement',1,'p_statement','yacc.py',9),
  ('statement -> function','statement',1,'p_statement','yacc.py',10),
  ('statement -> if','statement',1,'p_statement','yacc.py',11),
  ('statement -> while','statement',1,'p_statement','yacc.py',12),
  ('statement -> for','statement',1,'p_statement','yacc.py',13),
  ('statement -> list','statement',1,'p_statement','yacc.py',14),
  ('statement -> set','statement',1,'p_statement','yacc.py',15),
  ('statement -> map','statement',1,'p_statement','yacc.py',16),
  ('assignation -> varType ID ASSIGN_OPERATOR variable SEMICOLON','assignation',5,'p_assignation','yacc.py',19),
  ('declaration -> varType ID SEMICOLON','declaration',3,'p_declaration','yacc.py',22),
  ('numeric -> INT','numeric',1,'p_numeric','yacc.py',25),
  ('numeric -> DOUBLE','numeric',1,'p_numeric','yacc.py',26),
  ('expression -> expression PLUS term','expression',3,'p_plusOperation','yacc.py',29),
  ('expression -> expression MINUS term','expression',3,'p_minuxOperation','yacc.py',31),
  ('expression -> term','expression',1,'p_expressionTerm','yacc.py',34),
  ('term -> term TIMES numeric','term',3,'p_termTimes','yacc.py',37),
  ('term -> term DIVIDE numeric','term',3,'p_termDivide','yacc.py',40),
  ('term -> term MODULE numeric','term',3,'p_termModule','yacc.py',43),
  ('term -> numeric','term',1,'p_termValue','yacc.py',46),
  ('variable -> INT','variable',1,'p_variable','yacc.py',49),
  ('variable -> DOUBLE','variable',1,'p_variable','yacc.py',50),
  ('variable -> STRING','variable',1,'p_variable','yacc.py',51),
  ('variable -> BOOL','variable',1,'p_variable','yacc.py',52),
  ('variable -> NULL','variable',1,'p_variable','yacc.py',53),
  ('variable -> ID','variable',1,'p_variable','yacc.py',54),
  ('variable -> expression','variable',1,'p_variable','yacc.py',55),
  ('varType -> INT_TYPE','varType',1,'p_varType','yacc.py',59),
  ('varType -> STRING_TYPE','varType',1,'p_varType','yacc.py',60),
  ('varType -> NUM_TYPE','varType',1,'p_varType','yacc.py',61),
  ('varType -> DOUBLE_TYPE','varType',1,'p_varType','yacc.py',62),
  ('varType -> BOOL_TYPE','varType',1,'p_varType','yacc.py',63),
  ('varType -> LIST_TYPE','varType',1,'p_varType','yacc.py',64),
  ('varType -> MAP_TYPE','varType',1,'p_varType','yacc.py',65),
  ('varType -> VAR','varType',1,'p_varType','yacc.py',66),
  ('varType -> CONST','varType',1,'p_varType','yacc.py',67),
  ('varType -> FINAL','varType',1,'p_varType','yacc.py',68),
  ('varType -> VOID','varType',1,'p_varType','yacc.py',69),
  ('primitive -> INT_TYPE','primitive',1,'p_primitive','yacc.py',72),
  ('primitive -> STRING_TYPE','primitive',1,'p_primitive','yacc.py',73),
  ('primitive -> NUM_TYPE','primitive',1,'p_primitive','yacc.py',74),
  ('primitive -> DOUBLE_TYPE','primitive',1,'p_primitive','yacc.py',75),
  ('primitive -> BOOL_TYPE','primitive',1,'p_primitive','yacc.py',76),
  ('booleanExpression -> variable EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',79),
  ('booleanExpression -> variable NOT_EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',80),
  ('booleanExpression -> variable GREATER_THAN variable','booleanExpression',3,'p_booleanExpression','yacc.py',81),
  ('booleanExpression -> variable LESS_THAN variable','booleanExpression',3,'p_booleanExpression','yacc.py',82),
  ('booleanExpression -> variable GREATER_THAN_OR_EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',83),
  ('booleanExpression -> variable LESS_THAN_OR_EQUALS variable','booleanExpression',3,'p_booleanExpression','yacc.py',84),
  ('if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE','if',7,'p_if','yacc.py',87),
  ('if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE ELSE LBRACE statement RBRACE','if',11,'p_if','yacc.py',88),
  ('if -> IF LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE','if',6,'p_if','yacc.py',89),
  ('while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE statement RBRACE','while',7,'p_while','yacc.py',92),
  ('while -> WHILE LPARENTHESIS booleanExpression RPARENTHESIS LBRACE RBRACE','while',6,'p_while','yacc.py',93),
  ('for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE statement RBRACE','for',10,'p_for','yacc.py',96),
  ('for -> FOR LPARENTHESIS assignation booleanExpression SEMICOLON increment RPARENTHESIS LBRACE RBRACE','for',9,'p_for','yacc.py',97),
  ('listIntValue -> listIntValue COMMA INT','listIntValue',3,'p_listIntValue','yacc.py',100),
  ('listIntValue -> INT','listIntValue',1,'p_listIntValue','yacc.py',101),
  ('listIntValue -> <empty>','listIntValue',0,'p_listIntValue','yacc.py',102),
  ('listStringValue -> listStringValue COMMA STRING','listStringValue',3,'p_listStringValue','yacc.py',104),
  ('listStringValue -> STRING','listStringValue',1,'p_listStringValue','yacc.py',105),
  ('listStringValue -> <empty>','listStringValue',0,'p_listStringValue','yacc.py',106),
  ('listDoubleValue -> listDoubleValue COMMA DOUBLE','listDoubleValue',3,'p_listDoubleValue','yacc.py',108),
  ('listDoubleValue -> DOUBLE','listDoubleValue',1,'p_listDoubleValue','yacc.py',109),
  ('listDoubleValue -> <empty>','listDoubleValue',0,'p_listDoubleValue','yacc.py',110),
  ('listBoolValue -> listBoolValue COMMA BOOL','listBoolValue',3,'p_listBoolValue','yacc.py',112),
  ('listBoolValue -> BOOL','listBoolValue',1,'p_listBoolValue','yacc.py',113),
  ('listBoolValue -> <empty>','listBoolValue',0,'p_listBoolValue','yacc.py',114),
  ('mapValues -> mapValues COMMA mapPair','mapValues',3,'p_mapValues_multiple','yacc.py',117),
  ('mapValues -> mapPair','mapValues',1,'p_mapValues_single','yacc.py',120),
  ('mapPair -> variable COLON variable','mapPair',3,'p_mapPair','yacc.py',123),
  ('list -> LIST_TYPE LESS_THAN INT_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACKET listIntValue RBRACKET SEMICOLON','list',10,'p_list','yacc.py',126),
  ('list -> LIST_TYPE LESS_THAN STRING_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACKET listStringValue RBRACKET SEMICOLON','list',10,'p_list','yacc.py',127),
  ('list -> LIST_TYPE LESS_THAN DOUBLE_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACKET listDoubleValue RBRACKET SEMICOLON','list',10,'p_list','yacc.py',128),
  ('list -> LIST_TYPE LESS_THAN BOOL_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACKET listBoolValue RBRACKET SEMICOLON','list',10,'p_list','yacc.py',129),
  ('set -> SET_TYPE LESS_THAN STRING_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACE listStringValue RBRACE SEMICOLON','set',10,'p_set','yacc.py',132),
  ('set -> SET_TYPE LESS_THAN DOUBLE_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACE listDoubleValue RBRACE SEMICOLON','set',10,'p_set','yacc.py',133),
  ('set -> SET_TYPE LESS_THAN INT_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACE listIntValue RBRACE SEMICOLON','set',10,'p_set','yacc.py',134),
  ('set -> SET_TYPE LESS_THAN BOOL_TYPE GREATER_THAN ID ASSIGN_OPERATOR LBRACE listBoolValue RBRACE SEMICOLON','set',10,'p_set','yacc.py',135),
  ('map -> MAP_TYPE LESS_THAN primitive COMMA primitive GREATER_THAN ID ASSIGN_OPERATOR LBRACE mapValues RBRACE SEMICOLON','map',12,'p_map','yacc.py',138),
  ('increment -> ID PLUS PLUS','increment',3,'p_increment','yacc.py',141),
  ('function -> varType ID LPARENTHESIS parameters RPARENTHESIS LBRACE statement RBRACE','function',8,'p_function','yacc.py',144),
  ('parameter -> varType ID','parameter',2,'p_parameter','yacc.py',147),
  ('parametersList -> parameter','parametersList',1,'p_parametersList','yacc.py',150),
  ('parametersList -> parameter COMMA parametersList','parametersList',3,'p_parametersList','yacc.py',151),
  ('parameters -> parametersList','parameters',1,'p_parameters','yacc.py',154),
  ('parameters -> empty','parameters',1,'p_parameters','yacc.py',155),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',158),
]
